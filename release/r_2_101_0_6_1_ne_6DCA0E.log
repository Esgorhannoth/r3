
file: %core-tests.r

[action? :abs] "succeeded"
[not action? 1] "succeeded"
[action! = type? :abs] "succeeded"
[1 == do reduce [:abs -1]] "succeeded"
[binary? #{00}] "succeeded"
[not binary? 1] "succeeded"
[binary! = type? #{00}] "succeeded"
[
	system/options/binary-base: 2
	"2#{00000000}" == mold #{00}
] "succeeded"
[
	system/options/binary-base: 64
	"64#{AAAA}" == mold #{000000}
] "succeeded"
[
	system/options/binary-base: 16
	"#{00}" == mold #{00}
] "succeeded"
[#{00} == 2#{00000000}] "succeeded"
[#{000000} == 64#{AAAA}] "succeeded"
[#{} == make binary! 0] "succeeded"
[#{00} == to binary! "^(00)"] "succeeded"
[binary? #{}] "succeeded"
[#{} == #[binary! #{}]] "succeeded"
[bitset? make bitset! "a"] "succeeded"
[not bitset? 1] "succeeded"
[bitset! = type? make bitset! "a"] "succeeded"
[bitset? #[bitset! #{}]] "succeeded"
[block? [1]] "succeeded"
[not block? 1] "succeeded"
[block! = type? [1]] "succeeded"
[block? []] "succeeded"
[[] == #[block! []]] "succeeded"
[[] == make block! 0] "succeeded"
[[] == to block! ""] "succeeded"
["[]" == mold []] "succeeded"
[char? #"a"] "succeeded"
[not char? 1] "succeeded"
[char! = type? #"a"] "succeeded"
[#"^@" = #"^(00)"] "succeeded"
[#"^A" = #"^(01)"] "succeeded"
[#"^B" = #"^(02)"] "succeeded"
[#"^C" = #"^(03)"] "succeeded"
[#"^D" = #"^(04)"] "succeeded"
[#"^E" = #"^(05)"] "succeeded"
[#"^F" = #"^(06)"] "succeeded"
[#"^G" = #"^(07)"] "succeeded"
[#"^H" = #"^(08)"] "succeeded"
[#"^I" = #"^(09)"] "succeeded"
[#"^J" = #"^(0A)"] "succeeded"
[#"^K" = #"^(0B)"] "succeeded"
[#"^L" = #"^(0C)"] "succeeded"
[#"^M" = #"^(0D)"] "succeeded"
[#"^N" = #"^(0E)"] "succeeded"
[#"^O" = #"^(0F)"] "succeeded"
[#"^P" = #"^(10)"] "succeeded"
[#"^Q" = #"^(11)"] "succeeded"
[#"^R" = #"^(12)"] "succeeded"
[#"^S" = #"^(13)"] "succeeded"
[#"^T" = #"^(14)"] "succeeded"
[#"^U" = #"^(15)"] "succeeded"
[#"^V" = #"^(16)"] "succeeded"
[#"^W" = #"^(17)"] "succeeded"
[#"^X" = #"^(18)"] "succeeded"
[#"^Y" = #"^(19)"] "succeeded"
[#"^Z" = #"^(1A)"] "succeeded"
[#"^[" = #"^(1B)"] "succeeded"
[#"^\" = #"^(1C)"] "succeeded"
[#"^]" = #"^(1D)"] "succeeded"
[#"^!" = #"^(1E)"] "succeeded"
[#"^_" = #"^(1F)"] "succeeded"
[#" " = #"^(20)"] "succeeded"
[#"!" = #"^(21)"] "succeeded"
[#"^"" = #"^(22)"] "succeeded"
[#"#" = #"^(23)"] "succeeded"
[#"$" = #"^(24)"] "succeeded"
[#"%" = #"^(25)"] "succeeded"
[#"&" = #"^(26)"] "succeeded"
[#"'" = #"^(27)"] "succeeded"
[#"(" = #"^(28)"] "succeeded"
[#")" = #"^(29)"] "succeeded"
[#"*" = #"^(2A)"] "succeeded"
[#"+" = #"^(2B)"] "succeeded"
[#"," = #"^(2C)"] "succeeded"
[#"-" = #"^(2D)"] "succeeded"
[#"." = #"^(2E)"] "succeeded"
[#"/" = #"^(2F)"] "succeeded"
[#"0" = #"^(30)"] "succeeded"
[#"1" = #"^(31)"] "succeeded"
[#"2" = #"^(32)"] "succeeded"
[#"3" = #"^(33)"] "succeeded"
[#"4" = #"^(34)"] "succeeded"
[#"5" = #"^(35)"] "succeeded"
[#"6" = #"^(36)"] "succeeded"
[#"7" = #"^(37)"] "succeeded"
[#"8" = #"^(38)"] "succeeded"
[#"9" = #"^(39)"] "succeeded"
[#":" = #"^(3A)"] "succeeded"
[#";" = #"^(3B)"] "succeeded"
[#"<" = #"^(3C)"] "succeeded"
[#"=" = #"^(3D)"] "succeeded"
[#">" = #"^(3E)"] "succeeded"
[#"?" = #"^(3F)"] "succeeded"
[#"@" = #"^(40)"] "succeeded"
[#"A" = #"^(41)"] "succeeded"
[#"B" = #"^(42)"] "succeeded"
[#"C" = #"^(43)"] "succeeded"
[#"D" = #"^(44)"] "succeeded"
[#"E" = #"^(45)"] "succeeded"
[#"F" = #"^(46)"] "succeeded"
[#"G" = #"^(47)"] "succeeded"
[#"H" = #"^(48)"] "succeeded"
[#"I" = #"^(49)"] "succeeded"
[#"J" = #"^(4A)"] "succeeded"
[#"K" = #"^(4B)"] "succeeded"
[#"L" = #"^(4C)"] "succeeded"
[#"M" = #"^(4D)"] "succeeded"
[#"N" = #"^(4E)"] "succeeded"
[#"O" = #"^(4F)"] "succeeded"
[#"P" = #"^(50)"] "succeeded"
[#"Q" = #"^(51)"] "succeeded"
[#"R" = #"^(52)"] "succeeded"
[#"S" = #"^(53)"] "succeeded"
[#"T" = #"^(54)"] "succeeded"
[#"U" = #"^(55)"] "succeeded"
[#"V" = #"^(56)"] "succeeded"
[#"W" = #"^(57)"] "succeeded"
[#"X" = #"^(58)"] "succeeded"
[#"Y" = #"^(59)"] "succeeded"
[#"Z" = #"^(5A)"] "succeeded"
[#"[" = #"^(5B)"] "succeeded"
[#"\" = #"^(5C)"] "succeeded"
[#"]" = #"^(5D)"] "succeeded"
[#"^^" = #"^(5E)"] "succeeded"
[#"_" = #"^(5F)"] "succeeded"
[#"`" = #"^(60)"] "succeeded"
[#"a" = #"^(61)"] "succeeded"
[#"b" = #"^(62)"] "succeeded"
[#"c" = #"^(63)"] "succeeded"
[#"d" = #"^(64)"] "succeeded"
[#"e" = #"^(65)"] "succeeded"
[#"f" = #"^(66)"] "succeeded"
[#"g" = #"^(67)"] "succeeded"
[#"h" = #"^(68)"] "succeeded"
[#"i" = #"^(69)"] "succeeded"
[#"j" = #"^(6A)"] "succeeded"
[#"k" = #"^(6B)"] "succeeded"
[#"l" = #"^(6C)"] "succeeded"
[#"m" = #"^(6D)"] "succeeded"
[#"n" = #"^(6E)"] "succeeded"
[#"o" = #"^(6F)"] "succeeded"
[#"p" = #"^(70)"] "succeeded"
[#"q" = #"^(71)"] "succeeded"
[#"r" = #"^(72)"] "succeeded"
[#"s" = #"^(73)"] "succeeded"
[#"t" = #"^(74)"] "succeeded"
[#"u" = #"^(75)"] "succeeded"
[#"v" = #"^(76)"] "succeeded"
[#"w" = #"^(77)"] "succeeded"
[#"x" = #"^(78)"] "succeeded"
[#"y" = #"^(79)"] "succeeded"
[#"z" = #"^(7A)"] "succeeded"
[#"{" = #"^(7B)"] "succeeded"
[#"|" = #"^(7C)"] "succeeded"
[#"}" = #"^(7D)"] "succeeded"
[#"~" = #"^(7E)"] "succeeded"
[#"^~" = #"^(7F)"] "succeeded"
[#"^(null)" = #"^(00)"] "succeeded"
[#"^(line)" = #"^(0A)"] "succeeded"
[#"^/" = #"^(0A)"] "succeeded"
[#"^(tab)" = #"^(09)"] "succeeded"
[#"^-" = #"^(09)"] "succeeded"
[#"^(page)" = #"^(0C)"] "succeeded"
[#"^(esc)" = #"^(1B)"] "succeeded"
[#"^(back)" = #"^(08)"] "succeeded"
[#"^(del)" = #"^(7f)"] "succeeded"
[#"^^" = #"^(5E)"] "succeeded"
[#"^"" = #"^(22)"] "succeeded"
[#"^(00)" = make char! 0] "succeeded"
[#"^(00)" = to char! 0] "succeeded"
[{#"a"} = mold #"a"] "succeeded"
[char? #"^(00)"] "succeeded"
[char? #"^(ff)"] "succeeded"
[closure? closure [] ["OK"]] "succeeded"
[not closure? 1] "succeeded"
[closure! = type? closure [] ["OK"]] "succeeded"
[closure? closure [] []] "succeeded"
[closure? first [#[closure! [[][]]]]] "succeeded"
[
	f: closure [] []
	unset? f
] "succeeded"
[
	f: closure [] [:abs]
	:abs = f
] "succeeded"
[
	a-value: #{}
	f: closure [] [a-value]
	same? a-value f
] "succeeded"
[
	a-value: charset ""
	f: closure [] [a-value]
	same? a-value f
] "succeeded"
[
	a-value: []
	f: closure [] [a-value]
	same? a-value f
] "succeeded"
[
	a-value: none!
	f: closure [] [a-value]
	same? a-value f
] "succeeded"
[
	f: closure [] [1/Jan/0000]
	1/Jan/0000 = f
] "succeeded"
[
	f: closure [] [0.0]
	0.0 == f
] "succeeded"
[
	f: closure [] [1.0]
	1.0 == f
] "succeeded"
[
	a-value: me@here.com
	f: closure [] [a-value]
	same? a-value f
] "succeeded"
[
	f: closure [] [try [1 / 0]]
	error? f
] "succeeded"
[
	a-value: %""
	f: closure [] [a-value]
	same? a-value f
] "succeeded"
[
	a-value: does []
	f: closure [] [:a-value]
	same? :a-value f
] "succeeded"
[
	a-value: first [:a]
	f: closure [] [:a-value]
	(same? :a-value f) and (:a-value == f)
] "succeeded"
[
	f: closure [] [#"^@"]
	#"^@" == f
] "succeeded"
[
	a-value: make image! 0x0
	f: closure [] [a-value]
	same? a-value f
] "succeeded"
[
	f: closure [] [0]
	0 == f
] "succeeded"
[
	f: closure [] [1]
	1 == f
] "succeeded"
[
	f: closure [] [#a]
	#a == f
] "succeeded"
[
	a-value: first ['a/b]
	f: closure [] [:a-value]
	:a-value == f
] "succeeded"
[
	a-value: first ['a]
	f: closure [] [:a-value]
	:a-value == f
] "succeeded"
[
	f: closure [] [true]
	true = f
] "succeeded"
[
	f: closure [] [false]
	false = f
] "succeeded"
[
	f: closure [] [$1]
	$1 == f
] "succeeded"
[
	f: closure [] [:type?]
	same? :type? f
] "succeeded"
[
	f: closure [] [#[none]]
	none? f
] "succeeded"
[
	a-value: make object! []
	f: closure [] [:a-value]
	same? :a-value f
] "succeeded"
[
	a-value: first [()]
	f: closure [] [:a-value]
	same? :a-value f
] "succeeded"
[
	f: closure [] [get '+]
	same? get '+ f
] "succeeded"
[
	f: closure [] [0x0]
	0x0 == f
] "succeeded"
[
	a-value: 'a/b
	f: closure [] [:a-value]
	:a-value == f
] "succeeded"
[
	a-value: make port! http://
	f: closure [] [:a-value]
	port? f
] "succeeded"
[
	f: closure [] [/a]
	/a == f
] "succeeded"
[
	a-value: first [a/b:]
	f: closure [] [:a-value]
	:a-value == f
] "succeeded"
[
	a-value: first [a:]
	f: closure [] [:a-value]
	:a-value == all [:a-value]
] "succeeded"
[
	a-value: ""
	f: closure [] [:a-value]
	same? :a-value f
] "succeeded"
[
	a-value: make tag! ""
	f: closure [] [:a-value]
	same? :a-value f
] "succeeded"
[
	f: closure [] [0:00]
	0:00 == f
] "succeeded"
[
	f: closure [] [0.0.0]
	0.0.0 == f
] "succeeded"
[
	f: closure [] [()]
	unset? f
] "succeeded"
[
	f: closure [] ['a]
	'a == f
] "succeeded"
[
	c: closure [a][return a]
	1 == c 1
] "succeeded"
[
	g: closure [f [any-function!]] [f [return 1] 2]
	1 = g :do
] "succeeded"
[
	1 = loop 1 [
		f: closure [] [break/return 1]
		f
		2
	]
] "succeeded"
[
	1 = catch [
		f: closure [] [throw 1]
		f
		2
	]
] "succeeded"
[
	error? try [
		f: closure [] [1 / 0 2]
		f
		2
	]
] "succeeded"
[
	1 = loop 1 [
		f: closure [x] [
			either x = 1 [
				loop 1 [f 2]
				x
			] [break/return 1]
		]
		f 1
	]
] "succeeded"
[
	1 = catch [
		f: closure [x] [
			either x = 1 [
				catch [f 2]
				x
			] [throw 1]
		]
		f 1
	]
] "succeeded"
[
	f: closure [x] [
		either x = 1 [
			error? try [f 2]
			x = 1
		] [1 / 0]
	]
	f 1
] "succeeded"
[
	f: closure [] reduce [closure [] [true]]
	f
] "succeeded"
[
	a: closure [b] [does [b]]
	b: a 1
	c: a 2
	all [
		1 = b
		2 = c
	]
] "succeeded"
[closure? closure [self] []] "succeeded"
[not datatype? 1] "succeeded"
[datatype! = type? action!] "succeeded"
[datatype? action!] "succeeded"
[datatype? binary!] "succeeded"
[datatype? bitset!] "succeeded"
[datatype? block!] "succeeded"
[datatype? char!] "succeeded"
[datatype? closure!] "succeeded"
[datatype? command!] "succeeded"
[datatype? datatype!] "succeeded"
[datatype? date!] "succeeded"
[datatype? decimal!] "succeeded"
[datatype? email!] "succeeded"
[datatype? error!] "succeeded"
[datatype? event!] "succeeded"
[datatype? file!] "succeeded"
[datatype? function!] "succeeded"
[datatype? get-path!] "succeeded"
[datatype? get-word!] "succeeded"
[datatype? gob!] "succeeded"
[datatype? handle!] "succeeded"
[datatype? image!] "succeeded"
[datatype? integer!] "succeeded"
[datatype? issue!] "succeeded"
[datatype? library!] "succeeded"
[datatype? lit-path!] "succeeded"
[datatype? lit-word!] "succeeded"
[datatype? logic!] "succeeded"
[datatype? map!] "succeeded"
[datatype? module!] "succeeded"
[datatype? money!] "succeeded"
[datatype? native!] "succeeded"
[datatype? none!] "succeeded"
[datatype? object!] "succeeded"
[datatype? op!] "succeeded"
[datatype? pair!] "succeeded"
[datatype? paren!] "succeeded"
[datatype? path!] "succeeded"
[datatype? percent!] "succeeded"
[datatype? port!] "succeeded"
[datatype? refinement!] "succeeded"
[datatype? set-path!] "succeeded"
[datatype? set-word!] "succeeded"
[datatype? string!] "succeeded"
[datatype? struct!] "succeeded"
[datatype? tag!] "succeeded"
[datatype? time!] "succeeded"
[datatype? tuple!] "succeeded"
[datatype? typeset!] "succeeded"
[datatype? unset!] "succeeded"
[datatype? url!] "succeeded"
[datatype? vector!] "succeeded"
[datatype? word!] "succeeded"
[datatype? #[datatype! action!]] "succeeded"
[date? 25/Sep/2006] "succeeded"
[not date? 1] "succeeded"
[date! = type? 25/Sep/2006] "succeeded"
[25/Sep/2006 = 25/9/2006] "succeeded"
[25/Sep/2006 = 25-Sep-2006] "succeeded"
[25/Sep/2006 = 25-9-2006] "succeeded"
[25/Sep/2006 = make date! "25/Sep/2006"] "succeeded"
[25/Sep/2006 = to date! "25-Sep-2006"] "succeeded"
["25-Sep-2006" = mold 25/Sep/2006] "succeeded"
[date? 1/Jan/0000] "succeeded"
[date? 1/Jan/0000/0:00] "succeeded"
[
	found? any [
		error? try [date-d: 1/Jan/0000 - 1]
		date-d = load mold date-d
	]
] "succeeded"
[
	found? any [
		error? try [date-d: 31-Dec-16383 + 1]
		date-d = load mold date-d
	]
] "succeeded"
[decimal? 0.0] "succeeded"
[not decimal? 0] "succeeded"
[decimal! = type? 0.0] "succeeded"
[decimal? 1.0] "succeeded"
[decimal? -1.0] "succeeded"
[decimal? 1.5] "succeeded"
[equal? #{7FEFFFFFFFFFFFFF} to binary! 1.7976931348623157e308] "succeeded"
[equal? #{0010000000000000} to binary! 2.2250738585072014E-308] "succeeded"
[equal? #{000FFFFFFFFFFFFF} to binary! 2.2250738585072009E-308] "failed"
[equal? #{0000000000000001} to binary! 4.9406564584124654E-324] "succeeded"
[equal? #{0000000000000000} to binary! 0.0] "succeeded"
[equal? #{8000000000000000} to binary! -0.0] "succeeded"
[equal? #{8000000000000001} to binary! -4.9406564584124654E-324] "succeeded"
[equal? #{800FFFFFFFFFFFFF} to binary! -2.2250738585072009E-308] "failed"
[equal? #{8010000000000000} to binary! -2.2250738585072014E-308] "succeeded"
[equal? #{FFEFFFFFFFFFFFFF} to binary! -1.7976931348623157e308] "succeeded"
[
	system/options/decimal-digits: 17
	system/options/decimal-digits = 17
] "succeeded"
[zero? 1.7976931348623157e308 - load mold 1.7976931348623157e308] "succeeded"
[same? 1.7976931348623157e308 load mold 1.7976931348623157e308] "succeeded"
[zero? 2.2250738585072014E-308 - load mold 2.2250738585072014E-308] "succeeded"
[same? 2.2250738585072014E-308 load mold 2.2250738585072014E-308] "succeeded"
[zero? 2.2250738585072009E-308 - load mold 2.2250738585072009E-308] "succeeded"
[same? 2.2250738585072009E-308 load mold 2.2250738585072009E-308] "failed"
[zero? 4.9406564584124654E-324 - load mold 4.9406564584124654E-324] "succeeded"
[same? 4.9406564584124654E-324 load mold 4.9406564584124654E-324] "succeeded"
[zero? 0.0 - load mold 0.0] "succeeded"
[same? 0.0 load mold 0.0] "succeeded"
[zero? -0.0 - load mold -0.0] "succeeded"
[same? -0.0 load mold -0.0] "succeeded"
[zero? -4.9406564584124654E-324 - load mold -4.9406564584124654E-324] "succeeded"
[same? -4.9406564584124654E-324 load mold -4.9406564584124654E-324] "succeeded"
[zero? -2.2250738585072009E-308 - load mold -2.2250738585072009E-308] "succeeded"
[same? -2.2250738585072009E-308 load mold -2.2250738585072009E-308] "failed"
[zero? -2.2250738585072014E-308 - load mold -2.2250738585072014E-308] "succeeded"
[same? -2.2250738585072014E-308 load mold -2.2250738585072014E-308] "succeeded"
[zero? -1.7976931348623157E308 - load mold -1.7976931348623157e308] "succeeded"
[same? -1.7976931348623157E308 load mold -1.7976931348623157e308] "succeeded"
[zero? 0.10000000000000001 - load mold 0.10000000000000001] "succeeded"
[same? 0.10000000000000001 load mold 0.10000000000000001] "succeeded"
[zero? 0.29999999999999999 - load mold 0.29999999999999999] "succeeded"
[same? 0.29999999999999999 load mold 0.29999999999999999] "succeeded"
[zero? 0.30000000000000004 - load mold 0.30000000000000004] "succeeded"
[same? 0.30000000000000004 load mold 0.30000000000000004] "succeeded"
[zero? 9.9999999999999926e152 - load mold 9.9999999999999926e152] "succeeded"
[same? 9.9999999999999926e152 load mold 9.9999999999999926e152] "succeeded"
[zero? 1.7976931348623157e308 - load mold/all 1.7976931348623157e308] "succeeded"
[same? 1.7976931348623157e308 load mold/all 1.7976931348623157e308] "succeeded"
[zero? 2.2250738585072014E-308 - load mold/all 2.2250738585072014E-308] "succeeded"
[same? 2.2250738585072014E-308 load mold/all 2.2250738585072014E-308] "succeeded"
[zero? 2.2250738585072009E-308 - load mold/all 2.2250738585072009E-308] "succeeded"
[same? 2.2250738585072009E-308 load mold/all 2.2250738585072009E-308] "failed"
[zero? 4.9406564584124654E-324 - load mold/all 4.9406564584124654E-324] "succeeded"
[same? 4.9406564584124654E-324 load mold/all 4.9406564584124654E-324] "succeeded"
[zero? 0.0 - load mold/all 0.0] "succeeded"
[same? 0.0 load mold/all 0.0] "succeeded"
[zero? -0.0 - load mold/all -0.0] "succeeded"
[same? -0.0 load mold/all -0.0] "succeeded"
[zero? -4.9406564584124654E-324 - load mold/all -4.9406564584124654E-324] "succeeded"
[same? -4.9406564584124654E-324 load mold/all -4.9406564584124654E-324] "succeeded"
[zero? -2.2250738585072009E-308 - load mold/all -2.2250738585072009E-308] "succeeded"
[same? -2.2250738585072009E-308 load mold/all -2.2250738585072009E-308] "failed"
[zero? -2.2250738585072014E-308 - load mold/all -2.2250738585072014E-308] "succeeded"
[same? -2.2250738585072014E-308 load mold/all -2.2250738585072014E-308] "succeeded"
[zero? -1.7976931348623157E308 - load mold/all -1.7976931348623157e308] "succeeded"
[same? -1.7976931348623157E308 load mold/all -1.7976931348623157e308] "succeeded"
[zero? 0.10000000000000001 - load mold/all 0.10000000000000001] "succeeded"
[same? 0.10000000000000001 load mold/all 0.10000000000000001] "succeeded"
[zero? 0.29999999999999999 - load mold/all 0.29999999999999999] "succeeded"
[same? 0.29999999999999999 load mold/all 0.29999999999999999] "succeeded"
[zero? 0.30000000000000004 - load mold/all 0.30000000000000004] "succeeded"
[same? 0.30000000000000004 load mold/all 0.30000000000000004] "succeeded"
[zero? 9.9999999999999926e152 - load mold/all 9.9999999999999926e152] "succeeded"
[same? 9.9999999999999926e152 load mold/all 9.9999999999999926e152] "succeeded"
[c: last mold/all 1e16 (#"0" <= c) and (#"9" >= c)] "succeeded"
[1.1 == 1,1] "succeeded"
[1.1 = make decimal! 1.1] "succeeded"
[1.1 = make decimal! "1.1"] "succeeded"
[1.1 = to decimal! 1.1] "succeeded"
[1.1 = to decimal! "1.1"] "succeeded"
[error? try [to decimal! "t"]] "succeeded"
[equal? #{3ff0000000000000} to binary! 1.0] "succeeded"
[same? to decimal! #{3ff0000000000000} 1.0] "succeeded"
[equal? #{3FF0000000000009} to binary! to decimal! #{3FF0000000000009}] "succeeded"
[email? me@here.com] "succeeded"
[not email? 1] "succeeded"
[email! = type? me@here.com] "succeeded"
[email? #[email! ""]] "succeeded"
[strict-equal? #[email! ""] make email! 0] "succeeded"
[strict-equal? #[email! ""] to email! ""] "succeeded"
[error? try [1 / 0]] "succeeded"
[not error? 1] "succeeded"
[error! = type? try [1 / 0]] "succeeded"
[error? do head insert copy [] try [1 / 0]] "succeeded"
[try/except [make error! [type: 'script id: 'set-self]] [true]] "succeeded"
[try/except [make error! [type: 'throw id: 'break]] [true]] "succeeded"
[try/except [make error! [type: 'throw id: 'return]] [true]] "succeeded"
[try/except [make error! [type: 'throw id: 'throw]] [true]] "succeeded"
[try/except [make error! [type: 'throw id: 'continue]] [true]] "succeeded"
[try/except [make error! [type: 'throw id: 'halt]] [true]] "succeeded"
[try/except [make error! [type: 'throw id: 'quit]] [true]] "succeeded"
[error? make error! [type: 'note id: 'no-load]] "succeeded"
[error? make error! [type: 'note id: 'exited]] "succeeded"
[error? make error! [type: 'note id: 'deprecated]] "succeeded"
[error? make error! [type: 'note id: 'else-gone]] "succeeded"
[error? make error! [type: 'syntax id: 'invalid]] "succeeded"
[error? make error! [type: 'syntax id: 'missing]] "succeeded"
[error? make error! [type: 'syntax id: 'no-header]] "succeeded"
[error? make error! [type: 'syntax id: 'bad-header]] "succeeded"
[error? make error! [type: 'syntax id: 'bad-checksum]] "succeeded"
[error? make error! [type: 'syntax id: 'malconstruct]] "succeeded"
[error? make error! [type: 'syntax id: 'bad-char]] "succeeded"
[error? make error! [type: 'syntax id: 'needs]] "succeeded"
[error? make error! [type: 'script id: 'no-value]] "succeeded"
[error? make error! [type: 'script id: 'need-value]] "succeeded"
[error? make error! [type: 'script id: 'not-defined]] "succeeded"
[error? make error! [type: 'script id: 'not-in-context]] "succeeded"
[error? make error! [type: 'script id: 'no-arg]] "succeeded"
[error? make error! [type: 'script id: 'expect-arg]] "succeeded"
[error? make error! [type: 'script id: 'expect-val]] "succeeded"
[error? make error! [type: 'script id: 'expect-type]] "succeeded"
[error? make error! [type: 'script id: 'cannot-use]] "succeeded"
[error? make error! [type: 'script id: 'invalid-arg]] "succeeded"
[error? make error! [type: 'script id: 'invalid-type]] "succeeded"
[error? make error! [type: 'script id: 'invalid-op]] "succeeded"
[error? make error! [type: 'script id: 'no-op-arg]] "succeeded"
[error? make error! [type: 'script id: 'invalid-data]] "succeeded"
[error? make error! [type: 'script id: 'not-same-type]] "succeeded"
[error? make error! [type: 'script id: 'not-related]] "succeeded"
[error? make error! [type: 'script id: 'bad-func-def]] "succeeded"
[error? make error! [type: 'script id: 'bad-func-arg]] "succeeded"
[error? make error! [type: 'script id: 'no-refine]] "succeeded"
[error? make error! [type: 'script id: 'bad-refines]] "succeeded"
[error? make error! [type: 'script id: 'bad-refine]] "succeeded"
[error? make error! [type: 'script id: 'invalid-path]] "succeeded"
[error? make error! [type: 'script id: 'bad-path-type]] "succeeded"
[error? make error! [type: 'script id: 'bad-path-set]] "succeeded"
[error? make error! [type: 'script id: 'bad-field-set]] "succeeded"
[error? make error! [type: 'script id: 'dup-vars]] "succeeded"
[error? make error! [type: 'script id: 'past-end]] "succeeded"
[error? make error! [type: 'script id: 'missing-arg]] "succeeded"
[error? make error! [type: 'script id: 'out-of-range]] "succeeded"
[error? make error! [type: 'script id: 'too-short]] "succeeded"
[error? make error! [type: 'script id: 'too-long]] "succeeded"
[error? make error! [type: 'script id: 'invalid-chars]] "succeeded"
[error? make error! [type: 'script id: 'invalid-compare]] "succeeded"
[error? make error! [type: 'script id: 'assert-failed]] "succeeded"
[error? make error! [type: 'script id: 'wrong-type]] "succeeded"
[error? make error! [type: 'script id: 'invalid-part]] "succeeded"
[error? make error! [type: 'script id: 'type-limit]] "succeeded"
[error? make error! [type: 'script id: 'size-limit]] "succeeded"
[error? make error! [type: 'script id: 'no-return]] "succeeded"
[error? make error! [type: 'script id: 'block-lines]] "succeeded"
[error? make error! [type: 'script id: 'throw-usage]] "succeeded"
[error? make error! [type: 'script id: 'locked-word]] "succeeded"
[error? make error! [type: 'script id: 'protected]] "succeeded"
[error? make error! [type: 'script id: 'hidden]] "succeeded"
[error? make error! [type: 'script id: 'self-protected]] "succeeded"
[error? make error! [type: 'script id: 'bad-bad]] "succeeded"
[error? make error! [type: 'script id: 'bad-make-arg]] "succeeded"
[error? make error! [type: 'script id: 'bad-decode]] "succeeded"
[error? make error! [type: 'script id: 'already-used]] "succeeded"
[error? make error! [type: 'script id: 'wrong-denom]] "succeeded"
[error? make error! [type: 'script id: 'bad-press]] "succeeded"
[error? make error! [type: 'script id: 'dialect]] "succeeded"
[error? make error! [type: 'script id: 'bad-command]] "succeeded"
[error? make error! [type: 'script id: 'parse-rule]] "succeeded"
[error? make error! [type: 'script id: 'parse-end]] "succeeded"
[error? make error! [type: 'script id: 'parse-variable]] "succeeded"
[error? make error! [type: 'script id: 'parse-command]] "succeeded"
[error? make error! [type: 'script id: 'parse-series]] "succeeded"
[error? make error! [type: 'math id: 'zero-divide]] "succeeded"
[error? make error! [type: 'math id: 'overflow]] "succeeded"
[error? make error! [type: 'math id: 'zero-divide]] "succeeded"
[error? make error! [type: 'math id: 'overflow]] "succeeded"
[error? make error! [type: 'math id: 'positive]] "succeeded"
[error? make error! [type: 'access id: 'cannot-open]] "succeeded"
[error? make error! [type: 'access id: 'not-open]] "succeeded"
[error? make error! [type: 'access id: 'already-open]] "succeeded"
[error? make error! [type: 'access id: 'no-connect]] "succeeded"
[error? make error! [type: 'access id: 'not-connected]] "succeeded"
[error? make error! [type: 'access id: 'no-script]] "succeeded"
[error? make error! [type: 'access id: 'no-scheme-name]] "succeeded"
[error? make error! [type: 'access id: 'no-scheme]] "succeeded"
[error? make error! [type: 'access id: 'invalid-spec]] "succeeded"
[error? make error! [type: 'access id: 'invalid-port]] "succeeded"
[error? make error! [type: 'access id: 'invalid-actor]] "succeeded"
[error? make error! [type: 'access id: 'invalid-port-arg]] "succeeded"
[error? make error! [type: 'access id: 'no-port-action]] "succeeded"
[error? make error! [type: 'access id: 'protocol]] "succeeded"
[error? make error! [type: 'access id: 'invalid-check]] "succeeded"
[error? make error! [type: 'access id: 'write-error]] "succeeded"
[error? make error! [type: 'access id: 'read-error]] "succeeded"
[error? make error! [type: 'access id: 'read-only]] "succeeded"
[error? make error! [type: 'access id: 'no-buffer]] "succeeded"
[error? make error! [type: 'access id: 'timeout]] "succeeded"
[error? make error! [type: 'access id: 'no-create]] "succeeded"
[error? make error! [type: 'access id: 'no-delete]] "succeeded"
[error? make error! [type: 'access id: 'no-rename]] "succeeded"
[error? make error! [type: 'access id: 'bad-file-path]] "succeeded"
[error? make error! [type: 'access id: 'bad-file-mode]] "succeeded"
[error? make error! [type: 'access id: 'security]] "succeeded"
[error? make error! [type: 'access id: 'security-level]] "succeeded"
[error? make error! [type: 'access id: 'security-error]] "succeeded"
[error? make error! [type: 'access id: 'no-codec]] "succeeded"
[error? make error! [type: 'access id: 'bad-media]] "succeeded"
[error? make error! [type: 'access id: 'no-extension]] "succeeded"
[error? make error! [type: 'access id: 'bad-extension]] "succeeded"
[error? make error! [type: 'access id: 'extension-init]] "succeeded"
[error? make error! [type: 'access id: 'call-fail]] "succeeded"
[error? make error! [type: 'user id: 'message]] "succeeded"
[error? make error! [type: 'internal id: 'bad-path]] "succeeded"
[error? make error! [type: 'internal id: 'not-here]] "succeeded"
[error? make error! [type: 'internal id: 'no-memory]] "succeeded"
[error? make error! [type: 'internal id: 'stack-overflow]] "succeeded"
[error? make error! [type: 'internal id: 'globals-full]] "succeeded"
[error? make error! [type: 'internal id: 'max-natives]] "succeeded"
[error? make error! [type: 'internal id: 'bad-series]] "succeeded"
[error? make error! [type: 'internal id: 'limit-hit]] "succeeded"
[error? make error! [type: 'internal id: 'bad-sys-func]] "succeeded"
[error? make error! [type: 'internal id: 'feature-na]] "succeeded"
[error? make error! [type: 'internal id: 'not-done]] "succeeded"
[
	 x: 1
	 error? try [x: load/header ""]
	 not error? x
] "succeeded"
[not event? 1] "succeeded"
[file? %myscript.r] "succeeded"
[not file? 1] "succeeded"
[file! = type? %myscript.r] "succeeded"
[file? %""] "succeeded"
[%"" == #[file! ""]] "succeeded"
[%"" == make file! 0] "succeeded"
[%"" == to file! ""] "succeeded"
["%%2520" = mold to file! "%20"] "succeeded"
[file? %"/c/Program Files (x86)"] "succeeded"
[function? does ["OK"]] "succeeded"
[not function? 1] "succeeded"
[function! = type? does ["OK"]] "succeeded"
[function? does []] "succeeded"
[function? first [#[function! [[][]]]]] "succeeded"
[
	f: does []
	unset? f
] "succeeded"
[
	f: does [:abs]
	:abs = f
] "succeeded"
[
	a-value: #{}
	f: does [a-value]
	same? a-value f
] "succeeded"
[
	a-value: charset ""
	f: does [a-value]
	same? a-value f
] "succeeded"
[
	a-value: []
	f: does [a-value]
	same? a-value f
] "succeeded"
[
	a-value: none!
	f: does [a-value]
	same? a-value f
] "succeeded"
[
	f: does [1/Jan/0000]
	1/Jan/0000 = f
] "succeeded"
[
	f: does [0.0]
	0.0 == f
] "succeeded"
[
	f: does [1.0]
	1.0 == f
] "succeeded"
[
	a-value: me@here.com
	f: does [a-value]
	same? a-value f
] "succeeded"
[
	f: does [try [1 / 0]]
	error? f
] "succeeded"
[
	a-value: %""
	f: does [a-value]
	same? a-value f
] "succeeded"
[
	a-value: does []
	f: does [:a-value]
	same? :a-value f
] "succeeded"
[
	a-value: first [:a]
	f: does [:a-value]
	(same? :a-value f) and (:a-value == f)
] "succeeded"
[
	f: does [#"^@"]
	#"^@" == f
] "succeeded"
[
	a-value: make image! 0x0
	f: does [a-value]
	same? a-value f
] "succeeded"
[
	f: does [0]
	0 == f
] "succeeded"
[
	f: does [1]
	1 == f
] "succeeded"
[
	f: does [#a]
	#a == f
] "succeeded"
[
	a-value: first ['a/b]
	f: does [:a-value]
	:a-value == f
] "succeeded"
[
	a-value: first ['a]
	f: does [:a-value]
	:a-value == f
] "succeeded"
[
	f: does [true]
	true = f
] "succeeded"
[
	f: does [false]
	false = f
] "succeeded"
[
	f: does [$1]
	$1 == f
] "succeeded"
[
	f: does [:type?]
	same? :type? f
] "succeeded"
[
	f: does [#[none]]
	none? f
] "succeeded"
[
	a-value: make object! []
	f: does [:a-value]
	same? :a-value f
] "succeeded"
[
	a-value: first [()]
	f: does [:a-value]
	same? :a-value f
] "succeeded"
[
	f: does [get '+]
	same? get '+ f
] "succeeded"
[
	f: does [0x0]
	0x0 == f
] "succeeded"
[
	a-value: 'a/b
	f: does [:a-value]
	:a-value == f
] "succeeded"
[
	a-value: make port! http://
	f: does [:a-value]
	port? f
] "succeeded"
[
	f: does [/a]
	/a == f
] "succeeded"
[
	a-value: first [a/b:]
	f: does [:a-value]
	:a-value == f
] "succeeded"
[
	a-value: first [a:]
	f: does [:a-value]
	:a-value == all [:a-value]
] "succeeded"
[
	a-value: ""
	f: does [:a-value]
	same? :a-value f
] "succeeded"
[
	a-value: make tag! ""
	f: does [:a-value]
	same? :a-value f
] "succeeded"
[
	f: does [0:00]
	0:00 == f
] "succeeded"
[
	f: does [0.0.0]
	0.0.0 == f
] "succeeded"
[
	f: does [()]
	unset? f
] "succeeded"
[
	f: does ['a]
	'a == f
] "succeeded"
[
	g: func [f [any-function!]] [f [return 1] 2]
	1 = g :do
] "succeeded"
[
	1 = loop 1 [
		f: does [break/return 1]
		f
		2
	]
] "succeeded"
[
	1 = catch [
		f: does [throw 1]
		f
		2
	]
] "succeeded"
[
	error? try [
		f: does [1 / 0 2]
		f
		2
	]
] "succeeded"
[
	1 = loop 1 [
		f: func [x] [
			either x = 1 [
				loop 1 [f 2]
				x
			] [break/return 1]
		]
		f 1
	]
] "succeeded"
[
	1 = catch [
		f: func [x] [
			either x = 1 [
				catch [f 2]
				x
			] [throw 1]
		]
		f 1
	]
] "succeeded"
[
	f: func [x] [
		either x = 1 [
			error? try [f 2]
			x = 1
		] [1 / 0]
	]
	f 1
] "succeeded"
[
	f: func [/r x] [x]
	2 == f/r/r 1 2
] "succeeded"
[error? try [(type?) 1]] "succeeded"
[
	f: does reduce [does [true]]
	f
] "succeeded"
[
	a: func [b] [a: none c: b]
	f: func [d] [a [d] do c]
	all [
		1 = f 1
		2 = f 2
	]
] "succeeded"
[function? func [self] []] "succeeded"
[get-word? first [:a]] "succeeded"
[not get-word? 1] "succeeded"
[get-word! = type? first [:a]] "succeeded"
[
	; context-less get-word
	e: try [do to block! ":a"]
	e/id = 'not-defined
] "succeeded"
[
	unset 'a
	unset? :a
] "succeeded"
[gob? make gob! []] "succeeded"
[gob! = type? make gob! []] "succeeded"
[image? make image! 100x100] "succeeded"
[not image? 1] "succeeded"
[image! = type? make image! 0x0] "succeeded"
[integer? 0] "succeeded"
[integer? -0] "succeeded"
[not integer? 1.1] "succeeded"
[integer! = type? 0] "succeeded"
[integer? 1] "succeeded"
[integer? -1] "succeeded"
[integer? 2] "succeeded"
[integer? -2147483648] "succeeded"
[integer? 2147483647] "succeeded"
[integer? -9223372036854775808] "succeeded"
[integer? 9223372036854775807] "succeeded"
[0 = make integer! 0] "succeeded"
[0 = make integer! "0"] "succeeded"
[0 = to integer! 0] "succeeded"
[-2147483648 == to integer! -2147483648.0] "succeeded"
[-2147483648 == to integer! -2147483648.9] "succeeded"
[2147483647 == to integer! 2147483647.9] "succeeded"
[error? try [to integer! 9.2233720368547765e18]] "succeeded"
[error? try [to integer! -9.2233720368547779e18]] "succeeded"
[0 = to integer! "0"] "succeeded"
[0 = to integer! false] "succeeded"
[1 = to integer! true] "succeeded"
[0 = to integer! #"^@"] "succeeded"
[1 = to integer! #"^a"] "succeeded"
[0 = to integer! #0] "succeeded"
[1 = to integer! #1] "succeeded"
[error? try [to integer! "t"]] "succeeded"
["0" = mold 0] "succeeded"
["1" = mold 1] "succeeded"
["-1" = mold -1] "succeeded"
[issue? #aa] "succeeded"
[not issue? 1] "succeeded"
[issue! = type? #aa] "succeeded"
[issue? #a] "succeeded"
[lit-path? first ['a/b]] "succeeded"
[not lit-path? 1] "succeeded"
[lit-path! = type? first ['a/b]] "succeeded"
[
	a-value: first ['a/b]
	strict-equal? to path! :a-value do reduce [:a-value]
] "succeeded"
[lit-word? first ['a]] "succeeded"
[not lit-word? 1] "succeeded"
[lit-word! = type? first ['a]] "succeeded"
[
	a-value: first ['a]
	strict-equal? to word! :a-value do reduce [:a-value]
] "succeeded"
[word? '/] "failed, cannot load test source"
[word? '//] "failed, cannot load test source"
[word? '///] "failed, cannot load test source"
[word? '<] "succeeded"
[word? '>] "succeeded"
[word? '<=] "succeeded"
[word? '>=] "succeeded"
[word? '<>] "succeeded"
[get-word? first [:/]] "failed, cannot load test source"
[get-word? first [://]] "failed, cannot load test source"
[get-word? first [:///]] "failed, cannot load test source"
[set-word? first [/:]] "failed, cannot load test source"
[set-word? first [//:]] "failed, cannot load test source"
[set-word? first [///:]] "failed, cannot load test source"
[logic? true] "succeeded"
[logic? false] "succeeded"
[not logic? 1] "succeeded"
[logic! = type? true] "succeeded"
[logic! = type? false] "succeeded"
[true = #[true]] "succeeded"
[false = #[false]] "succeeded"
[on = true] "succeeded"
[off = false] "succeeded"
[yes = true] "succeeded"
[no = false] "succeeded"
[false = make logic! 0] "succeeded"
[true = make logic! 1] "succeeded"
[false = to logic! 0] "succeeded"
[true = to logic! 1] "succeeded"
[false = to logic! none] "succeeded"
[true = to logic! "f"] "succeeded"
["true" = mold true] "succeeded"
["false" = mold false] "succeeded"
[empty? make map! []] "succeeded"
[empty? make map! 4] "succeeded"
[2 == length? make map! [a 1 b 2]] "succeeded"
[m: make map! [a 1 b 2] 1 == m/a] "succeeded"
[m: make map! [a 1 b 2] 2 == m/b] "succeeded"
[m: make map! [a 1 b 2] none? m/c] "succeeded"
[m: make map! [a 1 b 2] m/c: 3 3 == m/c] "succeeded"
[error? try [make map! [1]]] "succeeded"
[empty? clear make map! [a 1 b 2]] "succeeded"
[empty? clear make map! [a 1 b 2]] "succeeded"
[m: make map! 8 clear m none? m/a] "succeeded"
[module? make module! [[] []]] "succeeded"
[not module? 1] "succeeded"
[module! = type? make module! [[] []]] "succeeded"
[
	a-module: make module! [
		[]
		[
			; 'var will be in the module
			var: 1
		]
	]
	var: 2
	1 == a-module/var
] "succeeded"
[
	a-module: make module! [
		[
			exports: [var]
		]

		[
			var: 2
		]
	]
	import a-module
	2 == var
] "succeeded"
[
	var: 1
	a-module: make module! [
		[
			exports: [var]
		]

		[
			var: 2
		]
	]
	import a-module
	1 == var
] "succeeded"
[money? $0.0] "succeeded"
[not money? 0] "succeeded"
[money! = type? $0.0] "succeeded"
[money? $1.0] "succeeded"
[money? -$1.0] "succeeded"
[money? $1.5] "succeeded"
[money? USD$1] "failed, cannot load test source"
[money? CZK$1] "failed, cannot load test source"
[money? $999999999999999.87] "succeeded"
[money? -$999999999999999.87] "succeeded"
[
	x: $999999999999999
	found? any [
		error? try [x: x + $1]
		not error? try [mold x]
	]
] "succeeded"
[
	x: -$999999999999999
	found? any [
		error? try [x: x - $1]
		not error? try [mold x]
	]
] "succeeded"
[$1.1 == $1,1] "succeeded"
[
	found? any [
		error? try [x: $1234567890123456]
		not error? try [mold x]
	]
] "succeeded"
[$11 = make money! 11] "succeeded"
[$1.1 = make money! "1.1"] "succeeded"
[$11 = to money! 11] "succeeded"
[$1.1 = to money! "1.1"] "succeeded"
["$1.10" = mold $1.10] "succeeded"
["-$1.10" = mold -$1.10] "succeeded"
["$0" = mold $0] "succeeded"
[$1 = $1.0000000000000000000000000] "succeeded"
[not $1 = $2] "succeeded"
[equal? $99999999999999999999999999e127 $99999999999999999999999999e127] "succeeded"
[equal? -$99999999999999999999999999e127 -$99999999999999999999999999e127] "succeeded"
[$0 = negate $0] "succeeded"
[not $0 = $1e-128] "succeeded"
[not $0 = -$1e-128] "succeeded"
[not $1 <> $1] "succeeded"
[$1 <= $2] "succeeded"
[not $2 <= $1] "succeeded"
[zero? $0] "succeeded"
[zero? negate $0] "succeeded"
[not zero? $1e-128] "succeeded"
[not zero? -$1e-128] "succeeded"
[not positive? $0] "succeeded"
[not positive? negate $0] "succeeded"
[positive? $1e-128] "succeeded"
[not positive? -$1e-128] "succeeded"
[not negative? $0] "succeeded"
[not negative? negate $0] "succeeded"
[not negative? $1e-128] "succeeded"
[negative? -$1e-128] "succeeded"
[same? $0 $0] "succeeded"
[same? $0 negate $0] "succeeded"
[same? $1 $1] "succeeded"
[not same? $1 $1.0] "succeeded"
[-$1 = negate $1] "succeeded"
[$1 = negate -$1] "succeeded"
["$1.0000000000000000000000000" = mold $2.0000000000000000000000000 - $1] "succeeded"
["$1" = mold $2 - $1] "succeeded"
["$1" = mold $1 * $1] "succeeded"
["$4" = mold $2 * $2] "succeeded"
["$1.0000000000000000000000000" = mold $1 * $1.0000000000000000000000000] "succeeded"
["$1.0000000000000000000000000" = mold $1.0000000000000000000000000 * $1.0000000000000000000000000] "succeeded"
["$1.0000000000000000000000000" = mold $1 / $1] "succeeded"
["$1.0000000000000000000000000" = mold $1 / $1.0] "succeeded"
["$1.0000000000000000000000000" = mold $1 / $1.000] "succeeded"
["$1.0000000000000000000000000" = mold $1 / $1.000000] "succeeded"
["$1.0000000000000000000000000" = mold $1 / $1.000000000] "succeeded"
["$1.0000000000000000000000000" = mold $1 / $1.000000000000] "succeeded"
["$1.0000000000000000000000000" = mold $1 / $1.0000000000000000000000000] "succeeded"
["$0.10000000000000000000000000" = mold $1 / $10] "succeeded"
["$0.33333333333333333333333333" = mold $1 / $3] "succeeded"
["$0.66666666666666666666666667" = mold $2 / $3] "succeeded"
[1 = to integer! $1] "succeeded"
[-9223372036854775808 == to integer! -$9223372036854775808.99] "succeeded"
[9223372036854775807 == to integer! $9223372036854775807.99] "succeeded"
[1.0 = to decimal! $1] "succeeded"
[zero? 0.3 - to decimal! $0.3] "succeeded"
[zero? 0.1 - to decimal! $0.1] "succeeded"
[
	x: 9.9999999999999981e152
	zero? x - to decimal! to money! x
] "succeeded"
[
	x: -9.9999999999999981e152
	zero? x - to decimal! to money! x
] "succeeded"
[
	x: 9.9999999999999926E152
	zero? x - to decimal! to money! x
] "succeeded"
[
	x: -9.9999999999999926E152
	zero? x - to decimal! to money! x
] "succeeded"
[
	x: 9.9999999999999293E152
	zero? x - to decimal! to money! x
] "succeeded"
[
	x: -9.9999999999999293E152
	zero? x - to decimal! to money! x
] "succeeded"
[
	x: to decimal! $1e-128
	zero? x - to decimal! to money! x
] "succeeded"
[
	x: to decimal! -$1e-128
	zero? x - to decimal! to money! x
] "succeeded"
[
	x: 9.2233720368547758E18
	zero? x - to decimal! to money! x
] "succeeded"
[
	x: -9.2233720368547758E18
	zero? x - to decimal! to money! x
] "succeeded"
[
	x: 9.2233720368547748E18
	zero? x - to decimal! to money! x
] "succeeded"
[
	x: -9.2233720368547748E18
	zero? x - to decimal! to money! x
] "succeeded"
[
	x: 9.2233720368547779E18
	zero? x - to decimal! to money! x
] "succeeded"
[
	x: -9.2233720368547779E18
	zero? x - to decimal! to money! x
] "succeeded"
[native? :type?] "succeeded"
[not native? 1] "succeeded"
[native! = type? :type?] "succeeded"
[same? none! do reduce [:type? make none! none]] "succeeded"
[none? none] "succeeded"
[not none? 1] "succeeded"
[none! = type? none] "succeeded"
[none = #[none]] "succeeded"
[none = #[none!]] "succeeded"
[none = #] "succeeded"
[none = make none! none] "succeeded"
[none = to none! none] "succeeded"
[none = to none! 1] "succeeded"
["none" = mold none] "succeeded"
[object? make object! [x: 1]] "succeeded"
[not object? 1] "succeeded"
[object! = type? make object! [x: 1]] "succeeded"
[object? make object! []] "succeeded"
[object? #[object! []]] "succeeded"
[
	x: 1
	make object! [x: 2]
	x = 1
] "succeeded"
[
	1 = loop 1 [
		make object! [break/return 1]
		2
	]
] "succeeded"
[
	1 = catch [
		make object! [throw 1]
		2
	]
] "succeeded"
[
	error? try [
		make object! [1 / 0]
		2
	]
] "succeeded"
[
	f: func [] [
		make object! [return 1]
		2
	]
	1 = f
] "succeeded"
[op? get '+] "succeeded"
[not op? 1] "succeeded"
[op! = type? get '+] "succeeded"
[error? try [do reduce [get '+ 1 2]]] "succeeded"
[3 = do reduce [1 :+ 2]] "failed, error was caused in the test code"
[pair? 1x2] "succeeded"
[not pair? 1] "succeeded"
[pair! = type? 1x2] "succeeded"
[1x1 = make pair! 1] "succeeded"
[1x2 = make pair! [1 2]] "succeeded"
[1x1 = to pair! 1] "succeeded"
[error? try [to pair! [0.4]]] "succeeded"
[1x2 = to pair! [1 2]] "succeeded"
["1x1" = mold 1x1] "succeeded"
[pair? -2147483648x-2147483648] "succeeded"
[pair? 2147483647x2147483647] "succeeded"
[paren? first [(1 + 1)]] "succeeded"
[not paren? 1] "succeeded"
[paren! = type? first [()]] "succeeded"
[strict-equal? first [()] first [#[paren! []]]] "succeeded"
[strict-equal? first [()] make paren! 0] "succeeded"
[strict-equal? first [()] to paren! []] "succeeded"
["()" == mold first [()]] "succeeded"
[
	a-value: first [(1)]
	1 == do reduce [:a-value]
] "succeeded"
[
	num1: 4
	num2: 1
	fact: to paren! [either num1 = 1 [num2] [num2: num1 * num2 num1: num1 - 1]]
	insert/only tail last fact fact
	24 = do fact
] "succeeded"
[
	fact: to paren! []
	insert/only fact fact
	error? try [do fact]
] "succeeded"
[path? 'a/b] "succeeded"
['a/b == first [a/b]] "succeeded"
[not path? 1] "succeeded"
[path! = type? 'a/b] "succeeded"
[path? make path! 0] "succeeded"
[strict-equal? make path! 0 to path! []] "succeeded"
[path? to path! []] "succeeded"
["a/b" = mold 'a/b] "succeeded"
[
	a-word: 1
	data: #{0201}
	2 = data/:a-word
] "succeeded"
[
	blk: reduce [:abs 2]
	2 == blk/:abs
] "succeeded"
[
	blk: [#{} 2]
	2 == blk/#{}
] "succeeded"
[
	blk: reduce [charset "a" 3]
	3 == do reduce [to path! reduce ['blk charset "a"]]
] "succeeded"
[
	blk: [[] 3]
	3 == blk/#[block! []]
] "succeeded"
[
	blk: [#[none] 3]
	3 == do [blk/#[none]]
] "succeeded"
[
	blk: [none 3]
	3 == do [blk/none]
] "succeeded"
[
	a-value: 1/Jan/0000
	0 == a-value/1
] "succeeded"
[
	a-value: me@here.com
	#"m" == a-value/1
] "succeeded"
[
	a-value: make error! ""
	a-value/type = 'user
] "succeeded"
[
	a-value: func [/local a] [a]
	1 == a-value/local 1
] "succeeded"
[
	a-value: make image! 1x1
	0.0.0.0 == a-value/1
] "succeeded"
[
	a-value: first ['a/b]
	'a == a-value/1
] "succeeded"
[
	a-value: USD$1
	"USD" = a-value/1
] "failed, cannot load test source"
[
	a-value: make object! [a: 1]
	1 == a-value/a
] "succeeded"
[
	a-value: 2x3
	2 = a-value/1
] "succeeded"
[
	a-value: first [(2)]
	2 == a-value/1
] "succeeded"
[
	a-value: 'a/b
	'a == a-value/1
] "succeeded"
[
	a-value: make port! http://
	none? a-value/data
] "succeeded"
[
	a-value: first [a/b:]
	'a == a-value/1
] "succeeded"
[
	a-value: "12"
	#"1" == a-value/1
] "succeeded"
[
	a-value: <tag>
	#"t" == a-value/1
] "succeeded"
[
	a-value: 2:03
	2 == a-value/1
] "succeeded"
[
	a-value: 1.2.3
	1 == a-value/1
] "succeeded"
[
	a-value: file://a
	file://a/1 = a-value/1
] "succeeded"
[
	b: [b 1]
	1 = b/b
] "succeeded"
[
	a: 1x2
	found? any [
		error? try [b: a/(a: [3 4] 1)]
		b = 1
		b = 3
	]
] "failed"
[
	a: make object! []
	path: 'a/a
	change/only back tail path path
	error? try [do path]
	true
] "succeeded"
[port? make port! http://] "succeeded"
[not port? 1] "succeeded"
[port! = type? make port! http://] "succeeded"
[refinement? /a] "succeeded"
[not refinement? 1] "succeeded"
[refinement! = type? /a] "succeeded"
[set-path? first [a/b:]] "succeeded"
[not set-path? 1] "succeeded"
[set-path! = type? first [a/b:]] "succeeded"
["a/b:" = mold first [a/b:]] "succeeded"
[
	a: make object! [b: none]
	a/b: 5
	5 == a/b
] "succeeded"
[
	o: make object! [a: 0x0]
    o/a/x: 71830
	o/a/x = 71830
] "succeeded"
[
	a: 1x2
	a/x: (a: [x 4] 3)
	any [
		a == 3x2
		a == [x 3]
	]
] "succeeded"
[set-word? first [a:]] "succeeded"
[not set-word? 1] "succeeded"
[set-word! = type? first [a:]] "succeeded"
[
	a: :abs
	equal? :a :abs
] "succeeded"
[
	a: #{}
	equal? :a #{}
] "succeeded"
[
	a: charset ""
	equal? :a charset ""
] "succeeded"
[
	a: []
	equal? a []
] "succeeded"
[
	a: action!
	equal? :a action!
] "succeeded"
[
	a: make map! []
	a/b: make object! [
		c: make map! []
	]
	integer? a/b/c/d: 1
] "succeeded"
[string? "ahoj"] "succeeded"
[not string? 1] "succeeded"
[string! = type? "ahoj"] "succeeded"
[string? ""] "succeeded"
["" == #[string! ""]] "succeeded"
["" == make string! 0] "succeeded"
["^@" = "^(00)"] "succeeded"
["^A" = "^(01)"] "succeeded"
["^B" = "^(02)"] "succeeded"
["^C" = "^(03)"] "succeeded"
["^D" = "^(04)"] "succeeded"
["^E" = "^(05)"] "succeeded"
["^F" = "^(06)"] "succeeded"
["^G" = "^(07)"] "succeeded"
["^H" = "^(08)"] "succeeded"
["^I" = "^(09)"] "succeeded"
["^J" = "^(0A)"] "succeeded"
["^K" = "^(0B)"] "succeeded"
["^L" = "^(0C)"] "succeeded"
["^M" = "^(0D)"] "succeeded"
["^N" = "^(0E)"] "succeeded"
["^O" = "^(0F)"] "succeeded"
["^P" = "^(10)"] "succeeded"
["^Q" = "^(11)"] "succeeded"
["^R" = "^(12)"] "succeeded"
["^S" = "^(13)"] "succeeded"
["^T" = "^(14)"] "succeeded"
["^U" = "^(15)"] "succeeded"
["^V" = "^(16)"] "succeeded"
["^W" = "^(17)"] "succeeded"
["^X" = "^(18)"] "succeeded"
["^Y" = "^(19)"] "succeeded"
["^Z" = "^(1A)"] "succeeded"
["^[" = "^(1B)"] "succeeded"
["^\" = "^(1C)"] "succeeded"
["^]" = "^(1D)"] "succeeded"
["^!" = "^(1E)"] "succeeded"
["^_" = "^(1F)"] "succeeded"
[" " = "^(20)"] "succeeded"
["!" = "^(21)"] "succeeded"
["^"" = "^(22)"] "succeeded"
["#" = "^(23)"] "succeeded"
["$" = "^(24)"] "succeeded"
["%" = "^(25)"] "succeeded"
["&" = "^(26)"] "succeeded"
["'" = "^(27)"] "succeeded"
["(" = "^(28)"] "succeeded"
[")" = "^(29)"] "succeeded"
["*" = "^(2A)"] "succeeded"
["+" = "^(2B)"] "succeeded"
["," = "^(2C)"] "succeeded"
["-" = "^(2D)"] "succeeded"
["." = "^(2E)"] "succeeded"
["/" = "^(2F)"] "succeeded"
["0" = "^(30)"] "succeeded"
["1" = "^(31)"] "succeeded"
["2" = "^(32)"] "succeeded"
["3" = "^(33)"] "succeeded"
["4" = "^(34)"] "succeeded"
["5" = "^(35)"] "succeeded"
["6" = "^(36)"] "succeeded"
["7" = "^(37)"] "succeeded"
["8" = "^(38)"] "succeeded"
["9" = "^(39)"] "succeeded"
[":" = "^(3A)"] "succeeded"
[";" = "^(3B)"] "succeeded"
["<" = "^(3C)"] "succeeded"
["=" = "^(3D)"] "succeeded"
[">" = "^(3E)"] "succeeded"
["?" = "^(3F)"] "succeeded"
["@" = "^(40)"] "succeeded"
["A" = "^(41)"] "succeeded"
["B" = "^(42)"] "succeeded"
["C" = "^(43)"] "succeeded"
["D" = "^(44)"] "succeeded"
["E" = "^(45)"] "succeeded"
["F" = "^(46)"] "succeeded"
["G" = "^(47)"] "succeeded"
["H" = "^(48)"] "succeeded"
["I" = "^(49)"] "succeeded"
["J" = "^(4A)"] "succeeded"
["K" = "^(4B)"] "succeeded"
["L" = "^(4C)"] "succeeded"
["M" = "^(4D)"] "succeeded"
["N" = "^(4E)"] "succeeded"
["O" = "^(4F)"] "succeeded"
["P" = "^(50)"] "succeeded"
["Q" = "^(51)"] "succeeded"
["R" = "^(52)"] "succeeded"
["S" = "^(53)"] "succeeded"
["T" = "^(54)"] "succeeded"
["U" = "^(55)"] "succeeded"
["V" = "^(56)"] "succeeded"
["W" = "^(57)"] "succeeded"
["X" = "^(58)"] "succeeded"
["Y" = "^(59)"] "succeeded"
["Z" = "^(5A)"] "succeeded"
["[" = "^(5B)"] "succeeded"
["\" = "^(5C)"] "succeeded"
["]" = "^(5D)"] "succeeded"
["^^" = "^(5E)"] "succeeded"
["_" = "^(5F)"] "succeeded"
["`" = "^(60)"] "succeeded"
["a" = "^(61)"] "succeeded"
["b" = "^(62)"] "succeeded"
["c" = "^(63)"] "succeeded"
["d" = "^(64)"] "succeeded"
["e" = "^(65)"] "succeeded"
["f" = "^(66)"] "succeeded"
["g" = "^(67)"] "succeeded"
["h" = "^(68)"] "succeeded"
["i" = "^(69)"] "succeeded"
["j" = "^(6A)"] "succeeded"
["k" = "^(6B)"] "succeeded"
["l" = "^(6C)"] "succeeded"
["m" = "^(6D)"] "succeeded"
["n" = "^(6E)"] "succeeded"
["o" = "^(6F)"] "succeeded"
["p" = "^(70)"] "succeeded"
["q" = "^(71)"] "succeeded"
["r" = "^(72)"] "succeeded"
["s" = "^(73)"] "succeeded"
["t" = "^(74)"] "succeeded"
["u" = "^(75)"] "succeeded"
["v" = "^(76)"] "succeeded"
["w" = "^(77)"] "succeeded"
["x" = "^(78)"] "succeeded"
["y" = "^(79)"] "succeeded"
["z" = "^(7A)"] "succeeded"
["{" = "^(7B)"] "succeeded"
["|" = "^(7C)"] "succeeded"
["}" = "^(7D)"] "succeeded"
["~" = "^(7E)"] "succeeded"
["^~" = "^(7F)"] "succeeded"
["^(null)" = "^(00)"] "succeeded"
["^(line)" = "^(0A)"] "succeeded"
["^/" = "^(0A)"] "succeeded"
["^(tab)" = "^(09)"] "succeeded"
["^-" = "^(09)"] "succeeded"
["^(page)" = "^(0C)"] "succeeded"
["^(esc)" = "^(1B)"] "succeeded"
["^(back)" = "^(08)"] "succeeded"
["^(del)" = "^(7f)"] "succeeded"
["^^" = "^(5E)"] "succeeded"
["^"" = "^(22)"] "succeeded"
["ahoj" = #[string! "ahoj"]] "succeeded"
["1" = to string! 1] "succeeded"
[{""} = mold ""] "succeeded"
[
	a: copy []
	insert/only a a
	string? mold a
] "succeeded"
[tag? <tag>] "succeeded"
[not tag? 1] "succeeded"
[tag! = type? <tag>] "succeeded"
[tag? #[tag! ""]] "succeeded"
[strict-equal? #[tag! ""] make tag! 0] "succeeded"
[strict-equal? #[tag! ""] to tag! ""] "succeeded"
["<tag>" == mold <tag>] "succeeded"
[typeset? any-block!] "succeeded"
[typeset? to-typeset any-block!] "succeeded"
[typeset? any-function!] "succeeded"
[typeset? to-typeset any-function!] "succeeded"
[typeset? any-path!] "succeeded"
[typeset? to-typeset any-path!] "succeeded"
[typeset? any-object!] "succeeded"
[typeset? to-typeset any-object!] "succeeded"
[typeset? any-string!] "succeeded"
[typeset? to-typeset any-string!] "succeeded"
[typeset? any-word!] "succeeded"
[typeset? to-typeset any-word!] "succeeded"
[typeset? immediate!] "succeeded"
[typeset? to-typeset immediate!] "succeeded"
[typeset? internal!] "succeeded"
[typeset? to-typeset internal!] "succeeded"
[typeset? number!] "succeeded"
[typeset? to-typeset number!] "succeeded"
[typeset? scalar!] "succeeded"
[typeset? to-typeset scalar!] "succeeded"
[typeset? series!] "succeeded"
[typeset? to-typeset series!] "succeeded"
[typeset? make typeset! [integer! none!]] "succeeded"
[typeset? make typeset! reduce [integer! none!]] "succeeded"
[typeset? to-typeset [integer! none!]] "succeeded"
[typeset! = type? series!] "succeeded"
[time? 0:00] "succeeded"
[not time? 1] "succeeded"
[time! = type? 0:00] "succeeded"
[0:0:10 = make time! 10] "succeeded"
[0:0:10 = to time! 10] "succeeded"
[error? try [to time! "a"]] "succeeded"
["0:00" = mold 0:00] "succeeded"
[
	found? any [
		error? try [t: -596522:0:0 - 1:00]
		t = load mold t
	]
] "succeeded"
[
	found? any [
		error? try [t: 596522:0:0 + 1:00]
		t = load mold t
	]
] "succeeded"
[error? try [load "--596523:-14:-07.772224"]] "succeeded"
[time? 596523:14:07.999999999] "succeeded"
[time? 596523:14:07.999999999] "succeeded"
[positive? 0:0:0.000000001] "succeeded"
[negative? -0:0:0.000000001] "succeeded"
[tuple? 1.2.3] "succeeded"
[not tuple? 1] "succeeded"
[tuple! = type? 1.2.3] "succeeded"
[1.2.3 = to tuple! [1 2 3]] "succeeded"
["1.2.3" = mold 1.2.3] "succeeded"
[tuple? make tuple! []] "succeeded"
[tuple? 255.255.255.255.255.255.255.255.255.255] "succeeded"
[error? try [load "255.255.255.255.255.255.255.255.255.255.255"]] "succeeded"
[unset? ()] "succeeded"
[unset! == type? ()] "succeeded"
[not unset? 1] "succeeded"
[unset? #[unset!]] "succeeded"
[unset? make unset! none] "succeeded"
[unset? to unset! none] "succeeded"
[unset? to unset! 1] "succeeded"
[error? try [a: ()]] "succeeded"
[not error? try [set/any 'a ()]] "succeeded"
[url? http://www.fm.tul.cz/~ladislav/rebol] "succeeded"
[not url? 1] "succeeded"
[url! = type? http://www.fm.tul.cz/~ladislav/rebol] "succeeded"
[url? #[url! ""]] "succeeded"
[strict-equal? #[url! ""] make url! 0] "succeeded"
[strict-equal? #[url! ""] to url! ""] "succeeded"
["http://" = mold http://] "succeeded"
["http://a%2520b" = mold http://a%2520b] "succeeded"
[word? 'a] "succeeded"
[not word? 1] "succeeded"
[word! = type? 'a] "succeeded"
[word? first [a]] "succeeded"
[1 == abs -1] "succeeded"
[
	a-value: #{}
	same? :a-value a-value
] "succeeded"
[
	a-value: charset ""
	same? :a-value a-value
] "succeeded"
[
	a-value: []
	same? :a-value a-value
] "succeeded"
[
	a-value: none!
	same? :a-value a-value
] "succeeded"
[
	a-value: 1/Jan/0000
	same? :a-value a-value
] "succeeded"
[
	a-value: 0.0
	:a-value == a-value
] "succeeded"
[
	a-value: 1.0
	:a-value == a-value
] "succeeded"
[
	a-value: me@here.com
	same? :a-value a-value
] "succeeded"
[
	error? a-value: try [1 / 0]
	same? :a-value a-value
] "succeeded"
[
	a-value: %""
	same? :a-value a-value
] "succeeded"
[
	a-value: does [1]
	1 == a-value
] "succeeded"
[
	a-value: first [:a]
	:a-value == a-value
] "succeeded"
[
	a-value: #"^@"
	:a-value == a-value
] "succeeded"
[
	a-value: make image! 0x0
	same? :a-value a-value
] "succeeded"
[
	a-value: 0
	:a-value == a-value
] "succeeded"
[
	a-value: 1
	:a-value == a-value
] "succeeded"
[
	a-value: #
	same? :a-value a-value
] "succeeded"
[
	a-value: first ['a/b]
	a-value == :a-value
] "succeeded"
[
	a-value: first ['a]
	a-value == to word! :a-value
] "succeeded"
[:true == true] "succeeded"
[:false == false] "succeeded"
[
	a-value: $1
	:a-value == a-value
] "succeeded"
[native! == type? :type?] "succeeded"
[:none == none] "succeeded"
[
	a-value: make object! []
	same? :a-value a-value
] "succeeded"
[
	a-value: first [()]
	same? :a-value a-value
] "succeeded"
[
	a-value: get '+
	1 a-value 2 == 3
] "succeeded"
[
	a-value: 0x0
	:a-value == a-value
] "succeeded"
[
	a-value: 'a/b
	:a-value == a-value
] "succeeded"
[
	a-value: make port! http://
	port? a-value
] "succeeded"
[
	a-value: /a
	:a-value == a-value
] "succeeded"
[
	a-value: first [a/b:]
	:a-value == a-value
] "succeeded"
[
	a-value: first [a:]
	:a-value == a-value
] "succeeded"
[
	a-value: ""
	same? :a-value a-value
] "succeeded"
[
	a-value: make tag! ""
	same? :a-value a-value
] "succeeded"
[
	a-value: 0:00
	same? :a-value a-value
] "succeeded"
[
	a-value: 0.0.0
	same? :a-value a-value
] "succeeded"
[
	unset 'a-value
	e: try [a-value]
	e/id = 'no-value
] "succeeded"
[
	a-value: 'a
	:a-value == a-value
] "succeeded"
[equal? :abs :abs] "succeeded"
[not equal? :abs :add] "succeeded"
[equal? :all :all] "succeeded"
[not equal? :all :any] "succeeded"
[equal? :+ :+] "succeeded"
[not equal? :+ :-] "succeeded"
[equal? a-value: func [][] :a-value] "succeeded"
[not equal? func [][] func [][]] "succeeded"
[equal? a-value: closure [][] :a-value] "succeeded"
[not equal? closure [][] closure [][]] "succeeded"
[equal? a-value: #{00} a-value] "succeeded"
[equal? #{00} #{00}] "succeeded"
[not equal? #{00} #{01}] "succeeded"
[equal? #{00} #[binary! #{0000} 2]] "succeeded"
[equal? #{00} #[binary! #{0100} 2]] "succeeded"
[equal? equal? #{00} #[binary! #{0100} 2] equal? #[binary! #{0100} 2] #{00}] "succeeded"
[not equal? #{00} #{0000}] "succeeded"
[equal? equal? #{00} #{0000} equal? #{0000} #{00}] "succeeded"
[not equal? #{} none] "succeeded"
[equal? equal? #{} none equal? none #{}] "succeeded"
[
	a-value: to email! ""
	equal? a-value to string! a-value
] "succeeded"
[
	a-value: to email! ""
	equal? equal? to string! a-value a-value equal? a-value to string! a-value
] "succeeded"
[
	a-value: %""
	equal? a-value to string! a-value
] "succeeded"
[
	a-value: %""
	equal? equal? a-value to string! a-value equal? to string! a-value a-value
] "succeeded"
[equal? a-value: #[image! 1x1 #{000000}] a-value] "succeeded"
[equal? #[image! 1x1 #{000000}] #[image! 1x1 #{000000}]] "succeeded"
[equal? #[image! 1x1 #{}] #[image! 1x1 #{000000}]] "succeeded"
[not equal? #[image! 1x2 #{000000}] #[image! 1x1 #{000000}]] "succeeded"
[not equal? #[image! 2x1 #{000000}] #[image! 1x1 #{000000}]] "succeeded"
[not equal? #[image! 1x1 #{000001}] #[image! 1x1 #{000000}]] "succeeded"
[equal? #[image! 1x1 #{000000} #{00}] #[image! 1x1 #{000000}]] "succeeded"
[not equal? #[image! 1x1 #{000000} #{01}] #[image! 1x1 #{000000}]] "succeeded"
[equal? #[image! 1x1 #{000000} 2] #[image! 1x1 #{000000} 2]] "succeeded"
[not equal? #[image! 1x1 #{000000} 2] #[image! 1x1 #{000000}]] "succeeded"
[
	a-value: #[image! 1x1 #{000000}]
	not equal? a-value next a-value
] "succeeded"
[equal? #[image! 0x0 #{}] next #[image! 1x1 #{000000}]] "succeeded"
[equal? #[image! 1x0 #{}] next #[image! 1x1 #{000000}]] "succeeded"
[equal? #[image! 0x1 #{}] next #[image! 1x1 #{000000}]] "succeeded"
[not equal? #{00} #[image! 1x1 #{000000}]] "succeeded"
[not equal? #{00000000} #[image! 1x1 #{000000}]] "succeeded"
[not equal? #{0000000000} #[image! 1x1 #{000000}]] "succeeded"
[equal? equal? #{00} #[image! 1x1 #{00}] equal? #[image! 1x1 #{00}] #{00}] "succeeded"
[not equal? #{00} to integer! #{00}] "succeeded"
[equal? equal? #{00} to integer! #{00} equal? to integer! #{00} #{00}] "succeeded"
[not-equal? a-value: #a to string! a-value] "succeeded"
[
	a-value: #a
	equal? equal? a-value to string! a-value equal? to string! a-value a-value
] "succeeded"
[not equal? a-value: "" to binary! a-value] "succeeded"
[
	a-value: ""
	equal? equal? a-value to binary! a-value equal? to binary! a-value a-value
] "succeeded"
[equal? a-value: to tag! "" to string! a-value] "succeeded"
[
	a-value: to tag! ""
	equal? equal? a-value to string! a-value equal? to string! a-value a-value
] "succeeded"
[equal? 0.0.0 0.0.0] "succeeded"
[not equal? 0.0.1 0.0.0] "succeeded"
[equal? 1.0.0 1.0.0.0.0.0.0.0.0.0] "succeeded"
[equal? 1.0.0.0.0.0.0.0.0.0 1.0.0] "succeeded"
[not equal? 1.0.0 0.0.0.0.0.0.0.1.0.0] "succeeded"
[
	a-value: 0.0.0.0
	not equal? to binary! a-value a-value
] "succeeded"
[
	a-value: 0.0.0.0
	equal? equal? to binary! a-value a-value equal? a-value to binary! a-value
] "succeeded"
[equal? #[bitset! #{00}] #[bitset! #{00}]] "succeeded"
[not equal? #[bitset! #{}] #[bitset! #{00}]] "succeeded"
[not equal? #{00} #[bitset! #{00}]] "succeeded"
[equal? equal? #[bitset! #{00}] #{00} equal? #{00} #[bitset! #{00}]] "succeeded"
[equal? [] []] "succeeded"
[equal? a-value: [] a-value] "succeeded"
[
	a-value: tail [1]
	clear head a-value
	equal? a-value a-value
] "succeeded"
[
	a-value: copy []
	insert/only a-value a-value
	equal? a-value a-value
] "succeeded"
[
	a-value: copy []
	insert/only a-value a-value
	b-value: copy []
	insert/only b-value b-value
	equal? a-value b-value
] "crashed"
[not equal? [] none] "succeeded"
[equal? equal? [] none equal? none []] "succeeded"
[not equal? [] first [()]] "succeeded"
[equal? equal? [] first [()] equal? first [()] []] "succeeded"
[not equal? [a b] 'a/b] "succeeded"
[
	a-value: 'a/b
	b-value: [a b]
	equal? equal? :a-value :b-value equal? :b-value :a-value
] "succeeded"
[not equal? [a b] first ['a/b]] "succeeded"
[
	a-value: first ['a/b]
	b-value: [a b]
	equal? equal? :a-value :b-value equal? :b-value :a-value
] "succeeded"
[not equal? [a b] first [a/b:]] "succeeded"
[
	a-value: first [a/b:]
	b-value: [a b]
	equal? equal? :a-value :b-value equal? :b-value :a-value
] "succeeded"
[not equal? [a b] first [:a/b]] "succeeded"
[
	a-value: first [:a/b]
	b-value: [a b]
	equal? equal? :a-value :b-value equal? :b-value :a-value
] "succeeded"
[equal? decimal! decimal!] "succeeded"
[not equal? decimal! integer!] "succeeded"
[equal? equal? decimal! integer! equal? integer! decimal!] "succeeded"
[not equal? number! integer!] "succeeded"
[equal? equal? number! integer! equal? integer! number!] "succeeded"
[not equal? integer! make typeset! [integer!]] "succeeded"
[	not equal? integer! to typeset! [integer!]] "succeeded"
[not equal? integer! to-typeset [integer!]] "succeeded"
[equal? number! number!] "succeeded"
[not equal? number! series!] "succeeded"
[equal? make typeset! [integer!] make typeset! [integer!]] "succeeded"
[equal? to typeset! [integer!] to typeset! [integer!]] "succeeded"
[equal? to-typeset [integer!] to-typeset [integer!]] "succeeded"
[equal? -1 -1] "succeeded"
[equal? 0 0] "succeeded"
[equal? 1 1] "succeeded"
[equal? 0.0 0.0] "succeeded"
[equal? 0.0 -0.0] "succeeded"
[equal? 1.0 1.0] "succeeded"
[equal? -1.0 -1.0] "succeeded"
[equal? -9223372036854775808 -9223372036854775808] "succeeded"
[equal? -9223372036854775807 -9223372036854775807] "succeeded"
[equal? 9223372036854775807 9223372036854775807] "succeeded"
[not equal? -9223372036854775808 -9223372036854775807] "succeeded"
[not equal? -9223372036854775808 -1] "succeeded"
[not equal? -9223372036854775808 0] "succeeded"
[not equal? -9223372036854775808 1] "succeeded"
[not equal? -9223372036854775808 9223372036854775806] "succeeded"
[not equal? -9223372036854775807 -9223372036854775808] "succeeded"
[not equal? -9223372036854775807 -1] "succeeded"
[not equal? -9223372036854775807 0] "succeeded"
[not equal? -9223372036854775807 1] "succeeded"
[not equal? -9223372036854775807 9223372036854775806] "succeeded"
[not equal? -9223372036854775807 9223372036854775807] "succeeded"
[not equal? -1 -9223372036854775808] "succeeded"
[not equal? -1 -9223372036854775807] "succeeded"
[not equal? -1 0] "succeeded"
[not equal? -1 1] "succeeded"
[not equal? -1 9223372036854775806] "succeeded"
[not equal? -1 9223372036854775807] "succeeded"
[not equal? 0 -9223372036854775808] "succeeded"
[not equal? 0 -9223372036854775807] "succeeded"
[not equal? 0 -1] "succeeded"
[not equal? 0 1] "succeeded"
[not equal? 0 9223372036854775806] "succeeded"
[not equal? 0 9223372036854775807] "succeeded"
[not equal? 1 -9223372036854775808] "succeeded"
[not equal? 1 -9223372036854775807] "succeeded"
[not equal? 1 -1] "succeeded"
[not equal? 1 0] "succeeded"
[not equal? 1 9223372036854775806] "succeeded"
[not equal? 1 9223372036854775807] "succeeded"
[not equal? 9223372036854775806 -9223372036854775808] "succeeded"
[not equal? 9223372036854775806 -9223372036854775807] "succeeded"
[not equal? 9223372036854775806 -1] "succeeded"
[not equal? 9223372036854775806 0] "succeeded"
[not equal? 9223372036854775806 1] "succeeded"
[not equal? 9223372036854775806 9223372036854775807] "succeeded"
[not equal? 9223372036854775807 -9223372036854775808] "succeeded"
[not equal? 9223372036854775807 -9223372036854775807] "succeeded"
[not equal? 9223372036854775807 -1] "succeeded"
[not equal? 9223372036854775807 0] "succeeded"
[not equal? 9223372036854775807 1] "succeeded"
[not equal? 9223372036854775807 9223372036854775806] "succeeded"
[equal? 0.3 0.1 + 0.1 + 0.1] "succeeded"
[equal? equal? 0.3 0.1 + 0.1 + 0.1 equal? 0.1 + 0.1 + 0.1 0.3] "succeeded"
[equal? 0.15 - 0.05 0.1] "succeeded"
[equal? equal? 0.15 - 0.05 0.1 equal? 0.1 0.15 - 0.05] "succeeded"
[equal? -0.5 cosine 120] "succeeded"
[equal? equal? -0.5 cosine 120 equal? cosine 120 -0.5] "succeeded"
[equal? 0.5 * square-root 2.0 sine 45] "succeeded"
[equal? equal? 0.5 * square-root 2.0 sine 45 equal? sine 45 0.5 * square-root 2.0] "succeeded"
[equal? 0.5 sine 30] "succeeded"
[equal? equal? 0.5 sine 30 equal? sine 30 0.5] "succeeded"
[equal? 0.5 cosine 60] "succeeded"
[equal? equal? 0.5 cosine 60 equal? cosine 60 0.5] "succeeded"
[equal? 0.5 * square-root 3.0 sine 60] "succeeded"
[equal? equal? 0.5 * square-root 3.0 sine 60 equal? sine 60 0.5 * square-root 3.0] "succeeded"
[equal? 0.5 * square-root 3.0 cosine 30] "succeeded"
[equal? equal? 0.5 * square-root 3.0 cosine 30 equal? cosine 30 0.5 * square-root 3.0] "succeeded"
[equal? square-root 3.0 tangent 60] "succeeded"
[equal? equal? square-root 3.0 tangent 60 equal? tangent 60 square-root 3.0] "succeeded"
[equal? (square-root 3.0) / 3.0 tangent 30] "succeeded"
[equal? equal? (square-root 3.0) / 3.0 tangent 30 equal? tangent 30 (square-root 3.0) / 3.0] "succeeded"
[equal? 1.0 tangent 45] "succeeded"
[equal? equal? 1.0 tangent 45 equal? tangent 45 1.0] "succeeded"
[
	num: square-root 2.0
	equal? 2.0 num * num
] "succeeded"
[
	num: square-root 2.0
	equal? equal? 2.0 num * num equal? num * num 2.0
] "succeeded"
[
	num: square-root 3.0
	equal? 3.0 num * num
] "succeeded"
[
	num: square-root 3.0
	equal? equal? 3.0 num * num equal? num * num 3.0
] "succeeded"
[equal? 0 0.0] "succeeded"
[equal? 0 $0] "succeeded"
[equal? 0 0%] "succeeded"
[equal? 0.0 $0] "succeeded"
[equal? 0.0 0%] "succeeded"
[equal? $0 0%] "succeeded"
[equal? equal? 1 1.0 equal? 1.0 1] "succeeded"
[equal? equal? 1 $1 equal? $1 1] "succeeded"
[equal? equal? 1 100% equal? 100% 1] "succeeded"
[equal? equal? 1.0 $1 equal? $1 1.0] "succeeded"
[equal? equal? 1.0 100% equal? 100% 1.0] "succeeded"
[equal? equal? $1 100% equal? 100% $1] "succeeded"
[equal? 10% + 10% + 10% 30%] "succeeded"
[equal? equal? 10% + 10% + 10% 30% equal? 30% 10% + 10% + 10%] "succeeded"
[equal? 2-Jul-2009 2-Jul-2009] "succeeded"
[not equal? 2-Jul-2009 2-Jul-2009/22:20] "succeeded"
[equal? equal? 2-Jul-2009 2-Jul-2009/22:20 equal? 2-Jul-2009/22:20 2-Jul-2009] "succeeded"
[equal? 2-Jul-2009 2-Jul-2009/00:00:00+00:00] "succeeded"
[	equal? equal? 2-Jul-2009 2-Jul-2009/00:00 equal? 2-Jul-2009/00:00 2-Jul-2009] "succeeded"
[equal? 2-Jul-2009/22:20 2-Jul-2009/20:20-2:00] "succeeded"
[equal? 00:00 00:00] "succeeded"
[equal? 0:0 00:00:00.0000000000] "succeeded"
[equal? equal? 0:0 00:00:00.0000000000 equal? 00:00:00.0000000000 0:0] "succeeded"
[not equal? 0:00 0] "succeeded"
[not equal? 0 00:00] "succeeded"
[equal? #"a" #"a"] "succeeded"
[not equal? #"a" 97] "succeeded"
[equal? equal? #"a" 97 equal? 97 #"a"] "succeeded"
[not equal? #"a" 97.0] "succeeded"
[equal? equal? #"a" 97.0 equal? 97.0 #"a"] "succeeded"
[equal? #"a" #"A"] "succeeded"
[equal? "a" "A"] "succeeded"
[equal? #a #A] "succeeded"
[equal? <a a="a"> <A A="A">] "succeeded"
[equal? http://a.com httP://A.coM] "succeeded"
[equal? a@a.com A@A.Com] "succeeded"
[equal? 'a 'a] "succeeded"
[equal? 'a 'A] "succeeded"
[equal? equal? 'a 'A equal? 'A 'a] "succeeded"
[equal? 'a use [a] ['a]] "succeeded"
[equal? equal? 'a use [a] ['a] equal? use [a] ['a] 'a] "succeeded"
[equal? 'a first [:a]] "succeeded"
[equal? equal? 'a first [:a] equal? first [:a] 'a] "succeeded"
[equal? 'a first ['a]] "succeeded"
[equal? equal? 'a first ['a] equal? first ['a] 'a] "succeeded"
[equal? 'a /a] "succeeded"
[equal? equal? 'a /a equal? /a 'a] "succeeded"
[equal? 'a first [a:]] "succeeded"
[equal? equal? 'a first [a:] equal? first [a:] 'a] "succeeded"
[equal? first [:a] first [:a]] "succeeded"
[equal? first [:a] first ['a]] "succeeded"
[equal? equal? first [:a] first ['a] equal? first ['a] first [:a]] "succeeded"
[equal? first [:a] /a] "succeeded"
[equal? equal? first [:a] /a equal? /a first [:a]] "succeeded"
[equal? first [:a] first [a:]] "succeeded"
[equal? equal? first [:a] first [a:] equal? first [a:] first [:a]] "succeeded"
[equal? first ['a] first ['a]] "succeeded"
[equal? first ['a] /a] "succeeded"
[equal? equal? first ['a] /a equal? /a first ['a]] "succeeded"
[equal? first ['a] first [a:]] "succeeded"
[equal? equal? first ['a] first [a:] equal? first [a:] first ['a]] "succeeded"
[equal? /a /a] "succeeded"
[equal? /a first [a:]] "succeeded"
[equal? equal? /a first [a:] equal? first [a:] /a] "succeeded"
[equal? first [a:] first [a:]] "succeeded"
[equal? true true] "succeeded"
[equal? false false] "succeeded"
[not equal? true false] "succeeded"
[not equal? false true] "succeeded"
[equal? a-value: make object! [a: 1] a-value] "succeeded"
[equal? make object! [a: 1] make object! [a: 1]] "succeeded"
[not equal? make object! [a: 1] make object! [a: 2]] "succeeded"
[not equal? make object! [a: 1] make object! [b: 1]] "succeeded"
[not equal? make object! [a: 1] make object! []] "succeeded"
[
	a-value: construct/only [
		a: 1 b: 1.0 c: $1 d: 1%
		e: [a 'a :a a: /a #"a" #{00}]
		f: ["a" #a http://a a@a.com <a>]
		g: :a/b/(c: 'd/e/f)/(b/d: [:f/g h/i])
	]
	b-value: construct/only [
		a: 1 b: 1.0 c: $1 d: 1%
		e: [a 'a :a a: /a #"a" #{00}]
		f: ["a" #a http://a a@a.com <a>]
		g: :a/b/(c: 'd/e/f)/(b/d: [:f/g h/i])
	]
	equal? a-value b-value
] "succeeded"
[
	a-value: construct/only [c: $1]
	b-value: construct/only [c: 100%]
	equal? a-value b-value
] "failed"
[
	a-value: construct/only [
		a: 1 b: 1.0 c: $1 d: 1%
		e: [a 'a :a a: /a #"a" #{00}]
		f: ["a" #a http://a a@a.com <a>]
		g: :a/b/(c: 'd/e/f)/(b/d: [:f/g h/i])
	]
	b-value: construct/only [
		a: 1.0 b: $1 c: 100% d: 0.01
		e: [/a a 'a :a a: #"A" #[binary! #{0000} 2]]
		f: [#a <A> http://A a@A.com "A"]
		g: :a/b/(c: 'd/e/f)/(b/d: [:f/g h/i])
	]
	equal? a-value b-value
] "failed"
[
	a-value: construct/only [
		a: 1 b: 1.0 c: $1 d: 1%
		e: [a 'a :a a: /a #"a" #{00}]
		f: ["a" #a http://a a@a.com <a>]
		g: :a/b/(c: 'd/e/f)/(b/d: [:f/g h/i])
	]
	b-value: construct/only [
		a: 1 b: 1.0 c: $1 d: 1%
		e: [a 'a :a a: /a #"a" #{00}]
		f: ["a" #a http://a a@a.com <a>]
		g: :a/b/(c: 'd/e/f)/(b/d: [:f/g h/i])
	]
	test: :equal?
	equal?
		test a-value b-value
		foreach [w v] a-value [
			unless test :v select b-value w [break/return false]
			true
		]
] "succeeded"
[
	a-value: construct/only [
		a: 1 b: 1.0 c: $1 d: 1%
		e: [a 'a :a a: /a #"a" #{00}]
		f: ["a" #a http://a a@a.com <a>]
		g: :a/b/(c: 'd/e/f)/(b/d: [:f/g h/i])
	]
	b-value: construct/only [
		a: 1.0 b: $1 c: 100% d: 0.01
		e: [/a a 'a :a a: #"A" #[binary! #{0000} 2]]
		f: [#a <A> http://A a@A.com "A"]
		g: :a/b/(c: 'd/e/f)/(b/d: [:f/g h/i])
	]
	test: :equal?
	equal?
		test a-value b-value
		foreach [w v] a-value [
			unless test :v select b-value w [break/return false]
			true
		]
] "succeeded"
[equal? () ()] "succeeded"
[not-equal? () none] "succeeded"
[not-equal? none ()] "succeeded"
[equal? equal? none () equal? () none] "succeeded"
[not (() = none)] "succeeded"
[() != none] "succeeded"
[not none = ()] "succeeded"
[none != ()] "succeeded"
[() = ()] "succeeded"
[not () != ()] "succeeded"
[equal? none = () () = none] "succeeded"
[equal? none = () () = none] "succeeded"
[
	a-value: none
	set/any 'a-value (try [1 / 0])
	equal? a-value a-value
] "succeeded"
[equal? (try [1 / 0]) (try [1 / 0])] "succeeded"
[equal? (make error! "hello") (make error! "hello")] "succeeded"
[not equal? (try [1 / 0]) (make error! "hello")] "succeeded"
[not equal? (make error! "hello") (make error! "there")] "succeeded"
[not equal? (try [1 / 0]) (try [2 / 0])] "failed"
[not equal? (try [1 / 0]) none] "succeeded"
[not equal? none (try [1 / 0])] "succeeded"
[equal? equal? (try [1 / 0]) none equal? none (try [1 / 0])] "succeeded"
[not ((try [1 / 0]) = none)] "succeeded"
[(try [1 / 0]) != none] "succeeded"
[not (none = (try [1 / 0]))] "succeeded"
[none != (try [1 / 0])] "succeeded"
[equal? not ((try [1 / 0]) = none) not (none = (try [1 / 0]))] "succeeded"
[equal? (try [1 / 0]) != none none != (try [1 / 0])] "succeeded"
[equal? p: make port! http:// p] "succeeded"
[not equal? make port! http:// make port! http://] "succeeded"
[
	a: copy quote ()
	insert/only a a
	error? try [do a]
] "succeeded"
[equiv? :abs :abs] "succeeded"
[equiv? :all :all] "succeeded"
[not equiv? :all :any] "succeeded"
[equiv? :+ :+] "succeeded"
[not equiv? :+ :-] "succeeded"
[equiv? a-value: func [][] :a-value] "succeeded"
[not equiv? func [][] func [][]] "succeeded"
[equiv? a-value: closure [][] :a-value] "succeeded"
[not equiv? closure [][] closure [][]] "succeeded"
[equiv? #{00} #{00}] "succeeded"
[not equiv? #{00} #{01}] "succeeded"
[equiv? #{00} #[binary! #{0000} 2]] "succeeded"
[equiv? #{00} #[binary! #{0100} 2]] "succeeded"
[equal? equiv? #{00} #[binary! #{0100} 2] equiv? #[binary! #{0100} 2] #{00}] "succeeded"
[not equiv? #{00} #{0000}] "succeeded"
[equal? equiv? #{00} #{0000} equiv? #{0000} #{00}] "succeeded"
[not equiv? #{} none] "succeeded"
[
	a-value: to email! ""
	equiv? a-value to string! a-value
] "succeeded"
[
	a-value: to email! ""
	equal? equiv? to string! a-value a-value equiv? a-value to string! a-value
] "succeeded"
[
	a-value: %""
	equiv? a-value to string! a-value
] "succeeded"
[
	a-value: %""
	equal? equiv? a-value to string! a-value equiv? to string! a-value a-value
] "succeeded"
[equiv? a-value: #[image! 1x1 #{000000}] a-value] "succeeded"
[equiv? #[image! 1x1 #{000000}] #[image! 1x1 #{000000}]] "succeeded"
[equiv? #[image! 1x1 #{}] #[image! 1x1 #{000000}]] "succeeded"
[not equiv? #{00} #[image! 1x1 #{00}]] "succeeded"
[equal? equiv? #{00} #[image! 1x1 #{00}] equiv? #[image! 1x1 #{00}] #{00}] "succeeded"
[not equiv? #{00} to integer! #{00}] "succeeded"
[equal? equiv? #{00} to integer! #{00} equiv? to integer! #{00} #{00}] "succeeded"
[
	a-value: #a
	not-equiv? a-value to string! a-value
] "succeeded"
[
	a-value: #a
	equal? equiv? a-value to string! a-value equiv? to string! a-value a-value
] "succeeded"
[not equiv? #{} none] "succeeded"
[equal? equiv? #{} none equiv? none #{}] "succeeded"
[
	a-value: ""
	not equiv? a-value to binary! a-value
] "succeeded"
[
	a-value: ""
	equal? equiv? a-value to binary! a-value equiv? to binary! a-value a-value
] "succeeded"
[
	a-value: to tag! ""
	equiv? a-value to string! a-value
] "succeeded"
[
	a-value: to tag! ""
	equal? equiv? a-value to string! a-value equiv? to string! a-value a-value
] "succeeded"
[
	a-value: 0.0.0.0
	not equiv? to binary! a-value a-value
] "succeeded"
[
	a-value: 0.0.0.0
	equal? equiv? to binary! a-value a-value equiv? a-value to binary! a-value
] "succeeded"
[equiv? #[bitset! #{00}] #[bitset! #{00}]] "succeeded"
[not equiv? #[bitset! #{}] #[bitset! #{00}]] "succeeded"
[equiv? [] []] "succeeded"
[
	a-value: []
	equiv? a-value a-value
] "succeeded"
[
	a-value: tail [1]
	clear head a-value
	equiv? a-value a-value
] "succeeded"
[
	a-value: copy []
	insert/only a-value a-value
	equiv? a-value a-value
] "succeeded"
[
	a-value: copy []
	insert/only a-value a-value
	b-value: copy []
	insert/only b-value b-value
	equiv? a-value b-value
] "crashed"
[not equiv? [] none] "succeeded"
[equal? equiv? [] none equiv? none []] "succeeded"
[not equiv? [] first [()]] "succeeded"
[equal? equiv? [] first [()] equiv? first [()] []] "succeeded"
[not equiv? [a b] 'a/b] "succeeded"
[
	a-value: 'a/b
	b-value: [a b]
	equal? equiv? :a-value :b-value equiv? :b-value :a-value
] "succeeded"
[not equal? [a b] first ['a/b]] "succeeded"
[
	a-value: first ['a/b]
	b-value: [a b]
	equal? equiv? :a-value :b-value equiv? :b-value :a-value
] "succeeded"
[not equiv? [a b] first [a/b:]] "succeeded"
[
	a-value: first [a/b:]
	b-value: [a b]
	equal? equiv? :a-value :b-value equiv? :b-value :a-value
] "succeeded"
[not equiv? [a b] first [:a/b]] "succeeded"
[
	a-value: first [:a/b]
	b-value: [a b]
	equal? equiv? :a-value :b-value equiv? :b-value :a-value
] "succeeded"
[equiv? decimal! decimal!] "succeeded"
[not equiv? decimal! integer!] "succeeded"
[equal? equiv? decimal! integer! equiv? integer! decimal!] "succeeded"
[not equiv? number! integer!] "succeeded"
[equal? equiv? number! integer! equiv? integer! number!] "succeeded"
[not equiv? integer! make typeset! [integer!]] "succeeded"
[equal? equiv? integer! make typeset! [integer!] equiv? make typeset! [integer!] integer!] "succeeded"
[equiv? -1 -1] "succeeded"
[equiv? 0 0] "succeeded"
[equiv? 1 1] "succeeded"
[equiv? 0.0 0.0] "succeeded"
[equiv? 0.0 -0.0] "succeeded"
[equiv? 1.0 1.0] "succeeded"
[equiv? -1.0 -1.0] "succeeded"
[equiv? -9223372036854775808 -9223372036854775808] "succeeded"
[equiv? -9223372036854775807 -9223372036854775807] "succeeded"
[equiv? 9223372036854775807 9223372036854775807] "succeeded"
[not equiv? -9223372036854775808 -9223372036854775807] "succeeded"
[not equiv? -9223372036854775808 -1] "succeeded"
[not equiv? -9223372036854775808 0] "succeeded"
[not equiv? -9223372036854775808 1] "succeeded"
[not equiv? -9223372036854775808 9223372036854775806] "succeeded"
[not equiv? -9223372036854775808 9223372036854775807] "succeeded"
[not equiv? -9223372036854775807 -9223372036854775808] "succeeded"
[not equiv? -9223372036854775807 -1] "succeeded"
[not equiv? -9223372036854775807 0] "succeeded"
[not equiv? -9223372036854775807 1] "succeeded"
[not equiv? -9223372036854775807 9223372036854775806] "succeeded"
[not equiv? -9223372036854775807 9223372036854775807] "succeeded"
[not equiv? -1 -9223372036854775808] "succeeded"
[not equiv? -1 -9223372036854775807] "succeeded"
[not equiv? -1 0] "succeeded"
[not equiv? -1 1] "succeeded"
[not equiv? -1 9223372036854775806] "succeeded"
[not equiv? -1 9223372036854775807] "succeeded"
[not equiv? 0 -9223372036854775808] "succeeded"
[not equiv? 0 -9223372036854775807] "succeeded"
[not equiv? 0 -1] "succeeded"
[not equiv? 0 1] "succeeded"
[not equiv? 0 9223372036854775806] "succeeded"
[not equiv? 0 9223372036854775807] "succeeded"
[not equiv? 1 -9223372036854775808] "succeeded"
[not equiv? 1 -9223372036854775807] "succeeded"
[not equiv? 1 -1] "succeeded"
[not equiv? 1 0] "succeeded"
[not equiv? 1 9223372036854775806] "succeeded"
[not equiv? 1 9223372036854775807] "succeeded"
[not equiv? 9223372036854775806 -9223372036854775808] "succeeded"
[not equiv? 9223372036854775806 -9223372036854775807] "succeeded"
[not equiv? 9223372036854775806 -1] "succeeded"
[not equiv? 9223372036854775806 0] "succeeded"
[not equiv? 9223372036854775806 1] "succeeded"
[not equiv? 9223372036854775806 9223372036854775807] "succeeded"
[not equiv? 9223372036854775807 -9223372036854775808] "succeeded"
[not equiv? 9223372036854775807 -9223372036854775807] "succeeded"
[not equiv? 9223372036854775807 -1] "succeeded"
[not equiv? 9223372036854775807 0] "succeeded"
[not equiv? 9223372036854775807 1] "succeeded"
[not equiv? 9223372036854775807 9223372036854775806] "succeeded"
[not equiv? to decimal! #{3FD3333333333333} to decimal! #{3FD3333333333334}] "failed"
[
	equal? equiv? to decimal! #{3FD3333333333333} to decimal! #{3FD3333333333334}
		equiv? to decimal! #{3FD3333333333334} to decimal! #{3FD3333333333333}
] "succeeded"
[not equiv? to decimal! #{3FB9999999999999} to decimal! #{3FB999999999999A}] "failed"
[
	equal? equiv? to decimal! #{3FB9999999999999} to decimal! #{3FB999999999999A}
		equiv? to decimal! #{3FB999999999999A} to decimal! #{3FB9999999999999}
] "succeeded"
[equiv? 0 0.0] "succeeded"
[equiv? 0 $0] "succeeded"
[equiv? 0 0%] "succeeded"
[equiv? 0.0 $0] "succeeded"
[equiv? 0.0 0%] "succeeded"
[equiv? $0 0%] "succeeded"
[equal? equiv? 1 1.0 equiv? 1.0 1] "succeeded"
[equal? equiv? 1 $1 equiv? $1 1] "succeeded"
[equal? equiv? 1 100% equiv? 100% 1] "succeeded"
[equal? equiv? 1.0 $1 equiv? $1 1.0] "succeeded"
[equal? equiv? 1.0 100% equiv? 100% 1.0] "succeeded"
[equal? equiv? $1 100% equiv? 100% $1] "succeeded"
[equiv? 10% + 10% + 10% 30%] "succeeded"
[equal? equiv? 10% + 10% + 10% 30% equiv? 30% 10% + 10% + 10%] "succeeded"
[not equiv? 2-Jul-2009 2-Jul-2009/22:20] "succeeded"
[equal? equiv? 2-Jul-2009 2-Jul-2009/22:20 equiv? 2-Jul-2009/22:20 2-Jul-2009] "succeeded"
[equiv? 2-Jul-2009 2-Jul-2009/00:00:00+00:00] "succeeded"
[equal? equiv? 2-Jul-2009 2-Jul-2009/00:00 equiv? 2-Jul-2009/00:00 2-Jul-2009] "succeeded"
[equiv? 2-Jul-2009/22:20 2-Jul-2009/20:20-2:00] "succeeded"
[equiv? 00:00 00:00] "succeeded"
[equal? equiv? #"a" 97 equiv? 97 #"a"] "succeeded"
[equal? equiv? #"a" 97.0 equiv? 97.0 #"a"] "succeeded"
[equiv? #"a" #"A"] "succeeded"
[equiv? "a" "A"] "succeeded"
[equiv? 'a 'a] "succeeded"
[equiv? 'a 'A] "succeeded"
[equal? equiv? 'a 'A equiv? 'A 'a] "succeeded"
[not equiv? 'a use [a] ['a]] "succeeded"
[equal? equiv? 'a use [a] ['a] equiv? use [a] ['a] 'a] "succeeded"
[equiv? 'a first [:a]] "succeeded"
[equal? equiv? 'a first [:a] equiv? first [:a] 'a] "succeeded"
[equiv? 'a first ['a]] "succeeded"
[equal? equiv? 'a first ['a] equiv? first ['a] 'a] "succeeded"
[equiv? 'a /a] "succeeded"
[equal? equiv? 'a /a equiv? /a 'a] "succeeded"
[equiv? 'a first [a:]] "succeeded"
[equal? equiv? 'a first [a:] equiv? first [a:] 'a] "succeeded"
[equiv? first [:a] first [:a]] "succeeded"
[equiv? first [:a] first ['a]] "succeeded"
[equal? equiv? first [:a] first ['a] equiv? first ['a] first [:a]] "succeeded"
[equiv? first [:a] /a] "succeeded"
[equal? equiv? first [:a] /a equiv? /a first [:a]] "succeeded"
[equiv? first [:a] first [a:]] "succeeded"
[equal? equiv? first [:a] first [a:] equiv? first [a:] first [:a]] "succeeded"
[equiv? first ['a] first ['a]] "succeeded"
[equiv? first ['a] /a] "succeeded"
[equal? equiv? first ['a] /a equiv? /a first ['a]] "succeeded"
[equiv? first ['a] first [a:]] "succeeded"
[equal? equiv? first ['a] first [a:] equiv? first [a:] first ['a]] "succeeded"
[equiv? /a /a] "succeeded"
[equiv? /a first [a:]] "succeeded"
[equal? equiv? /a first [a:] equiv? first [a:] /a] "succeeded"
[equiv? first [a:] first [a:]] "succeeded"
[equiv? true true] "succeeded"
[equiv? false false] "succeeded"
[not equiv? true false] "succeeded"
[not equiv? false true] "succeeded"
[
	p: make port! http://
	any [
		error? try [equiv? p p]
		equiv? p p
	]
] "succeeded"
[same? :abs :abs] "succeeded"
[same? :all :all] "succeeded"
[same? :+ :+] "succeeded"
[
	a-value: func [] []
	same? :a-value :a-value
] "succeeded"
[not same? func [] [] func [] []] "succeeded"
[
	a-value: closure [] []
	same? :a-value :a-value
] "succeeded"
[not same? closure [] [] closure [] []] "succeeded"
[same? :all :all] "succeeded"
[same? :+ :+] "succeeded"
[
	a-value: func [] []
	same? :a-value :a-value
] "succeeded"
[not same? func [] [] func [] []] "succeeded"
[not same? #{00} #{00}] "succeeded"
[not same? #{00} #[bitset! #{00}]] "succeeded"
[equal? same? #[bitset! #{00}] #{00} same? #{00} #[bitset! #{00}]] "succeeded"
[
	a-value: to email! ""
	not same? a-value to string! a-value
] "succeeded"
[
	a-value: to email! ""
	equal? same? to string! a-value a-value same? a-value to string! a-value
] "succeeded"
[
	a-value: %""
	not same? a-value to string! a-value
] "succeeded"
[
	a-value: %""
	equal? same? a-value to string! a-value same? to string! a-value a-value
] "succeeded"
[	not same? #{00} #[image! 1x1 #{00}]] "succeeded"
[equal? same? #{00} #[image! 1x1 #{00}] same? #[image! 1x1 #{00}] #{00}] "succeeded"
[not same? #{00} to integer! #{00}] "succeeded"
[equal? same? #{00} to integer! #{00} same? to integer! #{00} #{00}] "succeeded"
[
	a-value: #a
	not same? a-value to string! a-value
] "succeeded"
[
	a-value: #a
	equal? same? a-value to string! a-value same? to string! a-value a-value
] "succeeded"
[not same? #{} none] "succeeded"
[equal? same? #{} none same? none #{}] "succeeded"
[
	a-value: ""
	not same? a-value to binary! a-value
] "succeeded"
[
	a-value: ""
	equal? same? a-value to binary! a-value same? to binary! a-value a-value
] "succeeded"
[
	a-value: to tag! ""
	not same? a-value to string! a-value
] "succeeded"
[
	a-value: to tag! ""
	equal? same? a-value to string! a-value same? to string! a-value a-value
] "succeeded"
[
	a-value: 0.0.0.0
	not same? to binary! a-value a-value
] "succeeded"
[
	a-value: 0.0.0.0
	equal? same? to binary! a-value a-value same? a-value to binary! a-value
] "succeeded"
[not same? #[bitset! #{00}] #[bitset! #{00}]] "succeeded"
[not same? #[bitset! #{}] #[bitset! #{00}]] "succeeded"
[not same? [] []] "succeeded"
[
	a-value: []
	same? a-value a-value
] "succeeded"
[
	a-value: tail [1]
	clear head a-value
	same? a-value a-value
] "succeeded"
[
	a-value: copy []
	insert/only a-value a-value
	same? a-value a-value
] "succeeded"
[
	a-value: copy []
	insert/only a-value a-value
	b-value: copy []
	insert/only b-value b-value
	not same? a-value b-value
] "succeeded"
[
	a-value: first ['a/b]
	parse :a-value [b-value:]
	same? :a-value :b-value
] "succeeded"
[
	a-value: first ['a/b]
	parse :a-value [b-value:]
	equal? same? :a-value :b-value same? :b-value :a-value
] "succeeded"
[not same? [] none] "succeeded"
[equal? same? [] none same? none []] "succeeded"
[
	a-value: first [()]
	parse a-value [b-value:]
	same? a-value b-value
] "succeeded"
[
	a-value: first [()]
	parse a-value [b-value:]
	equal? same? a-value b-value same? b-value a-value
] "succeeded"
[
	a-value: 'a/b
	parse a-value [b-value:]
	same? :a-value :b-value
] "succeeded"
[
	a-value: 'a/b
	parse a-value [b-value:]
	equal? same? :a-value :b-value same? :b-value :a-value
] "succeeded"
[
	a-value: first [a/b:]
	parse :a-value [b-value:]
	same? :a-value :b-value
] "succeeded"
[
	a-value: first [a/b:]
	parse :a-value [b-value:]
	equal? same? :a-value :b-value same? :b-value :a-value
] "succeeded"
[not same? number! integer!] "succeeded"
[equal? same? number! integer! same? integer! number!] "succeeded"
[same? -1 -1] "succeeded"
[same? 0 0] "succeeded"
[same? 1 1] "succeeded"
[same? 0.0 0.0] "succeeded"
[not same? 0.0 -0.0] "succeeded"
[same? 1.0 1.0] "succeeded"
[same? -1.0 -1.0] "succeeded"
[same? -9223372036854775808 -9223372036854775808] "succeeded"
[same? -9223372036854775807 -9223372036854775807] "succeeded"
[same? 9223372036854775807 9223372036854775807] "succeeded"
[not same? -9223372036854775808 -9223372036854775807] "succeeded"
[not same? -9223372036854775808 -1] "succeeded"
[not same? -9223372036854775808 0] "succeeded"
[not same? -9223372036854775808 1] "succeeded"
[not same? -9223372036854775808 9223372036854775806] "succeeded"
[not same? -9223372036854775808 9223372036854775807] "succeeded"
[not same? -9223372036854775807 -9223372036854775808] "succeeded"
[not same? -9223372036854775807 -1] "succeeded"
[not same? -9223372036854775807 0] "succeeded"
[not same? -9223372036854775807 1] "succeeded"
[not same? -9223372036854775807 9223372036854775806] "succeeded"
[not same? -9223372036854775807 9223372036854775807] "succeeded"
[not same? -1 -9223372036854775808] "succeeded"
[not same? -1 -9223372036854775807] "succeeded"
[not same? -1 0] "succeeded"
[not same? -1 1] "succeeded"
[not same? -1 9223372036854775806] "succeeded"
[not same? -1 9223372036854775807] "succeeded"
[not same? 0 -9223372036854775808] "succeeded"
[not same? 0 -9223372036854775807] "succeeded"
[not same? 0 -1] "succeeded"
[not same? 0 1] "succeeded"
[not same? 0 9223372036854775806] "succeeded"
[not same? 0 9223372036854775807] "succeeded"
[not same? 1 -9223372036854775808] "succeeded"
[not same? 1 -9223372036854775807] "succeeded"
[not same? 1 -1] "succeeded"
[not same? 1 0] "succeeded"
[not same? 1 9223372036854775806] "succeeded"
[not same? 1 9223372036854775807] "succeeded"
[not same? 9223372036854775806 -9223372036854775808] "succeeded"
[not same? 9223372036854775806 -9223372036854775807] "succeeded"
[not same? 9223372036854775806 -1] "succeeded"
[not same? 9223372036854775806 0] "succeeded"
[not same? 9223372036854775806 1] "succeeded"
[not same? 9223372036854775806 9223372036854775807] "succeeded"
[not same? 9223372036854775807 -9223372036854775808] "succeeded"
[not same? 9223372036854775807 -9223372036854775807] "succeeded"
[not same? 9223372036854775807 -1] "succeeded"
[not same? 9223372036854775807 0] "succeeded"
[not same? 9223372036854775807 1] "succeeded"
[not same? 9223372036854775807 9223372036854775806] "succeeded"
[not same? to decimal! #{3FD3333333333333} to decimal! #{3FD3333333333334}] "succeeded"
[
	equal? same? to decimal! #{3FD3333333333333} to decimal! #{3FD3333333333334}
		same? to decimal! #{3FD3333333333334} to decimal! #{3FD3333333333333}
] "succeeded"
[not same? to decimal! #{3FB9999999999999} to decimal! #{3FB999999999999A}] "succeeded"
[
	equal? same? to decimal! #{3FB9999999999999} to decimal! #{3FB999999999999A}
		same? to decimal! #{3FB999999999999A} to decimal! #{3FB9999999999999}
] "succeeded"
[not same? 0 0.0] "succeeded"
[not same? 0 $0] "succeeded"
[not same? 0 0%] "succeeded"
[not same? 0.0 $0] "succeeded"
[not same? 0.0 0%] "succeeded"
[not same? $0 0%] "succeeded"
[equal? same? 1 1.0 same? 1.0 1] "succeeded"
[equal? same? 1 $1 same? $1 1] "succeeded"
[equal? same? 1 100% same? 100% 1] "succeeded"
[equal? same? 1.0 $1 same? $1 1.0] "succeeded"
[equal? same? 1.0 100% same? 100% 1.0] "succeeded"
[equal? same? $1 100% same? 100% $1] "succeeded"
[not same? 10% + 10% + 10% 30%] "succeeded"
[equal? same? 10% + 10% + 10% 30% same? 30% 10% + 10% + 10%] "succeeded"
[not same? 2-Jul-2009 2-Jul-2009/22:20] "succeeded"
[equal? same? 2-Jul-2009 2-Jul-2009/22:20 same? 2-Jul-2009/22:20 2-Jul-2009] "succeeded"
[not same? 2-Jul-2009 2-Jul-2009/00:00:00+00:00] "succeeded"
[equal? not same? 2-Jul-2009 2-Jul-2009/00:00 not same? 2-Jul-2009/00:00 2-Jul-2009] "succeeded"
[not same? 2-Jul-2009/22:20 2-Jul-2009/20:20-2:00] "succeeded"
[same? 00:00 00:00] "succeeded"
[same? 00:00 00:00:00] "succeeded"
[not same? 22:20 20:20] "succeeded"
[equal? same? #"a" 97 same? 97 #"a"] "succeeded"
[equal? same? #"a" 97.0 same? 97.0 #"a"] "succeeded"
[not same? #"a" #"A"] "succeeded"
[not same? "a" "A"] "succeeded"
[same? 'a 'a] "succeeded"
[not same? 'a 'A] "succeeded"
[equal? same? 'a 'A same? 'A 'a] "succeeded"
[not same? 'a use [a] ['a]] "succeeded"
[equal? same? 'a use [a] ['a] same? use [a] ['a] 'a] "succeeded"
[not same? 'a first [:a]] "succeeded"
[equal? same? 'a first [:a] same? first [:a] 'a] "succeeded"
[not same? 'a first ['a]] "succeeded"
[equal? same? 'a first ['a] same? first ['a] 'a] "succeeded"
[not same? 'a /a] "succeeded"
[equal? same? 'a /a same? /a 'a] "succeeded"
[not same? 'a first [a:]] "succeeded"
[equal? same? 'a first [a:] same? first [a:] 'a] "succeeded"
[same? first [:a] first [:a]] "succeeded"
[not same? first [:a] first ['a]] "succeeded"
[equal? same? first [:a] first ['a] same? first ['a] first [:a]] "succeeded"
[not same? first [:a] /a] "succeeded"
[equal? same? first [:a] /a same? /a first [:a]] "succeeded"
[not same? first [:a] first [a:]] "succeeded"
[equal? same? first [:a] first [a:] same? first [a:] first [:a]] "succeeded"
[same? first ['a] first ['a]] "succeeded"
[not same? first ['a] /a] "succeeded"
[equal? same? first ['a] /a same? /a first ['a]] "succeeded"
[not same? first ['a] first [a:]] "succeeded"
[equal? same? first ['a] first [a:] same? first [a:] first ['a]] "succeeded"
[same? /a /a] "succeeded"
[not same? /a first [a:]] "succeeded"
[equal? same? /a first [a:] same? first [a:] /a] "succeeded"
[same? first [a:] first [a:]] "succeeded"
[same? true true] "succeeded"
[same? false false] "succeeded"
[not same? true false] "succeeded"
[not same? false true] "succeeded"
[
	p: make port! http://
	any [
		error? try [same? p p]
		same? p p
	]
] "succeeded"
[strict-equal? :abs :abs] "succeeded"
[strict-equal? :all :all] "succeeded"
[strict-equal? :+ :+] "succeeded"
[
	a-value: func [] []
	strict-equal? :a-value :a-value
] "succeeded"
[not strict-equal? func [] [] func [] []] "succeeded"
[
	a-value: closure [] []
	strict-equal? :a-value :a-value
] "succeeded"
[not strict-equal? closure [] [] closure [] []] "succeeded"
[strict-equal? #{00} #{00}] "succeeded"
[not strict-equal? #{00} #[bitset! #{00}]] "succeeded"
[equal? strict-equal? #[bitset! #{00}] #{00} strict-equal? #{00} #[bitset! #{00}]] "succeeded"
[
	a-value: to email! ""
	not strict-equal? a-value to string! a-value
] "succeeded"
[
	a-value: to email! ""
	equal? strict-equal? to string! a-value a-value strict-equal? a-value to string! a-value
] "succeeded"
[
	a-value: %""
	not strict-equal? a-value to string! a-value
] "succeeded"
[
	a-value: %""
	equal? strict-equal? a-value to string! a-value strict-equal? to string! a-value a-value
] "succeeded"
[	not strict-equal? #{00} #[image! 1x1 #{00}]] "succeeded"
[	equal? strict-equal? #{00} #[image! 1x1 #{00}] strict-equal? #[image! 1x1 #{00}] #{00}] "succeeded"
[	not strict-equal? #{00} to integer! #{00}] "succeeded"
[	equal? strict-equal? #{00} to integer! #{00} strict-equal? to integer! #{00} #{00}] "succeeded"
[
	a-value: #a
	not strict-equal? a-value to string! a-value
] "succeeded"
[
	a-value: #a
	equal? strict-equal? a-value to string! a-value strict-equal? to string! a-value a-value
] "succeeded"
[not strict-equal? #{} none] "succeeded"
[	equal? strict-equal? #{} none strict-equal? none #{}] "succeeded"
[
	a-value: ""
	not strict-equal? a-value to binary! a-value
] "succeeded"
[
	a-value: ""
	equal? strict-equal? a-value to binary! a-value strict-equal? to binary! a-value a-value
] "succeeded"
[
	a-value: to tag! ""
	not strict-equal? a-value to string! a-value
] "succeeded"
[
	a-value: to tag! ""
	equal? strict-equal? a-value to string! a-value strict-equal? to string! a-value a-value
] "succeeded"
[
	a-value: 0.0.0.0
	not strict-equal? to binary! a-value a-value
] "succeeded"
[
	a-value: 0.0.0.0
	equal? strict-equal? to binary! a-value a-value strict-equal? a-value to binary! a-value
] "succeeded"
[strict-equal? #[bitset! #{00}] #[bitset! #{00}]] "succeeded"
[not strict-equal? #[bitset! #{}] #[bitset! #{00}]] "succeeded"
[strict-equal? [] []] "succeeded"
[
	a-value: []
	strict-equal? a-value a-value
] "succeeded"
[
	a-value: tail [1]
	clear head a-value
	strict-equal? a-value a-value
] "succeeded"
[
	a-value: copy []
	insert/only a-value a-value
	strict-equal? a-value a-value
] "succeeded"
[
	a-value: copy []
	insert/only a-value a-value
	b-value: copy []
	insert/only b-value b-value
	strict-equal? a-value b-value
] "crashed"
[
	a-value: first ['a/b]
	parse :a-value [b-value:]
	strict-equal? :a-value :b-value
] "succeeded"
[
	a-value: first ['a/b]
	parse :a-value [b-value:]
	equal? strict-equal? :a-value :b-value strict-equal? :b-value :a-value
] "succeeded"
[not strict-equal? [] none] "succeeded"
[equal? strict-equal? [] none strict-equal? none []] "succeeded"
[
	a-value: first [()]
	parse a-value [b-value:]
	strict-equal? a-value b-value
] "succeeded"
[
	a-value: first [()]
	parse a-value [b-value:]
	equal? strict-equal? a-value b-value strict-equal? b-value a-value
] "succeeded"
[
	a-value: 'a/b
	parse a-value [b-value:]
	strict-equal? :a-value :b-value
] "succeeded"
[
	a-value: 'a/b
	parse a-value [b-value:]
	equal? strict-equal? :a-value :b-value strict-equal? :b-value :a-value
] "succeeded"
[
	a-value: first [a/b:]
	parse :a-value [b-value:]
	strict-equal? :a-value :b-value
] "succeeded"
[
	a-value: first [a/b:]
	parse :a-value [b-value:]
	equal? strict-equal? :a-value :b-value strict-equal? :b-value :a-value
] "succeeded"
[not strict-equal? number! integer!] "succeeded"
[equal? strict-equal? number! integer! strict-equal? integer! number!] "succeeded"
[strict-equal? -1 -1] "succeeded"
[strict-equal? 0 0] "succeeded"
[strict-equal? 1 1] "succeeded"
[strict-equal? 0.0 0.0] "succeeded"
[strict-equal? 0.0 -0.0] "succeeded"
[strict-equal? 1.0 1.0] "succeeded"
[strict-equal? -1.0 -1.0] "succeeded"
[strict-equal? -9223372036854775808 -9223372036854775808] "succeeded"
[strict-equal? -9223372036854775807 -9223372036854775807] "succeeded"
[strict-equal? 9223372036854775807 9223372036854775807] "succeeded"
[not strict-equal? -9223372036854775808 -9223372036854775807] "succeeded"
[not strict-equal? -9223372036854775808 -1] "succeeded"
[not strict-equal? -9223372036854775808 0] "succeeded"
[not strict-equal? -9223372036854775808 1] "succeeded"
[not strict-equal? -9223372036854775808 9223372036854775806] "succeeded"
[not strict-equal? -9223372036854775808 9223372036854775807] "succeeded"
[not strict-equal? -9223372036854775807 -9223372036854775808] "succeeded"
[not strict-equal? -9223372036854775807 -1] "succeeded"
[not strict-equal? -9223372036854775807 0] "succeeded"
[not strict-equal? -9223372036854775807 1] "succeeded"
[not strict-equal? -9223372036854775807 9223372036854775806] "succeeded"
[not strict-equal? -9223372036854775807 9223372036854775807] "succeeded"
[not strict-equal? -1 -9223372036854775808] "succeeded"
[not strict-equal? -1 -9223372036854775807] "succeeded"
[not strict-equal? -1 0] "succeeded"
[not strict-equal? -1 1] "succeeded"
[not strict-equal? -1 9223372036854775806] "succeeded"
[not strict-equal? -1 9223372036854775807] "succeeded"
[not strict-equal? 0 -9223372036854775808] "succeeded"
[not strict-equal? 0 -9223372036854775807] "succeeded"
[not strict-equal? 0 -1] "succeeded"
[not strict-equal? 0 1] "succeeded"
[not strict-equal? 0 9223372036854775806] "succeeded"
[not strict-equal? 0 9223372036854775807] "succeeded"
[not strict-equal? 1 -9223372036854775808] "succeeded"
[not strict-equal? 1 -9223372036854775807] "succeeded"
[not strict-equal? 1 -1] "succeeded"
[not strict-equal? 1 0] "succeeded"
[not strict-equal? 1 9223372036854775806] "succeeded"
[not strict-equal? 1 9223372036854775807] "succeeded"
[not strict-equal? 9223372036854775806 -9223372036854775808] "succeeded"
[not strict-equal? 9223372036854775806 -9223372036854775807] "succeeded"
[not strict-equal? 9223372036854775806 -1] "succeeded"
[not strict-equal? 9223372036854775806 0] "succeeded"
[not strict-equal? 9223372036854775806 1] "succeeded"
[not strict-equal? 9223372036854775806 9223372036854775807] "succeeded"
[not strict-equal? 9223372036854775807 -9223372036854775808] "succeeded"
[not strict-equal? 9223372036854775807 -9223372036854775807] "succeeded"
[not strict-equal? 9223372036854775807 -1] "succeeded"
[not strict-equal? 9223372036854775807 0] "succeeded"
[not strict-equal? 9223372036854775807 1] "succeeded"
[not strict-equal? 9223372036854775807 9223372036854775806] "succeeded"
[not strict-equal? to decimal! #{3FD3333333333333} to decimal! #{3FD3333333333334}] "succeeded"
[
	equal? strict-equal? to decimal! #{3FD3333333333333} to decimal! #{3FD3333333333334}
		strict-equal? to decimal! #{3FD3333333333334} to decimal! #{3FD3333333333333}
] "succeeded"
[not strict-equal? to decimal! #{3FB9999999999999} to decimal! #{3FB999999999999A}] "succeeded"
[
	equal? strict-equal? to decimal! #{3FB9999999999999} to decimal! #{3FB999999999999A}
		strict-equal? to decimal! #{3FB999999999999A} to decimal! #{3FB9999999999999}
] "succeeded"
[not strict-equal? 0 0.0] "succeeded"
[not strict-equal? 0 $0] "succeeded"
[not strict-equal? 0 0%] "succeeded"
[not strict-equal? 0.0 $0] "succeeded"
[not strict-equal? 0.0 0%] "succeeded"
[not strict-equal? $0 0%] "succeeded"
[equal? strict-equal? 1 1.0 strict-equal? 1.0 1] "succeeded"
[equal? strict-equal? 1 $1 strict-equal? $1 1] "succeeded"
[equal? strict-equal? 1 100% strict-equal? 100% 1] "succeeded"
[equal? strict-equal? 1.0 $1 strict-equal? $1 1.0] "succeeded"
[equal? strict-equal? 1.0 100% strict-equal? 100% 1.0] "succeeded"
[equal? strict-equal? $1 100% strict-equal? 100% $1] "succeeded"
[not strict-equal? 10% + 10% + 10% 30%] "succeeded"
[equal? strict-equal? 10% + 10% + 10% 30% strict-equal? 30% 10% + 10% + 10%] "succeeded"
[not strict-equal? 2-Jul-2009 2-Jul-2009/22:20] "succeeded"
[equal? strict-equal? 2-Jul-2009 2-Jul-2009/22:20 strict-equal? 2-Jul-2009/22:20 2-Jul-2009] "succeeded"
[not strict-equal? 2-Jul-2009 2-Jul-2009/00:00:00+00:00] "succeeded"
[equal? strict-equal? 2-Jul-2009 2-Jul-2009/00:00 strict-equal? 2-Jul-2009/00:00 2-Jul-2009] "succeeded"
[not strict-equal? 2-Jul-2009/22:20 2-Jul-2009/20:20-2:00] "succeeded"
[strict-equal? 00:00 00:00] "succeeded"
[equal? strict-equal? #"a" 97 strict-equal? 97 #"a"] "succeeded"
[equal? strict-equal? #"a" 97.0 strict-equal? 97.0 #"a"] "succeeded"
[not strict-equal? #"a" #"A"] "succeeded"
[not strict-equal? "a" "A"] "succeeded"
[strict-equal? 'a 'a] "succeeded"
[not strict-equal? 'a 'A] "succeeded"
[equal? strict-equal? 'a 'A strict-equal? 'A 'a] "succeeded"
[not strict-equal? 'a use [a] ['a]] "succeeded"
[equal? strict-equal? 'a use [a] ['a] strict-equal? use [a] ['a] 'a] "succeeded"
[not strict-equal? 'a first [:a]] "succeeded"
[equal? strict-equal? 'a first [:a] strict-equal? first [:a] 'a] "succeeded"
[not strict-equal? 'a first ['a]] "succeeded"
[equal? strict-equal? 'a first ['a] strict-equal? first ['a] 'a] "succeeded"
[not strict-equal? 'a /a] "succeeded"
[equal? strict-equal? 'a /a strict-equal? /a 'a] "succeeded"
[not strict-equal? 'a first [a:]] "succeeded"
[equal? strict-equal? 'a first [a:] strict-equal? first [a:] 'a] "succeeded"
[strict-equal? first [:a] first [:a]] "succeeded"
[not strict-equal? first [:a] first ['a]] "succeeded"
[equal? strict-equal? first [:a] first ['a] strict-equal? first ['a] first [:a]] "succeeded"
[not strict-equal? first [:a] /a] "succeeded"
[equal? strict-equal? first [:a] /a strict-equal? /a first [:a]] "succeeded"
[not strict-equal? first [:a] first [a:]] "succeeded"
[equal? strict-equal? first [:a] first [a:] strict-equal? first [a:] first [:a]] "succeeded"
[strict-equal? first ['a] first ['a]] "succeeded"
[not strict-equal? first ['a] /a] "succeeded"
[equal? strict-equal? first ['a] /a strict-equal? /a first ['a]] "succeeded"
[not strict-equal? first ['a] first [a:]] "succeeded"
[equal? strict-equal? first ['a] first [a:] strict-equal? first [a:] first ['a]] "succeeded"
[strict-equal? /a /a] "succeeded"
[not strict-equal? /a first [a:]] "succeeded"
[equal? strict-equal? /a first [a:] strict-equal? first [a:] /a] "succeeded"
[strict-equal? first [a:] first [a:]] "succeeded"
[strict-equal? true true] "succeeded"
[strict-equal? false false] "succeeded"
[not strict-equal? true false] "succeeded"
[not strict-equal? false true] "succeeded"
[
	p: make port! http://
	any [
		error? try [strict-equal? p p]
		strict-equal? p p
	]
] "succeeded"
[strict-not-equal? 0 1] "succeeded"
[3 = first maximum-of [1 2 3]] "succeeded"
[native? :as-pair] "succeeded"
[:abs = :absolute] "succeeded"
[0 = abs 0] "succeeded"
[1 = abs 1] "succeeded"
[1 = abs -1] "succeeded"
[2147483647 = abs 2147483647] "succeeded"
[2147483647 = abs -2147483647] "succeeded"
[0.0 = abs 0.0] "succeeded"
[zero? 1.0 - abs 1.0] "succeeded"
[zero? 1.0 - abs -1.0] "succeeded"
[9223372036854775807 = abs 9223372036854775807] "succeeded"
[9223372036854775807 = abs -9223372036854775807] "succeeded"
[0x0 = abs 0x0] "succeeded"
[0x1 = abs 0x1] "succeeded"
[1x0 = abs 1x0] "succeeded"
[1x1 = abs 1x1] "succeeded"
[0x1 = abs 0x-1] "succeeded"
[1x0 = abs -1x0] "succeeded"
[1x1 = abs -1x-1] "succeeded"
[2147483647x2147483647 = abs 2147483647x2147483647] "succeeded"
[2147483647x2147483647 = abs 2147483647x-2147483647] "succeeded"
[2147483647x2147483647 = abs -2147483647x2147483647] "succeeded"
[2147483647x2147483647 = abs -2147483647x-2147483647] "succeeded"
[
	a: try [abs to integer! #{8000000000000000}]
	any [error? a not negative? a]
] "succeeded"
[3 = add 1 2] "succeeded"
[error? try [add -9223372036854775808 -9223372036854775808]] "succeeded"
[error? try [add -9223372036854775808 -9223372036854775807]] "succeeded"
[error? try [add -9223372036854775808 -2147483648]] "succeeded"
[error? try [add -9223372036854775808 -1]] "succeeded"
[-9223372036854775808 = add -9223372036854775808 0] "succeeded"
[-9223372036854775807 = add -9223372036854775808 1] "succeeded"
[-2 = add -9223372036854775808 9223372036854775806] "succeeded"
[-1 = add -9223372036854775808 9223372036854775807] "succeeded"
[error? try [add -9223372036854775807 -9223372036854775808]] "succeeded"
[error? try [add -9223372036854775807 -9223372036854775807]] "succeeded"
[-9223372036854775808 = add -9223372036854775807 -1] "succeeded"
[-9223372036854775807 = add -9223372036854775807 0] "succeeded"
[-9223372036854775806 = add -9223372036854775807 1] "succeeded"
[-1 = add -9223372036854775807 9223372036854775806] "succeeded"
[0 = add -9223372036854775807 9223372036854775807] "succeeded"
[-4294967296 = add -2147483648 -2147483648] "succeeded"
[-2147483649 = add -2147483648 -1] "succeeded"
[-2147483648 = add -2147483648 0] "succeeded"
[-2147483647 = add -2147483648 1] "succeeded"
[-1 = add -2147483648 2147483647] "succeeded"
[error? try [add -1 -9223372036854775808]] "succeeded"
[-9223372036854775808 = add -1 -9223372036854775807] "succeeded"
[-2 = add -1 -1] "succeeded"
[-1 = add -1 0] "succeeded"
[0 = add -1 1] "succeeded"
[9223372036854775805 = add -1 9223372036854775806] "succeeded"
[9223372036854775806 = add -1 9223372036854775807] "succeeded"
[-9223372036854775808 = add 0 -9223372036854775808] "succeeded"
[-9223372036854775807 = add 0 -9223372036854775807] "succeeded"
[-1 = add 0 -1] "succeeded"
[0 = add 0 0] "succeeded"
[1 = add 0 1] "succeeded"
[9223372036854775806 = add 0 9223372036854775806] "succeeded"
[9223372036854775807 = add 0 9223372036854775807] "succeeded"
[-9223372036854775807 = add 1 -9223372036854775808] "succeeded"
[-9223372036854775806 = add 1 -9223372036854775807] "succeeded"
[0 = add 1 -1] "succeeded"
[1 = add 1 0] "succeeded"
[2 = add 1 1] "succeeded"
[9223372036854775807 = add 1 9223372036854775806] "succeeded"
[error? try [add 1 9223372036854775807]] "succeeded"
[-1 = add 2147483647 -2147483648] "succeeded"
[2147483646 = add 2147483647 -1] "succeeded"
[2147483647 = add 2147483647 0] "succeeded"
[2147483648 = add 2147483647 1] "succeeded"
[4294967294 = add 2147483647 2147483647] "succeeded"
[-2 = add 9223372036854775806 -9223372036854775808] "succeeded"
[-1 = add 9223372036854775806 -9223372036854775807] "succeeded"
[9223372036854775805 = add 9223372036854775806 -1] "succeeded"
[9223372036854775806 = add 9223372036854775806 0] "succeeded"
[9223372036854775807 = add 9223372036854775806 1] "succeeded"
[error? try [add 9223372036854775806 9223372036854775806]] "succeeded"
[error? try [add 9223372036854775806 9223372036854775807]] "succeeded"
[-1 = add 9223372036854775807 -9223372036854775808] "succeeded"
[0 = add 9223372036854775807 -9223372036854775807] "succeeded"
[9223372036854775806 = add 9223372036854775807 -1] "succeeded"
[9223372036854775807 = add 9223372036854775807 0] "succeeded"
[error? try [add 9223372036854775807 1]] "succeeded"
[error? try [add 9223372036854775807 9223372036854775806]] "succeeded"
[error? try [add 9223372036854775807 9223372036854775807]] "succeeded"
[2.1 = add 1.1 1] "succeeded"
[2147483648.0 = add 1.0 2147483647] "succeeded"
[-2147483649.0 = add -1.0 -2147483648] "succeeded"
[2.1 = add 1 1.1] "succeeded"
[2147483648.0 = add 2147483647 1.0] "succeeded"
[-2147483649.0 = add -2147483648 -1.0] "succeeded"
[error? try [add -1.7976931348623157e308 -1.7976931348623157e308]] "succeeded"
[-1.7976931348623157e308 = add -1.7976931348623157e308 -1.0] "succeeded"
[-1.7976931348623157e308 = add -1.7976931348623157e308 -4.94065645841247E-324] "succeeded"
[-1.7976931348623157e308 = add -1.7976931348623157e308 0.0] "succeeded"
[-1.7976931348623157e308 = add -1.7976931348623157e308 4.94065645841247E-324] "succeeded"
[-1.7976931348623157e308 = add -1.7976931348623157e308 1.0] "succeeded"
[0.0 = add -1.7976931348623157e308 1.7976931348623157e308] "succeeded"
[-1.7976931348623157e308 = add -1.0 -1.7976931348623157e308] "succeeded"
[-2.0 = add -1.0 -1.0] "succeeded"
[-1.0 = add -1.0 -4.94065645841247E-324] "succeeded"
[-1.0 = add -1.0 0.0] "succeeded"
[-1.0 = add -1.0 4.94065645841247E-324] "succeeded"
[0.0 = add -1.0 1.0] "succeeded"
[1.7976931348623157e308 = add -1.0 1.7976931348623157e308] "succeeded"
[-1.7976931348623157e308 = add -4.94065645841247E-324 -1.7976931348623157e308] "succeeded"
[-1.0 = add -4.94065645841247E-324 -1.0] "succeeded"
[-9.88131291682493e-324 = add -4.94065645841247E-324 -4.94065645841247E-324] "succeeded"
[-4.94065645841247E-324 = add -4.94065645841247E-324 0.0] "succeeded"
[0.0 = add -4.94065645841247E-324 4.94065645841247E-324] "succeeded"
[1.0 = add -4.94065645841247E-324 1.0] "succeeded"
[1.7976931348623157e308 = add -4.94065645841247E-324 1.7976931348623157e308] "succeeded"
[-1.7976931348623157e308 = add 0.0 -1.7976931348623157e308] "succeeded"
[-1.0 = add 0.0 -1.0] "succeeded"
[-4.94065645841247E-324 = add 0.0 -4.94065645841247E-324] "succeeded"
[0.0 = add 0.0 0.0] "succeeded"
[4.94065645841247E-324 = add 0.0 4.94065645841247E-324] "succeeded"
[1.0 = add 0.0 1.0] "succeeded"
[1.7976931348623157e308 = add 0.0 1.7976931348623157e308] "succeeded"
[-1.7976931348623157e308 = add 4.94065645841247E-324 -1.7976931348623157e308] "succeeded"
[-1.0 = add 4.94065645841247E-324 -1.0] "succeeded"
[0.0 = add 4.94065645841247E-324 -4.94065645841247E-324] "succeeded"
[4.94065645841247E-324 = add 4.94065645841247E-324 0.0] "succeeded"
[9.88131291682493e-324 = add 4.94065645841247E-324 4.94065645841247E-324] "succeeded"
[1.0 = add 4.94065645841247E-324 1.0] "succeeded"
[1.7976931348623157e308 = add 4.94065645841247E-324 1.7976931348623157e308] "succeeded"
[-1.7976931348623157e308 = add 1.0 -1.7976931348623157e308] "succeeded"
[0.0 = add 1.0 -1.0] "succeeded"
[1.0 = add 1.0 4.94065645841247E-324] "succeeded"
[1.0 = add 1.0 0.0] "succeeded"
[1.0 = add 1.0 -4.94065645841247E-324] "succeeded"
[2.0 = add 1.0 1.0] "succeeded"
[1.7976931348623157e308 = add 1.0 1.7976931348623157e308] "succeeded"
[0.0 = add 1.7976931348623157e308 -1.7976931348623157e308] "succeeded"
[1.7976931348623157e308 = add 1.7976931348623157e308 -1.0] "succeeded"
[1.7976931348623157e308 = add 1.7976931348623157e308 -4.94065645841247E-324] "succeeded"
[1.7976931348623157e308 = add 1.7976931348623157e308 0.0] "succeeded"
[1.7976931348623157e308 = add 1.7976931348623157e308 4.94065645841247E-324] "succeeded"
[1.7976931348623157e308 = add 1.7976931348623157e308 1.0] "succeeded"
[error? try [add 1.7976931348623157e308 1.7976931348623157e308]] "succeeded"
[-2147483648x-2147483648 = add -2147483648x-2147483648 0x0] "succeeded"
[-2x-2 = add -1x-1 -1x-1] "succeeded"
[-1x-1 = add -1x-1 0x0] "succeeded"
[0x0 = add -1x-1 1x1] "succeeded"
[-2147483648x-2147483648 = add 0x0 -2147483648x-2147483648] "succeeded"
[-1x-1 = add 0x0 -1x-1] "succeeded"
[0x0 = add 0x0 0x0] "succeeded"
[1x1 = add 0x0 1x1] "succeeded"
[2147483647x2147483647 = add 0x0 2147483647x2147483647] "succeeded"
[0x0 = add 1x1 -1x-1] "succeeded"
[1x1 = add 1x1 0x0] "succeeded"
[2x2 = add 1x1 1x1] "succeeded"
[2147483647x2147483647 = add 2147483647x2147483647 0x0] "succeeded"
[error? try [0x0 + none]] "succeeded"
[error? try [0x0 + ""]] "succeeded"
[#"^(00)" = add #"^(00)" #"^(00)"] "succeeded"
[#"^(01)" = add #"^(00)" #"^(01)"] "succeeded"
[#"^(ff)" = add #"^(00)" #"^(ff)"] "succeeded"
[#"^(01)" = add #"^(01)" #"^(00)"] "succeeded"
[#"^(02)" = add #"^(01)" #"^(01)"] "succeeded"
[#"^(ff)" = add #"^(ff)" #"^(00)"] "succeeded"
[0.0.0 = add 0.0.0 0.0.0] "succeeded"
[0.0.1 = add 0.0.0 0.0.1] "succeeded"
[0.0.255 = add 0.0.0 0.0.255] "succeeded"
[0.0.1 = add 0.0.1 0.0.0] "succeeded"
[0.0.2 = add 0.0.1 0.0.1] "succeeded"
[0.0.255 = add 0.0.1 0.0.255] "succeeded"
[0.0.255 = add 0.0.255 0.0.0] "succeeded"
[0.0.255 = add 0.0.255 0.0.1] "succeeded"
[0.0.255 = add 0.0.255 0.0.255] "succeeded"
[true and true = true] "succeeded"
[true and false = false] "succeeded"
[false and true = false] "succeeded"
[false and false = false] "succeeded"
[1 and 1 = 1] "succeeded"
[1 and 0 = 0] "succeeded"
[0 and 1 = 0] "succeeded"
[0 and 0 = 0] "succeeded"
[1 and 2 = 0] "succeeded"
[2 and 1 = 0] "succeeded"
[2 and 2 = 2] "succeeded"
[#"^(00)" and #"^(00)" = #"^(00)"] "succeeded"
[#"^(01)" and #"^(00)" = #"^(00)"] "succeeded"
[#"^(00)" and #"^(01)" = #"^(00)"] "succeeded"
[#"^(01)" and #"^(01)" = #"^(01)"] "succeeded"
[#"^(01)" and #"^(02)" = #"^(00)"] "succeeded"
[#"^(02)" and #"^(02)" = #"^(02)"] "succeeded"
[0.0.0 and 0.0.0 = 0.0.0] "succeeded"
[1.0.0 and 1.0.0 = 1.0.0] "succeeded"
[2.0.0 and 2.0.0 = 2.0.0] "succeeded"
[255.255.255 and 255.255.255 = 255.255.255] "succeeded"
[#{030000} and #{020000} = #{020000}] "succeeded"
[0 = arccosine 1] "succeeded"
[0 = arccosine/radians 1] "succeeded"
[30 = arccosine (square-root 3) / 2] "succeeded"
[pi / 6 = arccosine/radians (square-root 3) / 2] "succeeded"
[45 = arccosine (square-root 2) / 2] "succeeded"
[pi / 4 = arccosine/radians (square-root 2) / 2] "succeeded"
[60 = arccosine 0.5] "succeeded"
[pi / 3 = arccosine/radians 0.5] "succeeded"
[90 = arccosine 0] "succeeded"
[pi / 2 = arccosine/radians 0] "succeeded"
[180 = arccosine -1] "succeeded"
[pi = arccosine/radians -1] "succeeded"
[150 = arccosine (square-root 3) / -2] "succeeded"
[pi * 5 / 6 = arccosine/radians (square-root 3) / -2] "succeeded"
[135 = arccosine (square-root 2) / -2] "succeeded"
[pi * 3 / 4 = arccosine/radians (square-root 2) / -2] "succeeded"
[120 = arccosine -0.5] "succeeded"
[pi * 2 / 3 = arccosine/radians -0.5] "succeeded"
[error? try [arccosine 1.1]] "succeeded"
[error? try [arccosine -1.1]] "succeeded"
[0 = arcsine 0] "succeeded"
[0 = arcsine/radians 0] "succeeded"
[30 = arcsine 0.5] "succeeded"
[pi / 6 = arcsine/radians 0.5] "succeeded"
[45 = arcsine (square-root 2) / 2] "succeeded"
[pi / 4 = arcsine/radians (square-root 2) / 2] "succeeded"
[60 = arcsine (square-root 3) / 2] "succeeded"
[pi / 3 = arcsine/radians (square-root 3) / 2] "succeeded"
[90 = arcsine 1] "succeeded"
[pi / 2 = arcsine/radians 1] "succeeded"
[-30 = arcsine -0.5] "succeeded"
[pi / -6 = arcsine/radians -0.5] "succeeded"
[-45 = arcsine (square-root 2) / -2] "succeeded"
[pi / -4 = arcsine/radians (square-root 2) / -2] "succeeded"
[-60 = arcsine (square-root 3) / -2] "succeeded"
[pi / -3 = arcsine/radians (square-root 3) / -2] "succeeded"
[-90 = arcsine -1] "succeeded"
[pi / -2 = arcsine/radians -1] "succeeded"
[1e-12 / (arcsine 1e-12) = (pi / 180)] "succeeded"
[1e-9 / (arcsine/radians 1e-9) = 1.0] "succeeded"
[error? try [arcsine 1.1]] "succeeded"
[error? try [arcsine -1.1]] "succeeded"
[-90 = arctangent -1e16] "succeeded"
[pi / -2 = arctangent/radians -1e16] "succeeded"
[-60 = arctangent negate square-root 3] "succeeded"
[pi / -3 = arctangent/radians negate square-root 3] "succeeded"
[-45 = arctangent -1] "succeeded"
[pi / -4 = arctangent/radians -1] "succeeded"
[-30 = arctangent (square-root 3) / -3] "succeeded"
[pi / -6 = arctangent/radians (square-root 3) / -3] "succeeded"
[0 = arctangent 0] "succeeded"
[0 = arctangent/radians 0] "succeeded"
[30 = arctangent (square-root 3) / 3] "succeeded"
[pi / 6 = arctangent/radians (square-root 3) / 3] "succeeded"
[45 = arctangent 1] "succeeded"
[pi / 4 = arctangent/radians 1] "succeeded"
[60 = arctangent square-root 3] "succeeded"
[pi / 3 = arctangent/radians square-root 3] "succeeded"
[90 = arctangent 1e16] "succeeded"
[pi / 2 = arctangent/radians 1e16] "succeeded"
[false = complement true] "succeeded"
[true = complement false] "succeeded"
[-1 = complement 0] "succeeded"
[0 = complement -1] "succeeded"
[2147483647 = complement -2147483648] "succeeded"
[-2147483648 = complement 2147483647] "succeeded"
[255.255.255 = complement 0.0.0] "succeeded"
[0.0.0 = complement 255.255.255] "succeeded"
[#{ffffffffff} = complement #{0000000000}] "succeeded"
[#{0000000000} = complement #{ffffffffff}] "succeeded"
[not find complement charset "b" #"b"] "succeeded"
[find complement charset "a" #"b"] "succeeded"
[
	a: make bitset! #{0000000000000000000000000000000000000000000000000000000000000000}
	a == complement complement a
] "succeeded"
[
	a: make bitset! #{FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF}
	a == complement complement a
] "succeeded"
[(make image! [1x1 #{000000}]) = complement make image! [1x1 #{ffffff} #{ff}]] "succeeded"
[(make image! [1x1 #{ffffff} #{ff}]) = complement make image! [1x1 #{000000}]] "succeeded"
[typeset? complement make typeset! [unset!]] "succeeded"
[1 = cosine 0] "succeeded"
[1 = cosine/radians 0] "succeeded"
[(square-root 3) / 2 = cosine 30] "succeeded"
[(square-root 3) / 2 = cosine/radians pi / 6] "succeeded"
[(square-root 2) / 2 = cosine 45] "succeeded"
[(square-root 2) / 2 = cosine/radians pi / 4] "succeeded"
[0.5 = cosine 60] "succeeded"
[0.5 = cosine/radians pi / 3] "succeeded"
[0 = cosine 90] "succeeded"
[0 = cosine/radians pi / 2] "succeeded"
[-1 = cosine 180] "succeeded"
[-1 = cosine/radians pi] "succeeded"
[(square-root 3) / -2 = cosine 150] "succeeded"
[(square-root 3) / -2 = cosine/radians pi * 5 / 6] "succeeded"
[(square-root 2) / -2 = cosine 135] "succeeded"
[(square-root 2) / -2 = cosine/radians pi * 3 / 4] "succeeded"
[-0.5 = cosine 120] "succeeded"
[-0.5 = cosine/radians pi * 2 / 3] "succeeded"
[24:00 = difference 1/Jan/2007 31/Dec/2006] "succeeded"
[0:00 = difference 1/Jan/2007 1/Jan/2007] "succeeded"
[[1 2] = difference [1 3] [2 3]] "succeeded"
[[] = difference [1 2] [1 2]] "succeeded"
[(charset "a") = difference charset "a" charset ""] "succeeded"
[1 == divide -2147483648 -2147483648] "succeeded"
[2 == divide -2147483648 -1073741824] "succeeded"
[1073741824 == divide -2147483648 -2] "succeeded"
[error? try [divide -2147483648 0]] "succeeded"
[-2147483648 == divide -2147483648 1] "succeeded"
[-1073741824 == divide -2147483648 2] "succeeded"
[-2 == divide -2147483648 1073741824] "succeeded"
[0.5 == divide -1073741824 -2147483648] "succeeded"
[1 == divide -1073741824 -1073741824] "succeeded"
[536870912 == divide -1073741824 -2] "succeeded"
[1073741824 == divide -1073741824 -1] "succeeded"
[error? try [divide -1073741824 0]] "succeeded"
[-1073741824 == divide -1073741824 1] "succeeded"
[-536870912 == divide -1073741824 2] "succeeded"
[-1 == divide -1073741824 1073741824] "succeeded"
[1 == divide -2 -2] "succeeded"
[2 == divide -2 -1] "succeeded"
[error? try [divide -2 0]] "succeeded"
[-2 == divide -2 1] "succeeded"
[-1 == divide -2 2] "succeeded"
[0.5 == divide -1 -2] "succeeded"
[1 == divide -1 -1] "succeeded"
[error? try [divide -1 0]] "succeeded"
[-1 == divide -1 1] "succeeded"
[-0.5 == divide -1 2] "succeeded"
[0 == divide 0 -2147483648] "succeeded"
[0 == divide 0 -1073741824] "succeeded"
[0 == divide 0 -2] "succeeded"
[0 == divide 0 -1] "succeeded"
[error? try [divide 0 0]] "succeeded"
[0 == divide 0 1] "succeeded"
[0 == divide 0 2] "succeeded"
[0 == divide 0 1073741824] "succeeded"
[0 == divide 0 2147483647] "succeeded"
[-0.5 == divide 1 -2] "succeeded"
[-1 == divide 1 -1] "succeeded"
[error? try [divide 1 0]] "succeeded"
[1 == divide 1 1] "succeeded"
[0.5 == divide 1 2] "succeeded"
[-1 == divide 2 -2] "succeeded"
[-2 == divide 2 -1] "succeeded"
[error? try [divide 2 0]] "succeeded"
[2 == divide 2 1] "succeeded"
[1 == divide 2 2] "succeeded"
[-0.5 == divide 1073741824 -2147483648] "succeeded"
[-1 == divide 1073741824 -1073741824] "succeeded"
[-536870912 == divide 1073741824 -2] "succeeded"
[-1073741824 == divide 1073741824 -1] "succeeded"
[error? try [divide 1073741824 0]] "succeeded"
[1073741824 == divide 1073741824 1] "succeeded"
[536870912 == divide 1073741824 2] "succeeded"
[1 == divide 1073741824 1073741824] "succeeded"
[-1 == divide 2147483647 -2147483647] "succeeded"
[-1073741823.5 == divide 2147483647 -2] "succeeded"
[-2147483647 == divide 2147483647 -1] "succeeded"
[error? try [divide 2147483647 0]] "succeeded"
[2147483647 == divide 2147483647 1] "succeeded"
[1073741823.5 == divide 2147483647 2] "succeeded"
[1 == divide 2147483647 2147483647] "succeeded"
[even? 0] "succeeded"
[not even? 1] "succeeded"
[not even? -1] "succeeded"
[not even? 2147483647] "succeeded"
[even? -2147483648] "succeeded"
[not even? 9223372036854775807] "succeeded"
[even? -9223372036854775808] "succeeded"
[even? 0.0] "succeeded"
[not even? 1.0] "succeeded"
[even? 2.0] "succeeded"
[not even? -1.0] "succeeded"
[even? -2.0] "succeeded"
[even? 1.7976931348623157e308] "failed"
[even? -1.7976931348623157e308] "succeeded"
[even? #"^@"] "succeeded"
[not even? #"^a"] "succeeded"
[even? #"^b"] "succeeded"
[not even? #"^(ff)"] "succeeded"
[even? $0] "succeeded"
[not even? $1] "succeeded"
[even? $2] "succeeded"
[not even? -$1] "succeeded"
[even? -$2] "succeeded"
[not even? $999999999999999] "succeeded"
[not even? -$999999999999999] "succeeded"
[even? 0:00] "succeeded"
[even? 0:1:00] "succeeded"
[even? -0:1:00] "succeeded"
[not even? 0:0:01] "succeeded"
[even? 0:0:02] "succeeded"
[not even? -0:0:01] "succeeded"
[even? -0:0:02] "succeeded"
[1 = exp 0] "succeeded"
[2.718281828459045 = exp 1] "succeeded"
[2.718281828459045 * 2.718281828459045 = exp 2] "succeeded"
[(square-root 2.718281828459045) = exp 0.5] "succeeded"
[1 / 2.718281828459045 = exp -1] "succeeded"
[0 = log-10 1] "succeeded"
[0.5 = log-10 square-root 10] "succeeded"
[1 = log-10 10] "succeeded"
[-1 = log-10 0.1] "succeeded"
[2 = log-10 100] "succeeded"
[-2 = log-10 0.01] "succeeded"
[3 = log-10 1000] "succeeded"
[-3 = log-10 0.001] "succeeded"
[error? try [log-10 0]] "succeeded"
[error? try [log-10 -1]] "succeeded"
[0 = log-2 1] "succeeded"
[1 = log-2 2] "succeeded"
[-1 = log-2 0.5] "succeeded"
[2 = log-2 4] "succeeded"
[-2 = log-2 0.25] "succeeded"
[3 = log-2 8] "succeeded"
[-3 = log-2 0.125] "succeeded"
[error? try [log-2 0]] "succeeded"
[error? try [log-2 -1]] "succeeded"
[0 = log-e 1] "succeeded"
[0.5 = log-e square-root 2.718281828459045] "succeeded"
[1 = log-e 2.718281828459045] "succeeded"
[-1 = log-e 1 / 2.718281828459045] "succeeded"
[2 = log-e 2.718281828459045 * 2.718281828459045] "succeeded"
[error? try [log-e 0]] "succeeded"
[error? try [log-e -1]] "succeeded"
[0.0 == mod 1E15 1] "succeeded"
[0.0 == mod -1E15 1] "succeeded"
[0.0 == mod 1E14 1] "succeeded"
[0.0 == mod -1E14 1] "succeeded"
[0 == mod -1 1] "succeeded"
[0.75 == mod -1.25 1] "succeeded"
[0.5 == mod -1.5 1] "succeeded"
[0.25 == mod -1.75 1] "succeeded"
[not negative? 1e-8 - abs 0.9 - mod 99'999'999.9 1] "succeeded"
[not negative? 1e-8 - abs 0.99 - mod 99'999'999.99 1] "succeeded"
[not negative? 1e-8 - abs 0.999 - mod 99'999'999.999 1] "succeeded"
[not negative? 1e-8 - abs 0.9999 - mod 99'999'999.9999 1] "succeeded"
[not negative? 1e-8 - abs 0.99999 - mod 99'999'999.99999 1] "succeeded"
[not negative? 1e-8 - abs 0.999999 - mod 99'999'999.999999 1] "succeeded"
[$0 == mod $999'999'999'999'999 1] "succeeded"
[$0 == mod $999'999'999'999'999 $1] "succeeded"
[0.0 == mod 9'999'999'999'999'999 1.0] "succeeded"
[0.0 == mod 999'999'999'999'999 1.0] "succeeded"
[0.0 == mod 562'949'953'421'313.0 1.0] "succeeded"
[0.0 == mod -562'949'953'421'313.0 1.0] "succeeded"
[0.0 == mod -562'949'953'421'314.0 1] "succeeded"
[0.5 == mod -562'949'953'421'312.5 1] "succeeded"
[0.5 == mod 562'949'953'421'312.5 1] "succeeded"
[0.5 == mod -562'949'953'421'313.5 1] "succeeded"
[0.5 == mod 562'949'953'421'313.5 1] "succeeded"
[0.5 == mod -562'949'953'421'314.5 1] "succeeded"
[0.5 == mod 562'949'953'421'314.5 1] "succeeded"
[0.0 == mod 562'949'953'421'311.0 1] "succeeded"
[0.25 == mod 562'949'953'421'311.25 1] "succeeded"
[0.5 == mod 562'949'953'421'311.5 1] "succeeded"
[0.0 == mod -562'949'953'421'311.0 1] "succeeded"
[0.5 == mod -562'949'953'421'311.5 1] "succeeded"
[0.25 == mod -562'949'953'421'311.75 1] "succeeded"
[0.0 == mod 562'949'953'421'312.0 1] "succeeded"
[0.25 == mod 562'949'953'421'312.25 1] "succeeded"
[0.5 == mod 562'949'953'421'312.5 1] "succeeded"
[0.0 == mod -562'949'953'421'312.0 1] "succeeded"
[0.5 == mod -562'949'953'421'312.5 1] "succeeded"
[0.25 == mod -562'949'953'421'312.75 1] "succeeded"
[not negative? 1e-16 - abs mod 0.15 - 0.05 - 0.1 0.1] "succeeded"
[not negative? 1e-16 - abs mod 0.1 + 0.1 + 0.1 0.3] "succeeded"
[not negative? 1e-16 - abs mod 0.3 0.1 + 0.1 + 0.1] "succeeded"
[not negative? 1e-16 - abs mod to money! 0.1 + 0.1 + 0.1 0.3] "succeeded"
[0.0 == modulo 0.1 + 0.1 + 0.1 0.3] "succeeded"
[0.0 == modulo 0.3 0.1 + 0.1 + 0.1] "succeeded"
[$0.0 == modulo $0.1 + $0.1 + $0.1 $0.3] "succeeded"
[$0.0 == modulo $0.3 $0.1 + $0.1 + $0.1] "succeeded"
[0.0 == modulo 1 0.1] "succeeded"
[0.0 == modulo 0.15 - 0.05 - 0.1 0.1] "succeeded"
[0 = multiply -2147483648 0] "succeeded"
[-2147483648 = multiply -2147483648 1] "succeeded"
[1073741824 = multiply -1073741824 -1] "succeeded"
[0 = multiply -1073741824 0] "succeeded"
[-1073741824 = multiply -1073741824 1] "succeeded"
[-2147483648 = multiply -1073741824 2] "succeeded"
[4 = multiply -2 -2] "succeeded"
[2 = multiply -2 -1] "succeeded"
[0 = multiply -2 0] "succeeded"
[-2 = multiply -2 1] "succeeded"
[-4 = multiply -2 2] "succeeded"
[-2147483648 = multiply -2 1073741824] "succeeded"
[1073741824 = multiply -1 -1073741824] "succeeded"
[2 = multiply -1 -2] "succeeded"
[1 = multiply -1 -1] "succeeded"
[0 = multiply -1 0] "succeeded"
[-1 = multiply -1 1] "succeeded"
[-2 = multiply -1 2] "succeeded"
[-1073741824 = multiply -1 1073741824] "succeeded"
[-2147483647 = multiply -1 2147483647] "succeeded"
[0 = multiply 0 -2147483648] "succeeded"
[0 = multiply 0 -1073741824] "succeeded"
[0 = multiply 0 -2] "succeeded"
[0 = multiply 0 -1] "succeeded"
[0 = multiply 0 0] "succeeded"
[0 = multiply 0 1] "succeeded"
[0 = multiply 0 2] "succeeded"
[0 = multiply 0 1073741824] "succeeded"
[0 = multiply 0 2147483647] "succeeded"
[-2147483648 = multiply 1 -2147483648] "succeeded"
[-1073741824 = multiply 1 -1073741824] "succeeded"
[-2 = multiply 1 -2] "succeeded"
[-1 = multiply 1 -1] "succeeded"
[0 = multiply 1 0] "succeeded"
[1 = multiply 1 1] "succeeded"
[2 = multiply 1 2] "succeeded"
[1073741824 = multiply 1 1073741824] "succeeded"
[2147483647 = multiply 1 2147483647] "succeeded"
[-2147483648 = multiply 2 -1073741824] "succeeded"
[-4 = multiply 2 -2] "succeeded"
[-2 = multiply 2 -1] "succeeded"
[0 = multiply 2 0] "succeeded"
[2 = multiply 2 1] "succeeded"
[-2147483648 = multiply 1073741824 -2] "succeeded"
[-1073741824 = multiply 1073741824 -1] "succeeded"
[0 = multiply 1073741824 0] "succeeded"
[1073741824 = multiply 1073741824 1] "succeeded"
[-2147483647 = multiply 2147483647 -1] "succeeded"
[0 = multiply 2147483647 0] "succeeded"
[2147483647 = multiply 2147483647 1] "succeeded"
[error? try [multiply -1 -9223372036854775808]] "succeeded"
[error? try [multiply -9223372036854775808 -1]] "succeeded"
[0:0:1 == multiply 0:0:2 0.5] "succeeded"
[0 = negate 0] "succeeded"
[-1 = negate 1] "succeeded"
[1 = negate -1] "succeeded"
[0.0 == negate 0.0] "succeeded"
[-1.0 == negate 1.0] "succeeded"
[1.0 == negate -1.0] "succeeded"
[1.7976931348623157e308 = negate -1.7976931348623157e308] "succeeded"
[-1.7976931348623157e308 = negate 1.7976931348623157e308] "succeeded"
[4.94065645841247E-324 = negate -4.94065645841247E-324] "succeeded"
[-4.94065645841247E-324 = negate 4.94065645841247E-324] "succeeded"
[0x0 = negate 0x0] "succeeded"
[-1x-1 = negate 1x1] "succeeded"
[1x1 = negate -1x-1] "succeeded"
[-1x1 = negate 1x-1] "succeeded"
[$0 = negate $0] "succeeded"
[-$1 = negate $1] "succeeded"
[$1 = negate -$1] "succeeded"
[0:00 = negate 0:00] "succeeded"
[-1:01 = negate 1:01] "succeeded"
[1:01 = negate -1:01] "succeeded"
[
	a: make bitset! #{FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF}
	a == negate negate a
] "succeeded"
[
	a: make bitset! #{0000000000000000000000000000000000000000000000000000000000000000}
	a == negate negate a
] "succeeded"
[not negative? 0] "succeeded"
[not negative? 1] "succeeded"
[negative? -1] "succeeded"
[not negative? 2147483647] "succeeded"
[negative? -2147483648] "succeeded"
[not negative? 9223372036854775807] "succeeded"
[negative? -9223372036854775808] "succeeded"
[not negative? 0.0] "succeeded"
[not negative? 4.94065645841247E-324] "succeeded"
[negative? -4.94065645841247E-324] "succeeded"
[not negative? 1.7976931348623157e308] "succeeded"
[negative? -1.7976931348623157e308] "succeeded"
[not negative? $0] "succeeded"
[not negative? $0.01] "succeeded"
[negative? -$0.01] "succeeded"
[not negative? $999999999999999.87] "succeeded"
[negative? -$999999999999999.87] "succeeded"
[not negative? 0:00] "succeeded"
[not negative? 0:00:0.000000001] "succeeded"
[negative? -0:00:0.000000001] "succeeded"
[false = not :abs] "succeeded"
[false = not #{}] "succeeded"
[false = not charset ""] "succeeded"
[false = not []] "succeeded"
[false = not #"a"] "succeeded"
[false = not datatype!] "succeeded"
[false = not 1/1/2007] "succeeded"
[false = not 0.0] "succeeded"
[false = not me@mydomain.com] "succeeded"
[false = not %myfile] "succeeded"
[false = not func [] []] "succeeded"
[false = not first [:a]] "succeeded"
[false = not make image! 0x0] "succeeded"
[false = not 0] "succeeded"
[false = not #1444] "succeeded"
[false = not first ['a/b]] "succeeded"
[false = not first ['a]] "succeeded"
[false = not true] "succeeded"
[true = not false] "succeeded"
[false = not make map! []] "succeeded"
[false = not $0.00] "succeeded"
[false = not :type?] "succeeded"
[true = not none] "succeeded"
[false = not make object! []] "succeeded"
[false = not type? get '+] "succeeded"
[false = not 0x0] "succeeded"
[false = not first [()]] "succeeded"
[false = not first [a/b]] "succeeded"
[false = not make port! http://] "succeeded"
[false = not /refinement] "succeeded"
[false = not first [a/b:]] "succeeded"
[false = not first [a:]] "succeeded"
[false = not ""] "succeeded"
[false = not <tag>] "succeeded"
[false = not 1:00] "succeeded"
[false = not 1.2.3] "succeeded"
[false = not http://] "succeeded"
[false = not 'a] "succeeded"
[not odd? 0] "succeeded"
[odd? 1] "succeeded"
[odd? -1] "succeeded"
[odd? 2147483647] "succeeded"
[not odd? -2147483648] "succeeded"
[odd? 9223372036854775807] "succeeded"
[not odd? -9223372036854775808] "succeeded"
[not odd? 0.0] "succeeded"
[odd? 1.0] "succeeded"
[not odd? 2.0] "succeeded"
[odd? -1.0] "succeeded"
[not odd? -2.0] "succeeded"
[not odd? 1.7976931348623157e308] "failed"
[not odd? -1.7976931348623157e308] "succeeded"
[not odd? #"^@"] "succeeded"
[odd? #"^a"] "succeeded"
[not odd? #"^b"] "succeeded"
[odd? #"^(ff)"] "succeeded"
[not odd? $0] "succeeded"
[odd? $1] "succeeded"
[not odd? $2] "succeeded"
[odd? -$1] "succeeded"
[not odd? -$2] "succeeded"
[odd? $999999999999999] "succeeded"
[odd? -$999999999999999] "succeeded"
[not odd? 0:00] "succeeded"
[not odd? 0:1:00] "succeeded"
[not odd? -0:1:00] "succeeded"
[odd? 0:0:01] "succeeded"
[not odd? 0:0:02] "succeeded"
[odd? -0:0:01] "succeeded"
[not odd? -0:0:02] "succeeded"
[not positive? 0] "succeeded"
[positive? 1] "succeeded"
[not positive? -1] "succeeded"
[positive? 2147483647] "succeeded"
[not positive? -2147483648] "succeeded"
[positive? 9223372036854775807] "succeeded"
[not positive? -9223372036854775808] "succeeded"
[not positive? 0.0] "succeeded"
[positive? 4.94065645841247E-324] "succeeded"
[not positive? -4.94065645841247E-324] "succeeded"
[positive? 1.7976931348623157e308] "succeeded"
[not positive? -1.7976931348623157e308] "succeeded"
[not positive? $0] "succeeded"
[positive? $0.01] "succeeded"
[not positive? -$0.01] "succeeded"
[positive? $999999999999999.87] "succeeded"
[not positive? -$999999999999999.87] "succeeded"
[not positive? 0:00] "succeeded"
[positive? 0:00:0.000000001] "succeeded"
[not positive? -0:00:0.000000001] "succeeded"
[1 = power 1 1000] "succeeded"
[1 = power 1000 0] "succeeded"
[4 = power 2 2] "succeeded"
[0.5 = power 2 -1] "succeeded"
[0.1 = power 10 -1] "succeeded"
[
	random/seed 0
	not any [
		negative? random 1.0
		negative? random 1.0
	]
] "succeeded"
[
	random/seed 0
	2 = random/only next [1 2]
] "succeeded"
[0 = remainder -9223372036854775808 -1] "succeeded"
[0 == remainder -2147483648 -1] "succeeded"
[-1:00 == remainder -1:00 -3:00] "succeeded"
[1:00 == remainder 1:00 -3:00] "succeeded"
[0 == round 0] "succeeded"
[1 == round 1] "succeeded"
[-1 == round -1] "succeeded"
[zero? 2 - round 1.5] "succeeded"
[zero? 3 - round 2.5] "succeeded"
[zero? -2 - round -1.5] "succeeded"
[zero? -2 - round -1.5] "succeeded"
[zero? -3 - round -2.5] "succeeded"
[zero? 1 - round 1.499999999999995] "succeeded"
[zero? 2 - round 1.500000000000001] "succeeded"
[zero? -1 - round -1.499999999999995] "succeeded"
[zero? -2 - round -1.500000000000001] "succeeded"
[1:03:01 == round 1:03:01.1] "succeeded"
[1:03:02 == round 1:03:01.5] "succeeded"
[1:03:02 == round 1:03:01.9] "succeeded"
[zero? round 0.00001] "succeeded"
[zero? round 0.49999999] "succeeded"
[zero? 1 - round 0.5] "succeeded"
[zero? 1 - round 1.49999999] "succeeded"
[zero? 2 - round 1.5] "succeeded"
[2 == round 2] "succeeded"
[zero? 2 - round 2.49999999] "succeeded"
[zero? 3 - round 2.5] "succeeded"
[zero? round -0.00001] "succeeded"
[zero? round -0.49999999] "succeeded"
[zero? -1 - round -0.5] "succeeded"
[zero? -1 - round -1.49999999] "succeeded"
[zero? -2 - round -1.5] "succeeded"
[-2 == round -2] "succeeded"
[1E20 == round 1E20] "succeeded"
[2147483648.0 == round 2147483648.0] "succeeded"
[9223372036854775808.0 == round 9223372036854775808.0] "succeeded"
[$101 == round $100.5] "succeeded"
[-$101 = round -$100.5] "succeeded"
[$100 == round $100.4999999999998] "succeeded"
[-$100 == round -$100.4999999999998] "succeeded"
[$1000 == round $1000.499999999999] "succeeded"
[-$1000 == round -$1000.499999999999] "succeeded"
[0:0:1 == round 0:0:1.4999] "succeeded"
[0:1:0 == round 0:1:0.4999] "succeeded"
[1:0:0 == round 1:0:0.4999] "succeeded"
[-0:0:1 == round -0:0:1.4999] "succeeded"
[-0:1:0 == round -0:1:0.4999] "succeeded"
[-1:0:0 == round -1:0:0.4999] "succeeded"
[0:0:2 == round 0:0:1.5] "succeeded"
[0:1:1 == round 0:1:0.5] "succeeded"
[1:0:1 == round 1:0:0.5] "succeeded"
[-0:0:2 == round -0:0:1.5] "succeeded"
[-0:1:1 == round -0:1:0.5] "succeeded"
[-1:0:1 == round -1:0:0.5] "succeeded"
[100 == round/to 108 25] "succeeded"
[zero? 100 - round/to 100.000001 25] "succeeded"
[zero? 100 - round/to 112.499999 25] "succeeded"
[zero? 125 - round/to 112.5 25] "succeeded"
[zero? -100 - round/to -100.000001 25] "succeeded"
[zero? -100 - round/to -112.499999 25] "succeeded"
[zero? -125 - round/to -112.5 25] "succeeded"
[zero? -125 - round/to -112.500001 25] "succeeded"
[125 == round/to 133 25] "succeeded"
[1.00 == round/to 1.08 0.25] "succeeded"
[1.25 == round/to 1.33 0.25] "succeeded"
[1:00 == round/to 1:03 0:15] "succeeded"
[1:15 == round/to 1:08 0:15] "succeeded"
[1:15 == round/to 1:18 0:15] "succeeded"
[1:30 == round/to 1:22:31 0:15] "succeeded"
[1:02 == round/to 1:02:03 0:01] "succeeded"
[562'949'953'421'312.0 == round/to 562'949'953'421'312.0 1.0] "succeeded"
[-562'949'953'421'312.0 == round/to -562'949'953'421'312.0 1.0] "succeeded"
[562'949'953'421'313.0 == round/to 562'949'953'421'313.0 1.0] "succeeded"
[-562'949'953'421'313.0 == round/to -562'949'953'421'313.0 1.0] "succeeded"
[562'949'953'421'314.0 == round/to 562'949'953'421'314.0 1.0] "succeeded"
[-562'949'953'421'314.0 == round/to -562'949'953'421'314.0 1.0] "succeeded"
[zero? $100.2 - round/to 100.15 $0.1] "succeeded"
[$100.2 == round/to $100.15 $0.1] "succeeded"
[1:1:1.2 == round/to 1:1:1.15 0:0:0.1] "succeeded"
[$100 == round/to $100.15 $2] "succeeded"
[1:1:2 == round/to 1:1:1.15 0:0:2] "succeeded"
[0 == round/even 0] "succeeded"
[1 == round/even 1] "succeeded"
[-1 == round/even -1] "succeeded"
[zero? 2 - round/even 1.5] "succeeded"
[zero? 2 - round/even 2.5] "succeeded"
[zero? -2 - round/even -1.5] "succeeded"
[zero? -2 - round/even -2.5] "succeeded"
[zero? 1 - round/even 1.49999999999995] "succeeded"
[zero? 1 - round/even 1.499999999999995] "succeeded"
[zero? 2 - round/even 1.500000000000001] "succeeded"
[zero? -1 - round/even -1.499999999999995] "succeeded"
[zero? -2 - round/even -1.500000000000001] "succeeded"
[2147483647 == round/even 2147483647] "succeeded"
[-2147483648 == round/even -2147483648] "succeeded"
[9223372036854780000.0 == round/even 9223372036854780000.0] "succeeded"
[1:03:01 == round/even 1:03:01.1] "succeeded"
[1:03:02 == round/even 1:03:01.5] "succeeded"
[1:03:02 == round/even 1:03:01.9] "succeeded"
[$100 == round/even $100.25] "succeeded"
[-$100 == round/even -$100.25] "succeeded"
[error? try [round/even/to 0.1 0]] "succeeded"
[zero? round/even/to 0.1 -1.0] "succeeded"
[zero? round/even/to 0.1 -1] "succeeded"
[zero? round/even/to 0.5 -1.0] "succeeded"
[zero? round/even/to 0.5 -1] "succeeded"
[zero? 2 - round/even/to 1.5 -1.0] "succeeded"
[zero? 2 - round/even/to 1.5 -1] "succeeded"
[zero? round/even/to -0.1 -1.0] "succeeded"
[zero? round/even/to -0.1 -1] "succeeded"
[0.0 == round/even/to -0.5 -1.0] "succeeded"
[zero? round/even/to -0.5 -1] "succeeded"
[-2.0 == round/even/to -1.5 -1.0] "succeeded"
[zero? -2 - round/even/to -1.5 -1] "succeeded"
[0.0 == round/even/to 0.1 1.0] "succeeded"
[0.0 == round/even/to 0.1 1E-0] "succeeded"
[0.0 == round/even/to -0.1 1E-0] "succeeded"
[0.1 == round/even/to 0.12 1E-1] "succeeded"
[-0.1 == round/even/to -0.12 1E-1] "succeeded"
[0.12 == round/even/to 0.123 1E-2] "succeeded"
[-0.12 == round/even/to -0.123 1e-2] "succeeded"
[0.123 == round/even/to 0.1234 1E-3] "succeeded"
[-0.123 == round/even/to -0.1234 1E-3] "succeeded"
[0.1234 = round/even/to 0.12345 1E-4] "succeeded"
[-0.1234 = round/even/to -0.12345 1E-4] "succeeded"
[2.6 == round/even/to $2.55 0.1] "succeeded"
[$2.6 == round/even/to 2.55 $0.1] "succeeded"
[0.12346 = round/even/to 0.123456 1E-5] "succeeded"
[-0.12346 = round/even/to -0.123456 1E-5] "succeeded"
[1.0 == round/even/to 0.9 1E-0] "succeeded"
[-1.0 == round/even/to -0.9 1E-0] "succeeded"
[0.6 = round/even/to 0.55 1E-1] "succeeded"
[-0.6 = round/even/to -0.55 1E-1] "succeeded"
[0.56 == round/even/to 0.555 1E-2] "succeeded"
[-0.56 == round/even/to -0.555 1E-2] "succeeded"
[2.0 == round/even/to 1.5 1E-0] "succeeded"
[1.6 == round/even/to 1.55 1E-1] "succeeded"
[1.56 == round/even/to 1.555 1E-2] "succeeded"
[1.556 == round/even/to 1.5555  1E-3] "succeeded"
[1.5556 == round/even/to 1.55555 1E-4] "succeeded"
[1.55556 = round/even/to 1.555555 1E-5] "succeeded"
[1.555556 == round/even/to 1.5555555 1E-6] "succeeded"
[1.5555556 == round/even/to 1.55555555 1E-7] "succeeded"
[1.55555556 == round/even/to 1.555555555 1E-8] "succeeded"
[1.555555556 = round/even/to 1.5555555555 1E-9] "succeeded"
[0.2 == round/even/to 0.15 1E-1] "succeeded"
[-0.2 == round/even/to -0.15 1E-1] "succeeded"
[0.4 == round/even/to 0.35 1E-1] "succeeded"
[1.0 == round/even/to 0.95 1E-1] "succeeded"
[1.2 = round/even/to 1.15 1E-1] "succeeded"
[2.2 == round/even/to 2.15 1E-1] "succeeded"
[2.6 == round/even/to 2.55 1E-1] "succeeded"
[10.0 == round/even/to 10 1E-1] "succeeded"
[zero? 110 - round/even/to 107.5 5] "succeeded"
[zero? 110 - round/even/to 112.5 5] "succeeded"
[zero? 120 - round/even/to 115 10] "succeeded"
[zero? 100 - round/even/to 100.000001 25] "succeeded"
[zero? 100 - round/even/to 112.499999 25] "succeeded"
[zero? 100 - round/even/to 112.5 25] "succeeded"
[zero? 150 - round/even/to 137.5 25] "succeeded"
[zero? -100 - round/even/to -100.000001 25] "succeeded"
[zero? -100 - round/even/to -112.499999 25] "succeeded"
[zero? -100 - round/even/to -112.5 25] "succeeded"
[zero? -125 - round/even/to -112.500001 25] "succeeded"
[zero? -150 - round/even/to -137.5 25] "succeeded"
[1:02:3.1 == round/even/to 1:02:3.14999 0:0:0.1] "succeeded"
[1:02:3.2 == round/even/to 1:02:3.15 0:0:0.1] "succeeded"
[1:02:3.2 == round/even/to 1:02:3.25 0:0:0.1] "succeeded"
[1:02:3.3 == round/even/to 1:02:3.25001 0:0:0.1] "succeeded"
[1:15 == round/even/to 1:22:29.9999 0:15] "succeeded"
[1:30 == round/even/to 1:22:30 0:15] "succeeded"
[0.0 == (562'949'953'421'312.0 - round/even/to 562'949'953'421'312.0 1.0)] "succeeded"
[0.0 == (-562'949'953'421'312.0 - round/even/to -562'949'953'421'312.0 1.0)] "succeeded"
[0.0 == (562'949'953'421'313.0 - round/even/to 562'949'953'421'313.0 1.0)] "succeeded"
[0.0 == (-562'949'953'421'313.0 - round/even/to -562'949'953'421'313.0 1.0)] "succeeded"
[562'949'953'421'314.0 == round/even/to 562'949'953'421'314.0 1.0] "succeeded"
[-562'949'953'421'314.0 == round/even/to -562'949'953'421'314.0 1.0] "succeeded"
[$1.15 == round/even/to 1.15 $0.01] "succeeded"
[0:0:1.15 == round/even/to 0:0:1.15 0:0:0.01] "succeeded"
[1.15 == round/even/to $1.15 0.01] "succeeded"
[-0:0:2.6 == round/even/to -0:0:2.55 0:0:0.1] "succeeded"
[-$2.6 == round/even/to -$2.55 $0.1] "succeeded"
[0.0 == (1e-15 - round/even/to 1.1e-15 1e-15)] "succeeded"
[$0.0 == ($0.000'000'000'000'001 - round/even/to $0.000'000'000'000'001'1 $1e-15)] "succeeded"
[not negative? 1e-31 - abs 26e-17 - round/even/to 25.5e-17 1e-17] "succeeded"
[not negative? ($1e-31) - abs $26e-17 - round/even/to $0.000'000'000'000'000'255 $1e-17] "succeeded"
[0:0:2.6 == round/even/to 0:0:2.55 0:0:0.1] "succeeded"
[$2.6 == round/even/to $2.55 $0.1] "succeeded"
[not negative? 1e-31 - abs -26e-17 - round/even/to -25.5e-17 1e-17] "succeeded"
[not negative? $1e-31 - abs -$26e-17 - round/even/to -$0.000'000'000'000'000'255 $1e-17] "succeeded"
[$1 == round/even/to $1.23456789 $1] "succeeded"
[$1.2 == round/even/to $1.23456789 $0.1] "succeeded"
[$1.23 == round/even/to $1.23456789 $0.01] "succeeded"
[$1.235 == round/even/to $1.23456789 $0.001] "succeeded"
[$1.2346 == round/even/to $1.23456789 $0.0001] "succeeded"
[$1.23457 == round/even/to $1.23456789 $0.00001] "succeeded"
[$1.234568 == round/even/to $1.23456789 $0.000001] "succeeded"
[$1.2345679 == round/even/to $1.23456789 $0.0000001] "succeeded"
[$1.23456789 == round/even/to $1.23456789 $0.00000001] "succeeded"
[0 == round/ceiling 0] "succeeded"
[1 == round/ceiling 1] "succeeded"
[-1 == round/ceiling -1] "succeeded"
[zero? 2 - round/ceiling 1.1] "succeeded"
[zero? 1 - round/ceiling 0.00000000000001] "succeeded"
[zero? round/ceiling -0.00000000000001] "succeeded"
[zero? 1 - round/ceiling 0.99999999999995] "succeeded"
[zero? -1 - round/ceiling -1.00000000000001] "succeeded"
[zero? -1 - round/ceiling -1.99999999999995] "succeeded"
[zero? 1 - round/ceiling 0.00001] "succeeded"
[zero? 1 - round/ceiling 0.49999999] "succeeded"
[zero? 1 - round/ceiling 0.5] "succeeded"
[zero? 2 - round/ceiling 1.49999999] "succeeded"
[zero? 2 - round/ceiling 1.5] "succeeded"
[2 == round/ceiling 2] "succeeded"
[zero? 3 - round/ceiling 2.49999999] "succeeded"
[zero? 3 - round/ceiling 2.5] "succeeded"
[zero? round/ceiling -0.00001] "succeeded"
[zero? round/ceiling -0.49999999] "succeeded"
[zero? round/ceiling -0.5] "succeeded"
[zero? -1 - round/ceiling -1.49999999] "succeeded"
[zero? -1 - round/ceiling -1.5] "succeeded"
[-2 == round/ceiling -2] "succeeded"
[562'949'953'421'312.0 == round/ceiling/to 562'949'953'421'312.0 1.0] "succeeded"
[-562'949'953'421'312.0 == round/ceiling/to -562'949'953'421'312.0 1.0] "succeeded"
[562'949'953'421'313.0 == round/ceiling/to 562'949'953'421'313.0 1.0] "succeeded"
[-562'949'953'421'313.0 == round/ceiling/to -562'949'953'421'313.0 1.0] "succeeded"
[562'949'953'421'314.0 == round/ceiling/to 562'949'953'421'314.0 1.0] "succeeded"
[-562'949'953'421'314.0 == round/ceiling/to -562'949'953'421'314.0 1.0] "succeeded"
[-1 == round/floor -1] "succeeded"
[zero? 1 - round/floor 1.1] "succeeded"
[zero? round/floor 0.00000000000001] "succeeded"
[zero? -1 - round/floor -0.00000000000001] "succeeded"
[zero? round/floor 0.99999999999995] "succeeded"
[zero? -2 - round/floor -1.00000000000001] "succeeded"
[zero? -2 - round/floor -1.99999999999995] "succeeded"
[zero? 100 - round/floor/to 112.499999 25] "succeeded"
[zero? 100 - round/floor/to 112.5 25] "succeeded"
[zero? -125 - round/floor/to -112.000001 25] "succeeded"
[zero? -125 - round/floor/to -112.5 25] "succeeded"
[zero? -125 - round/floor/to -112.500001 25] "succeeded"
[562'949'953'421'312.0 == round/floor/to 562'949'953'421'312.0 1.0] "succeeded"
[-562'949'953'421'312.0 == round/floor/to -562'949'953'421'312.0 1.0] "succeeded"
[562'949'953'421'313.0 == round/floor/to 562'949'953'421'313.0 1.0] "succeeded"
[-562'949'953'421'313.0 == round/floor/to -562'949'953'421'313.0 1.0] "succeeded"
[562'949'953'421'314.0 == round/floor/to 562'949'953'421'314.0 1.0] "succeeded"
[-562'949'953'421'314.0 == round/floor/to -562'949'953'421'314.0 1.0] "succeeded"
[0 == round/down 0] "succeeded"
[1 == round/down 1] "succeeded"
[-1 == round/down -1] "succeeded"
[zero? 1 - round/down 1.1] "succeeded"
[zero? round/down 0.00000000000001] "succeeded"
[zero? round/down -0.00000000000001] "succeeded"
[zero? round/down 0.99999999999995] "succeeded"
[zero? -1 - round/down -1.00000000000001] "succeeded"
[zero? -1 - round/down -1.99999999999995] "succeeded"
[1:02:03 == round/down 1:02:03] "succeeded"
[1:02:03 == round/down 1:02:03.00000000001] "succeeded"
[1:02:03 == round/down 1:02:03.999999999] "succeeded"
[9.6 == round/down/to 10.0 0.96] "succeeded"
[9.6 == round/down/to 10.55 0.96] "succeeded"
[562'949'953'421'312.0 == round/down/to 562'949'953'421'312.0 1.0] "succeeded"
[-562'949'953'421'312.0 == round/down/to -562'949'953'421'312.0 1.0] "succeeded"
[562'949'953'421'313.0 == round/down/to 562'949'953'421'313.0 1.0] "succeeded"
[-562'949'953'421'313.0 == round/down/to -562'949'953'421'313.0 1.0] "succeeded"
[562'949'953'421'314.0 == round/down/to 562'949'953'421'314.0 1.0] "succeeded"
[-562'949'953'421'314.0 == round/down/to -562'949'953'421'314.0 1.0] "succeeded"
[1.1 == round/down/to 1.123456789 1E-1] "succeeded"
[1.12 == round/down/to 1.123456789 1E-2] "succeeded"
[1.123 == round/down/to 1.123456789 1E-3] "succeeded"
[1.1234 == round/down/to 1.123456789 1E-4] "succeeded"
[1.12345 == round/down/to 1.123456789 1E-5] "succeeded"
[1.123456 == round/down/to 1.123456789 1E-6] "succeeded"
[1.1234567 == round/down/to 1.123456789 1E-7] "succeeded"
[1.12345678 == round/down/to 1.123456789 1E-8] "succeeded"
[1:0:0 == round/down/to 1:02:3.456789 0:5:0] "succeeded"
[1:0:0 == round/down/to 1:02:3.456789 0:3:0] "succeeded"
[1:2:0 == round/down/to 1:02:3.456789 0:2:0] "succeeded"
[1:2:0 == round/down/to 1:02:3.456789 0:1:0] "succeeded"
[1:2:0 == round/down/to 1:02:3.456789 0:0:5] "succeeded"
[1:2:0 == round/down/to 1:02:3.456789 0:0:4] "succeeded"
[1:02:3 == round/down/to 1:02:3.456789 0:0:3] "succeeded"
[1:2:2 == round/down/to 1:02:3.456789 0:0:2] "succeeded"
[1:2:3 == round/down/to 1:02:3.456789 0:0:1] "succeeded"
[1:2:3.4 == round/down/to 1:02:3.456789 0:0:0.1] "succeeded"
[1:2:3.45 == round/down/to 1:02:3.456789 0:0:0.01] "succeeded"
[1:2:3.456 == round/down/to 1:02:3.456789 0:0:0.001] "succeeded"
[1:2:3.4567 == round/down/to 1:02:3.456789 0:0:0.0001] "succeeded"
[1:2:3.45678 == round/down/to 1:02:3.456789 0:0:0.00001] "succeeded"
[0 == round/half-ceiling 0] "succeeded"
[1 == round/half-ceiling 1] "succeeded"
[-1 == round/half-ceiling -1] "succeeded"
[zero? 2 - round/half-ceiling 1.5] "succeeded"
[zero? 3 - round/half-ceiling 2.5] "succeeded"
[zero? -1 - round/half-ceiling -1.5] "succeeded"
[zero? -2 - round/half-ceiling -2.5] "succeeded"
[zero? 1 - round/half-ceiling 1.499999999999995] "succeeded"
[zero? 2 - round/half-ceiling 1.50000000000001] "succeeded"
[zero? -1 - round/half-ceiling -1.49999999999995] "succeeded"
[zero? -2 - round/half-ceiling -1.50000000000001] "succeeded"
[1:03:01 == round/half-ceiling 1:03:01.1] "succeeded"
[1:03:02 == round/half-ceiling 1:03:01.5] "succeeded"
[1:03:02 == round/half-ceiling 1:03:01.9] "succeeded"
[-1:03:01 == round/half-ceiling -1:03:01] "succeeded"
[-1:03:01 == round/half-ceiling -1:03:01.5] "succeeded"
[-1:03:02 == round/half-ceiling -1:03:01.50001] "succeeded"
[$100 == round/half-ceiling $100] "succeeded"
[$101 == round/half-ceiling $100.5] "succeeded"
[$101 == round/half-ceiling $100.5000000001] "succeeded"
[-$100 == round/half-ceiling -$100] "succeeded"
[-$100 == round/half-ceiling -$100.5] "succeeded"
[-$101 == round/half-ceiling -$100.5000000001] "succeeded"
[0.0 == round/half-ceiling/to 0.1 -1.0] "succeeded"
[zero? round/half-ceiling/to 0.1 -1] "succeeded"
[1.0 == round/half-ceiling/to 0.5 -1.0] "succeeded"
[zero? 1 - round/half-ceiling/to 0.5 -1] "succeeded"
[2.0 == round/half-ceiling/to 1.5 -1.0] "succeeded"
[zero? 2 - round/half-ceiling/to 1.5 -1] "succeeded"
[0.0 == round/half-ceiling/to -0.1 -1.0] "succeeded"
[zero? round/half-ceiling/to -0.1 -1] "succeeded"
[0.0 == round/half-ceiling/to -0.5 -1.0] "succeeded"
[zero? round/half-ceiling/to -0.5 -1] "succeeded"
[-1.0 == round/half-ceiling/to -1.5 -1.0] "succeeded"
[zero? -1 - round/half-ceiling/to -1.5 -1] "succeeded"
[0 == round/half-down 0] "succeeded"
[1 == round/half-down 1] "succeeded"
[-1 == round/half-down -1] "succeeded"
[zero? 1 - round/half-down 1.5] "succeeded"
[zero? 2 - round/half-down 1.50000000001] "succeeded"
[zero? 2 - round/half-down 2.5] "succeeded"
[zero? 3 - round/half-down 2.50000000001] "succeeded"
[zero? -1 - round/half-down -1.5] "succeeded"
[zero? -2 - round/half-down -1.50000000001] "succeeded"
[zero? -2 - round/half-down -2.5] "succeeded"
[zero? -3 - round/half-down -2.50000000001] "succeeded"
[1:03:01 == round/half-down 1:03:01.1] "succeeded"
[1:03:01 == round/half-down 1:03:01.5] "succeeded"
[1:03:02 == round/half-down 1:03:01.9] "succeeded"
[-1:03:01 == round/half-down -1:03:01] "succeeded"
[-1:03:01 == round/half-down -1:03:01.5] "succeeded"
[-1:03:02 == round/half-down -1:03:01.50001] "succeeded"
[$100 == round/half-down $100] "succeeded"
[$100 == round/half-down $100.5] "succeeded"
[$101 == round/half-down $100.5000000001] "succeeded"
[-$100 == round/half-down -$100] "succeeded"
[-$100 == round/half-down -$100.5] "succeeded"
[-$101 == round/half-down -$100.5000000001] "succeeded"
[0.1 == round/half-down/to 0.15 0.1] "succeeded"
[0.2 == round/half-down/to 0.15001 0.1] "succeeded"
[0.5 == round/half-down/to 0.55 0.1] "succeeded"
[0.6 == round/half-down/to 0.55001 0.1] "succeeded"
[0.5 == round/half-down/to 0.75 0.5] "succeeded"
[1.0 == round/half-down/to 0.75001 0.5] "succeeded"
[-0.1 == round/half-down/to -0.15 0.1] "succeeded"
[-0.2 == round/half-down/to -0.15001 0.1] "succeeded"
[-0.5 == round/half-down/to -0.55 0.1] "succeeded"
[-0.6 == round/half-down/to -0.55001 0.1] "succeeded"
[-0.5 == round/half-down/to -0.75 0.5] "succeeded"
[-1.0 == round/half-down/to -0.75001 0.5] "succeeded"
[0 = sign? 0] "succeeded"
[1 = sign? 1] "succeeded"
[-1 = sign? -1] "succeeded"
[1 = sign? 2147483647] "succeeded"
[-1 = sign? -2147483648] "succeeded"
[0 = sign? 0.0] "succeeded"
[1 = sign? 4.94065645841247E-324] "succeeded"
[-1 = sign? -4.94065645841247E-324] "succeeded"
[1 = sign? 1.7976931348623157e308] "succeeded"
[-1 = sign? -1.7976931348623157e308] "succeeded"
[0 = sign? $0] "succeeded"
[0 = sign? USD$0] "failed, cannot load test source"
[1 = sign? $0.000000000000001] "succeeded"
[-1 = sign? -$0.000000000000001] "succeeded"
[0 = sign? 0:00] "succeeded"
[1 = sign? 0:00:0.000000001] "succeeded"
[-1 = sign? -0:00:0.000000001] "succeeded"
[0 = sine 0] "succeeded"
[0 = sine/radians 0] "succeeded"
[0.5 = sine 30] "succeeded"
[0.5 = sine/radians pi / 6] "succeeded"
[(square-root 2) / 2 = sine 45] "succeeded"
[(square-root 2) / 2 = sine/radians pi / 4] "succeeded"
[(square-root 3) / 2 = sine 60] "succeeded"
[(square-root 3) / 2 = sine/radians pi / 3] "succeeded"
[1 = sine 90] "succeeded"
[1 = sine/radians pi / 2] "succeeded"
[0 = sine 180] "succeeded"
[0 = sine/radians pi] "succeeded"
[-0.5 = sine -30] "succeeded"
[-0.5 = sine/radians pi / -6] "succeeded"
[(square-root 2) / -2 = sine -45] "succeeded"
[(square-root 2) / -2 = sine/radians pi / -4] "succeeded"
[(square-root 3) / -2 = sine -60] "succeeded"
[(square-root 3) / -2 = sine/radians pi / -3] "succeeded"
[-1 = sine -90] "succeeded"
[-1 = sine/radians pi / -2] "succeeded"
[0 = sine -180] "succeeded"
[0 = sine/radians negate pi] "succeeded"
[(sine 1e-12) / 1e-12 = (pi / 180)] "succeeded"
[(sine/radians 1e-9) / 1e-9 = 1.0] "succeeded"
[
	n: 25000
	s4: 0.0
	repeat l n [
		k: to decimal! l
		ks: sine/radians k
		s4: 1.0 / (k * k * k * ks * ks) + s4
	]
	30.314520404 = round/to s4 1e-9
] "succeeded"
[0 = square-root 0] "succeeded"
[error? try [square-root -1]] "succeeded"
[1 = square-root 1] "succeeded"
[0.5 = square-root 0.25] "succeeded"
[2 = square-root 4] "succeeded"
[3 = square-root 9] "succeeded"
[1.1 = square-root 1.21] "succeeded"
[1 == subtract 3 2] "succeeded"
[0 == subtract -9223372036854775808 -9223372036854775808] "succeeded"
[-1 == subtract -9223372036854775808 -9223372036854775807] "succeeded"
[-9223372036854775807 == subtract -9223372036854775808 -1] "succeeded"
[-9223372036854775808 = subtract -9223372036854775808 0] "succeeded"
[error? try [subtract -9223372036854775808 1]] "succeeded"
[error? try [subtract -9223372036854775808 9223372036854775806]] "succeeded"
[error? try [subtract -9223372036854775808 9223372036854775807]] "succeeded"
[1 = subtract -9223372036854775807 -9223372036854775808] "succeeded"
[0 = subtract -9223372036854775807 -9223372036854775807] "succeeded"
[-9223372036854775806 = subtract -9223372036854775807 -1] "succeeded"
[-9223372036854775807 = subtract -9223372036854775807 0] "succeeded"
[-9223372036854775808 = subtract -9223372036854775807 1] "succeeded"
[error? try [subtract -9223372036854775807 9223372036854775806]] "succeeded"
[error? try [subtract -9223372036854775807 9223372036854775807]] "succeeded"
[0 = subtract -2147483648 -2147483648] "succeeded"
[-2147483647 = subtract -2147483648 -1] "succeeded"
[-2147483648 = subtract -2147483648 0] "succeeded"
[-2147483649 = subtract -2147483648 1] "succeeded"
[-4294967295 = subtract -2147483648 2147483647] "succeeded"
[9223372036854775807 = subtract -1 -9223372036854775808] "succeeded"
[9223372036854775806 = subtract -1 -9223372036854775807] "succeeded"
[0 = subtract -1 -1] "succeeded"
[-1 = subtract -1 0] "succeeded"
[-2 = subtract -1 1] "succeeded"
[-9223372036854775807 = subtract -1 9223372036854775806] "succeeded"
[-9223372036854775808 = subtract -1 9223372036854775807] "succeeded"
[error? try [subtract 0 -9223372036854775808]] "succeeded"
[2147483648 = subtract 0 -2147483648] "succeeded"
[9223372036854775807 = subtract 0 -9223372036854775807] "succeeded"
[1 = subtract 0 -1] "succeeded"
[0 = subtract 0 0] "succeeded"
[-1 = subtract 0 1] "succeeded"
[-9223372036854775806 = subtract 0 9223372036854775806] "succeeded"
[-9223372036854775807 = subtract 0 9223372036854775807] "succeeded"
[error? try [subtract 1 -9223372036854775808]] "succeeded"
[error? try [subtract 1 -9223372036854775807]] "succeeded"
[2 = subtract 1 -1] "succeeded"
[1 = subtract 1 0] "succeeded"
[0 = subtract 1 1] "succeeded"
[-9223372036854775805 = subtract 1 9223372036854775806] "succeeded"
[-9223372036854775806 = subtract 1 9223372036854775807] "succeeded"
[4294967295 = subtract 2147483647 -2147483648] "succeeded"
[2147483648 = subtract 2147483647 -1] "succeeded"
[2147483647 = subtract 2147483647 0] "succeeded"
[error? try [subtract 9223372036854775806 -9223372036854775808]] "succeeded"
[error? try [subtract 9223372036854775806 -9223372036854775807]] "succeeded"
[9223372036854775807 = subtract 9223372036854775806 -1] "succeeded"
[9223372036854775806 = subtract 9223372036854775806 0] "succeeded"
[9223372036854775805 = subtract 9223372036854775806 1] "succeeded"
[0 = subtract 9223372036854775806 9223372036854775806] "succeeded"
[-1 = subtract 9223372036854775806 9223372036854775807] "succeeded"
[error? try [subtract 9223372036854775807 -9223372036854775808]] "succeeded"
[error? try [subtract  9223372036854775807 -9223372036854775807]] "succeeded"
[error? try [subtract 9223372036854775807 -1]] "succeeded"
[9223372036854775807 = subtract 9223372036854775807 0] "succeeded"
[9223372036854775806 = subtract 9223372036854775807 1] "succeeded"
[1 = subtract 9223372036854775807 9223372036854775806] "succeeded"
[0 = subtract 9223372036854775807 9223372036854775807] "succeeded"
[0.1 = subtract 1.1 1] "succeeded"
[-2147483648.0 = subtract -1.0 2147483647] "succeeded"
[2147483649.0 = subtract 1.0 -2147483648] "succeeded"
[-0.1 = subtract 1 1.1] "succeeded"
[2147483648.0 = subtract 2147483647 -1.0] "succeeded"
[-2147483649.0 = subtract -2147483648 1.0] "succeeded"
[0.0 = subtract -1.7976931348623157e308 -1.7976931348623157e308] "succeeded"
[-1.7976931348623157e308 = subtract -1.7976931348623157e308 -1.0] "succeeded"
[-1.7976931348623157e308 = subtract -1.7976931348623157e308 -4.94065645841247E-324] "succeeded"
[-1.7976931348623157e308 = subtract -1.7976931348623157e308 0.0] "succeeded"
[-1.7976931348623157e308 = subtract -1.7976931348623157e308 4.94065645841247E-324] "succeeded"
[-1.7976931348623157e308 = subtract -1.7976931348623157e308 1.0] "succeeded"
[error? try [subtract -1.7976931348623157e308 1.7976931348623157e308]] "succeeded"
[1.7976931348623157e308 = subtract -1.0 -1.7976931348623157e308] "succeeded"
[0.0 = subtract -1.0 -1.0] "succeeded"
[-1.0 = subtract -1.0 -4.94065645841247E-324] "succeeded"
[-1.0 = subtract -1.0 0.0] "succeeded"
[-1.0 = subtract -1.0 4.94065645841247E-324] "succeeded"
[-2.0 = subtract -1.0 1.0] "succeeded"
[-1.7976931348623157e308 = subtract -1.0 1.7976931348623157e308] "succeeded"
[1.7976931348623157e308 = subtract -4.94065645841247E-324 -1.7976931348623157e308] "succeeded"
[1.0 = subtract -4.94065645841247E-324 -1.0] "succeeded"
[0.0 = subtract -4.94065645841247E-324 -4.94065645841247E-324] "succeeded"
[-4.94065645841247E-324 = subtract -4.94065645841247E-324 0.0] "succeeded"
[-9.88131291682493E-324 = subtract -4.94065645841247E-324 4.94065645841247E-324] "succeeded"
[-1.0 = subtract -4.94065645841247E-324 1.0] "succeeded"
[-1.7976931348623157e308 = subtract -4.94065645841247E-324 1.7976931348623157e308] "succeeded"
[1.7976931348623157e308 = subtract 0.0 -1.7976931348623157e308] "succeeded"
[1.0 = subtract 0.0 -1.0] "succeeded"
[4.94065645841247E-324 = subtract 0.0 -4.94065645841247E-324] "succeeded"
[0.0 = subtract 0.0 0.0] "succeeded"
[-4.94065645841247E-324 = subtract 0.0 4.94065645841247E-324] "succeeded"
[-1.0 = subtract 0.0 1.0] "succeeded"
[-1.7976931348623157e308 = subtract 0.0 1.7976931348623157e308] "succeeded"
[1.7976931348623157e308 = subtract 4.94065645841247E-324 -1.7976931348623157e308] "succeeded"
[1.0 = subtract 4.94065645841247E-324 -1.0] "succeeded"
[9.88131291682493E-324 = subtract 4.94065645841247E-324 -4.94065645841247E-324] "succeeded"
[4.94065645841247E-324 = subtract 4.94065645841247E-324 0.0] "succeeded"
[0.0 = subtract 4.94065645841247E-324 4.94065645841247E-324] "succeeded"
[-1.0 = subtract 4.94065645841247E-324 1.0] "succeeded"
[-1.7976931348623157e308 = subtract 4.94065645841247E-324 1.7976931348623157e308] "succeeded"
[1.7976931348623157e308 = subtract 1.0 -1.7976931348623157e308] "succeeded"
[2.0 = subtract 1.0 -1.0] "succeeded"
[1.0 = subtract 1.0 4.94065645841247E-324] "succeeded"
[1.0 = subtract 1.0 0.0] "succeeded"
[1.0 = subtract 1.0 -4.94065645841247E-324] "succeeded"
[0.0 = subtract 1.0 1.0] "succeeded"
[-1.7976931348623157e308 = subtract 1.0 1.7976931348623157e308] "succeeded"
[error? try [subtract 1.7976931348623157e308 -1.7976931348623157e308]] "succeeded"
[1.7976931348623157e308 = subtract 1.7976931348623157e308 -1.0] "succeeded"
[1.7976931348623157e308 = subtract 1.7976931348623157e308 -4.94065645841247E-324] "succeeded"
[1.7976931348623157e308 = subtract 1.7976931348623157e308 0.0] "succeeded"
[1.7976931348623157e308 = subtract 1.7976931348623157e308 4.94065645841247E-324] "succeeded"
[1.7976931348623157e308 = subtract 1.7976931348623157e308 1.0] "succeeded"
[0.0 = subtract 1.7976931348623157e308 1.7976931348623157e308] "succeeded"
[0x0 = subtract -2147483648x-2147483648 -2147483648x-2147483648] "succeeded"
[-2147483647x-2147483647 = subtract -2147483648x-2147483648 -1x-1] "succeeded"
[-2147483648x-2147483648 = subtract -2147483648x-2147483648 0x0] "succeeded"
[0x0 = subtract -1x-1 -1x-1] "succeeded"
[-1x-1 = subtract -1x-1 0x0] "succeeded"
[-2x-2 = subtract -1x-1 1x1] "succeeded"
[2147483648x2147483648 = subtract 0x0 -2147483648x-2147483648] "succeeded"
[1x1 = subtract 0x0 -1x-1] "succeeded"
[0x0 = subtract 0x0 0x0] "succeeded"
[-1x-1 = subtract 0x0 1x1] "succeeded"
[-2147483647x-2147483647 = subtract 0x0 2147483647x2147483647] "succeeded"
[2x2 = subtract 1x1 -1x-1] "succeeded"
[1x1 = subtract 1x1 0x0] "succeeded"
[0x0 = subtract 1x1 1x1] "succeeded"
[2147483647x2147483647 = subtract 2147483647x2147483647 0x0] "succeeded"
[0x0 = subtract 2147483647x2147483647 2147483647x2147483647] "succeeded"
[0.0.0 = subtract 0.0.0 0.0.0] "succeeded"
[0.0.0 = subtract 0.0.0 0.0.1] "succeeded"
[0.0.0 = subtract 0.0.0 0.0.255] "succeeded"
[0.0.1 = subtract 0.0.1 0.0.0] "succeeded"
[0.0.0 = subtract 0.0.1 0.0.1] "succeeded"
[0.0.0 = subtract 0.0.1 0.0.255] "succeeded"
[0.0.255 = subtract 0.0.255 0.0.0] "succeeded"
[0.0.254 = subtract 0.0.255 0.0.1] "succeeded"
[0.0.0 = subtract 0.0.255 0.0.255] "succeeded"
[error? try [tangent -90]] "succeeded"
[error? try [tangent/radians pi / -2]] "succeeded"
[(negate square-root 3) = tangent -60] "succeeded"
[(negate square-root 3) = tangent/radians pi / -3] "succeeded"
[-1 = tangent -45] "succeeded"
[-1 = tangent/radians pi / -4] "succeeded"
[(square-root 3) / -3 = tangent -30] "succeeded"
[(square-root 3) / -3 = tangent/radians pi / -6] "succeeded"
[0 = tangent 0] "succeeded"
[0 = tangent/radians 0] "succeeded"
[(square-root 3) / 3 = tangent 30] "succeeded"
[(square-root 3) / 3 = tangent/radians pi / 6] "succeeded"
[1 = tangent 45] "succeeded"
[1 = tangent/radians pi / 4] "succeeded"
[(square-root 3) = tangent 60] "succeeded"
[(square-root 3) = tangent/radians pi / 3] "succeeded"
[error? try [tangent 90]] "succeeded"
[error? try [tangent/radians pi / 2]] "succeeded"
[
	n: 25000
	s4t: 0.0
	repeat l n [
		k: to decimal! l
		kt: tangent/radians k
		s4t: 1.0 / (kt * kt) + 1.0 / (k * k * k) + s4t
	]
	30.314520404 = round/to s4t 1e-9
] "succeeded"
[zero? 0] "succeeded"
[not zero? 1] "succeeded"
[not zero? -1] "succeeded"
[not zero? 2147483647] "succeeded"
[not zero? -2147483648] "succeeded"
[not zero? 9223372036854775807] "succeeded"
[not zero? -9223372036854775808] "succeeded"
[zero? 0.0] "succeeded"
[not zero? 1.7976931348623157e308] "succeeded"
[not zero? -1.7976931348623157e308] "succeeded"
[zero? 0x0] "succeeded"
[not zero? 1x0] "succeeded"
[not zero? -1x0] "succeeded"
[not zero? 2147483647x0] "succeeded"
[not zero? -2147483648x0] "succeeded"
[not zero? 0x1] "succeeded"
[not zero? 0x-1] "succeeded"
[not zero? 0x2147483647] "succeeded"
[not zero? 0x-2147483648] "succeeded"
[zero? #"^@"] "succeeded"
[not zero? #"^a"] "succeeded"
[not zero? #"^(ff)"] "succeeded"
[zero? $0] "succeeded"
[not zero? $0.01] "succeeded"
[not zero? -$0.01] "succeeded"
[not zero? $999999999999999.87] "succeeded"
[not zero? -$999999999999999.87] "succeeded"
[zero? 0:00] "succeeded"
[not zero? 0:00:0.000000001] "succeeded"
[not zero? -0:00:0.000000001] "succeeded"
[zero? 0.0.0] "succeeded"
[not zero? 1.0.0] "succeeded"
[not zero? 255.0.0] "succeeded"
[not zero? 0.1.0] "succeeded"
[not zero? 0.255.0] "succeeded"
[not zero? 0.0.1] "succeeded"
[not zero? 0.0.255] "succeeded"
[true == all []] "succeeded"
[:abs = all [:abs]] "succeeded"
[
	a-value: #{}
	same? a-value all [a-value]
] "succeeded"
[
	a-value: charset ""
	same? a-value all [a-value]
] "succeeded"
[
	a-value: []
	same? a-value all [a-value]
] "succeeded"
[
	a-value: none!
	same? a-value all [a-value]
] "succeeded"
[1/Jan/0000 = all [1/Jan/0000]] "succeeded"
[0.0 == all [0.0]] "succeeded"
[1.0 == all [1.0]] "succeeded"
[
	a-value: me@here.com
	same? a-value all [a-value]
] "succeeded"
[error? all [try [1 / 0]]] "succeeded"
[
	a-value: %""
	same? a-value all [a-value]
] "succeeded"
[
	a-value: does []
	same? :a-value all [:a-value]
] "succeeded"
[
	a-value: first [:a]
	:a-value == all [:a-value]
] "succeeded"
[#"^@" == all [#"^@"]] "succeeded"
[
	a-value: make image! 0x0
	same? a-value all [a-value]
] "succeeded"
[0 == all [0]] "succeeded"
[1 == all [1]] "succeeded"
[#a == all [#a]] "succeeded"
[
	a-value: first ['a/b]
	:a-value == all [:a-value]
] "succeeded"
[
	a-value: first ['a]
	:a-value == all [:a-value]
] "succeeded"
[true = all [true]] "succeeded"
[none? all [false]] "succeeded"
[$1 == all [$1]] "succeeded"
[same? :type? all [:type?]] "succeeded"
[none? all [#[none]]] "succeeded"
[
	a-value: make object! []
	same? :a-value all [:a-value]
] "succeeded"
[
	a-value: first [()]
	same? :a-value all [:a-value]
] "succeeded"
[same? get '+ all [get '+]] "succeeded"
[0x0 == all [0x0]] "succeeded"
[
	a-value: 'a/b
	:a-value == all [:a-value]
] "succeeded"
[
	a-value: make port! http://
	port? all [:a-value]
] "succeeded"
[/a == all [/a]] "succeeded"
[
	a-value: first [a/b:]
	:a-value == all [:a-value]
] "succeeded"
[
	a-value: first [a:]
	:a-value == all [:a-value]
] "succeeded"
[
	a-value: ""
	same? :a-value all [:a-value]
] "succeeded"
[
	a-value: make tag! ""
	same? :a-value all [:a-value]
] "succeeded"
[0:00 == all [0:00]] "succeeded"
[0.0.0 == all [0.0.0]] "succeeded"
[unset? all [()]] "succeeded"
['a == all ['a]] "succeeded"
[:abs = all [true :abs]] "succeeded"
[
	a-value: #{}
	same? a-value all [true a-value]
] "succeeded"
[
	a-value: charset ""
	same? a-value all [true a-value]
] "succeeded"
[
	a-value: []
	same? a-value all [true a-value]
] "succeeded"
[
	a-value: none!
	same? a-value all [true a-value]
] "succeeded"
[1/Jan/0000 = all [true 1/Jan/0000]] "succeeded"
[0.0 == all [true 0.0]] "succeeded"
[1.0 == all [true 1.0]] "succeeded"
[
	a-value: me@here.com
	same? a-value all [true a-value]
] "succeeded"
[error? all [true try [1 / 0]]] "succeeded"
[
	a-value: %""
	same? a-value all [true a-value]
] "succeeded"
[
	a-value: does []
	same? :a-value all [true :a-value]
] "succeeded"
[
	a-value: first [:a]
	same? :a-value all [true :a-value]
] "succeeded"
[#"^@" == all [true #"^@"]] "succeeded"
[
	a-value: make image! 0x0
	same? a-value all [true a-value]
] "succeeded"
[0 == all [true 0]] "succeeded"
[1 == all [true 1]] "succeeded"
[#a == all [true #a]] "succeeded"
[
	a-value: first ['a/b]
	:a-value == all [true :a-value]
] "succeeded"
[
	a-value: first ['a]
	:a-value == all [true :a-value]
] "succeeded"
[true = all [true true]] "succeeded"
[none? all [true false]] "succeeded"
[$1 == all [true $1]] "succeeded"
[same? :type? all [true :type?]] "succeeded"
[none? all [true #[none]]] "succeeded"
[
	a-value: make object! []
	same? :a-value all [true :a-value]
] "succeeded"
[
	a-value: first [()]
	same? :a-value all [true :a-value]
] "succeeded"
[same? get '+ all [true get '+]] "succeeded"
[0x0 == all [true 0x0]] "succeeded"
[
	a-value: 'a/b
	:a-value == all [true :a-value]
] "succeeded"
[
	a-value: make port! http://
	port? all [true :a-value]
] "succeeded"
[/a == all [true /a]] "succeeded"
[
	a-value: first [a/b:]
	:a-value == all [true :a-value]
] "succeeded"
[
	a-value: first [a:]
	:a-value == all [true :a-value]
] "succeeded"
[
	a-value: ""
	same? :a-value all [true :a-value]
] "succeeded"
[
	a-value: make tag! ""
	same? :a-value all [true :a-value]
] "succeeded"
[0:00 == all [true 0:00]] "succeeded"
[0.0.0 == all [true 0.0.0]] "succeeded"
[unset? all [true ()]] "succeeded"
['a == all [true 'a]] "succeeded"
[true = all [:abs true]] "succeeded"
[
	a-value: #{}
	true = all [a-value true]
] "succeeded"
[
	a-value: charset ""
	true = all [a-value true]
] "succeeded"
[
	a-value: []
	true = all [a-value true]
] "succeeded"
[
	a-value: none!
	true = all [a-value true]
] "succeeded"
[true = all [1/Jan/0000 true]] "succeeded"
[true = all [0.0 true]] "succeeded"
[true = all [1.0 true]] "succeeded"
[
	a-value: me@here.com
	true = all [a-value true]
] "succeeded"
[true = all [try [1 / 0] true]] "succeeded"
[
	a-value: %""
	true = all [a-value true]
] "succeeded"
[
	a-value: does []
	true = all [:a-value true]
] "succeeded"
[
	a-value: first [:a]
	true = all [:a-value true]
] "succeeded"
[true = all [#"^@" true]] "succeeded"
[
	a-value: make image! 0x0
	true = all [a-value true]
] "succeeded"
[true = all [0 true]] "succeeded"
[true = all [1 true]] "succeeded"
[true = all [#a true]] "succeeded"
[
	a-value: first ['a/b]
	true = all [:a-value true]
] "succeeded"
[
	a-value: first ['a]
	true = all [:a-value true]
] "succeeded"
[true = all [true true]] "succeeded"
[none? all [false true]] "succeeded"
[true = all [$1 true]] "succeeded"
[true = all [:type? true]] "succeeded"
[none? all [#[none] true]] "succeeded"
[
	a-value: make object! []
	true = all [:a-value true]
] "succeeded"
[
	a-value: first [()]
	true = all [:a-value true]
] "succeeded"
[true = all [get '+ true]] "succeeded"
[true = all [0x0 true]] "succeeded"
[
	a-value: 'a/b
	true = all [:a-value true]
] "succeeded"
[
	a-value: make port! http://
	true = all [:a-value true]
] "succeeded"
[true = all [/a true]] "succeeded"
[
	a-value: first [a/b:]
	true = all [:a-value true]
] "succeeded"
[
	a-value: first [a:]
	true = all [:a-value true]
] "succeeded"
[
	a-value: ""
	true = all [:a-value true]
] "succeeded"
[
	a-value: make tag! ""
	true = all [:a-value true]
] "succeeded"
[true = all [0:00 true]] "succeeded"
[true = all [0.0.0 true]] "succeeded"
[true = all [() true]] "succeeded"
[true = all ['a true]] "succeeded"
[
	success: true
	all [false success: false]
	success
] "succeeded"
[
	success: true
	all [none success: false]
	success
] "succeeded"
[
	success: false
	all [true success: true]
	success
] "succeeded"
[
	success: false
	all [1 success: true]
	success
] "succeeded"
[
	f1: does [all [return 1 2] 2]
	1 = f1
] "succeeded"
[
	1 = catch [
		all [
			throw 1
			2
		]
	]
] "succeeded"
[
	1 = loop 1 [
		all [
			break/return 1
			2
		]
	]
] "succeeded"
[all [true all [true]]] "succeeded"
[not all [true all [false]]] "succeeded"
[
	blk: [all blk]
	error? try blk
] "succeeded"
[none? any []] "succeeded"
[:abs = any [:abs]] "succeeded"
[
	a-value: #{}
	same? a-value any [a-value]
] "succeeded"
[
	a-value: charset ""
	same? a-value any [a-value]
] "succeeded"
[
	a-value: []
	same? a-value any [a-value]
] "succeeded"
[
	a-value: none!
	same? a-value any [a-value]
] "succeeded"
[1/Jan/0000 = any [1/Jan/0000]] "succeeded"
[0.0 == any [0.0]] "succeeded"
[1.0 == any [1.0]] "succeeded"
[
	a-value: me@here.com
	same? a-value any [a-value]
] "succeeded"
[error? any [try [1 / 0]]] "succeeded"
[
	a-value: %""
	same? a-value any [a-value]
] "succeeded"
[
	a-value: does []
	same? :a-value any [:a-value]
] "succeeded"
[
	a-value: first [:a]
	:a-value == any [:a-value]
] "succeeded"
[#"^@" == any [#"^@"]] "succeeded"
[
	a-value: make image! 0x0
	same? a-value any [a-value]
] "succeeded"
[0 == any [0]] "succeeded"
[1 == any [1]] "succeeded"
[#a == any [#a]] "succeeded"
[
	a-value: first ['a/b]
	:a-value == any [:a-value]
] "succeeded"
[
	a-value: first ['a]
	:a-value == any [:a-value]
] "succeeded"
[true = any [true]] "succeeded"
[none? any [false]] "succeeded"
[$1 == any [$1]] "succeeded"
[same? :type? any [:type?]] "succeeded"
[none? any [#[none]]] "succeeded"
[
	a-value: make object! []
	same? :a-value any [:a-value]
] "succeeded"
[
	a-value: first [()]
	same? :a-value any [:a-value]
] "succeeded"
[same? get '+ any [get '+]] "succeeded"
[0x0 == any [0x0]] "succeeded"
[
	a-value: 'a/b
	:a-value == any [:a-value]
] "succeeded"
[
	a-value: make port! http://
	port? any [:a-value]
] "succeeded"
[/a == any [/a]] "succeeded"
[
	a-value: first [a/b:]
	:a-value == any [:a-value]
] "succeeded"
[
	a-value: first [a:]
	:a-value == any [:a-value]
] "succeeded"
[
	a-value: ""
	same? :a-value any [:a-value]
] "succeeded"
[
	a-value: make tag! ""
	same? :a-value any [:a-value]
] "succeeded"
[0:00 == any [0:00]] "succeeded"
[0.0.0 == any [0.0.0]] "succeeded"
[none? any [()]] "succeeded"
['a == any ['a]] "succeeded"
[:abs = any [false :abs]] "succeeded"
[
	a-value: #{}
	same? a-value any [false a-value]
] "succeeded"
[
	a-value: charset ""
	same? a-value any [false a-value]
] "succeeded"
[
	a-value: []
	same? a-value any [false a-value]
] "succeeded"
[
	a-value: none!
	same? a-value any [false a-value]
] "succeeded"
[1/Jan/0000 = any [false 1/Jan/0000]] "succeeded"
[0.0 == any [false 0.0]] "succeeded"
[1.0 == any [false 1.0]] "succeeded"
[
	a-value: me@here.com
	same? a-value any [false a-value]
] "succeeded"
[error? any [false try [1 / 0]]] "succeeded"
[
	a-value: %""
	same? a-value any [false a-value]
] "succeeded"
[
	a-value: does []
	same? :a-value any [false :a-value]
] "succeeded"
[
	a-value: first [:a]
	:a-value == any [false :a-value]
] "succeeded"
[#"^@" == any [false #"^@"]] "succeeded"
[
	a-value: make image! 0x0
	same? a-value any [false a-value]
] "succeeded"
[0 == any [false 0]] "succeeded"
[1 == any [false 1]] "succeeded"
[#a == any [false #a]] "succeeded"
[
	a-value: first ['a/b]
	:a-value == any [false :a-value]
] "succeeded"
[
	a-value: first ['a]
	:a-value == any [false :a-value]
] "succeeded"
[true = any [false true]] "succeeded"
[none? any [false false]] "succeeded"
[$1 == any [false $1]] "succeeded"
[same? :type? any [false :type?]] "succeeded"
[none? any [false #[none]]] "succeeded"
[
	a-value: make object! []
	same? :a-value any [false :a-value]
] "succeeded"
[
	a-value: first [()]
	same? :a-value any [false :a-value]
] "succeeded"
[same? get '+ any [false get '+]] "succeeded"
[0x0 == any [false 0x0]] "succeeded"
[
	a-value: 'a/b
	:a-value == any [false :a-value]
] "succeeded"
[
	a-value: make port! http://
	port? any [false :a-value]
] "succeeded"
[/a == any [false /a]] "succeeded"
[
	a-value: first [a/b:]
	:a-value == any [false :a-value]
] "succeeded"
[
	a-value: first [a:]
	:a-value == any [false :a-value]
] "succeeded"
[
	a-value: ""
	same? :a-value any [false :a-value]
] "succeeded"
[
	a-value: make tag! ""
	same? :a-value any [false :a-value]
] "succeeded"
[0:00 == any [false 0:00]] "succeeded"
[0.0.0 == any [false 0.0.0]] "succeeded"
[none? any [false ()]] "succeeded"
['a == any [false 'a]] "succeeded"
[:abs = any [:abs false]] "succeeded"
[
	a-value: #{}
	same? a-value any [a-value false]
] "succeeded"
[
	a-value: charset ""
	same? a-value any [a-value false]
] "succeeded"
[
	a-value: []
	same? a-value any [a-value false]
] "succeeded"
[
	a-value: none!
	same? a-value any [a-value false]
] "succeeded"
[1/Jan/0000 = any [1/Jan/0000 false]] "succeeded"
[0.0 == any [0.0 false]] "succeeded"
[1.0 == any [1.0 false]] "succeeded"
[
	a-value: me@here.com
	same? a-value any [a-value false]
] "succeeded"
[error? any [try [1 / 0] false]] "succeeded"
[
	a-value: %""
	same? a-value any [a-value false]
] "succeeded"
[
	a-value: does []
	same? :a-value any [:a-value false]
] "succeeded"
[
	a-value: first [:a]
	:a-value == any [:a-value false]
] "succeeded"
[#"^@" == any [#"^@" false]] "succeeded"
[
	a-value: make image! 0x0
	same? a-value any [a-value false]
] "succeeded"
[0 == any [0 false]] "succeeded"
[1 == any [1 false]] "succeeded"
[#a == any [#a false]] "succeeded"
[
	a-value: first ['a/b]
	:a-value == any [:a-value false]
] "succeeded"
[
	a-value: first ['a]
	:a-value == any [:a-value false]
] "succeeded"
[true = any [true false]] "succeeded"
[none? any [false false]] "succeeded"
[$1 == any [$1 false]] "succeeded"
[same? :type? any [:type? false]] "succeeded"
[none? any [#[none] false]] "succeeded"
[
	a-value: make object! []
	same? :a-value any [:a-value false]
] "succeeded"
[
	a-value: first [()]
	same? :a-value any [:a-value false]
] "succeeded"
[same? get '+ any [get '+ false]] "succeeded"
[0x0 == any [0x0 false]] "succeeded"
[
	a-value: 'a/b
	:a-value == any [:a-value false]
] "succeeded"
[
	a-value: make port! http://
	port? any [:a-value false]
] "succeeded"
[/a == any [/a false]] "succeeded"
[
	a-value: first [a/b:]
	:a-value == any [:a-value false]
] "succeeded"
[
	a-value: first [a:]
	:a-value == any [:a-value false]
] "succeeded"
[
	a-value: ""
	same? :a-value any [:a-value false]
] "succeeded"
[
	a-value: make tag! ""
	same? :a-value any [:a-value false]
] "succeeded"
[0:00 == any [0:00 false]] "succeeded"
[0.0.0 == any [0.0.0 false]] "succeeded"
[none? any [() false]] "succeeded"
['a == any ['a false]] "succeeded"
[
	success: true
	any [true success: false]
	success
] "succeeded"
[
	success: true
	any [1 success: false]
	success
] "succeeded"
[
	success: false
	any [false success: true]
	success
] "succeeded"
[
	success: false
	any [none success: true]
	success
] "succeeded"
[
	f1: does [any [return 1 2] 2]
	1 = f1
] "succeeded"
[
	1 = catch [
		any [
			throw 1
			2
		]
	]
] "succeeded"
[
	1 = loop 1 [
		any [
			break/return 1
			2
		]
	]
] "succeeded"
[any [false any [true]]] "succeeded"
[none? any [false any [false]]] "succeeded"
[
	blk: [any blk]
	error? try blk
] "succeeded"
[error? try [apply 'type?/word []]] "succeeded"
[none? attempt [1 / 0]] "succeeded"
[1 = attempt [1]] "succeeded"
[unset? attempt []] "succeeded"
[
	f1: does [attempt [return 1 2] 2]
	1 == f1
] "succeeded"
[1 == catch [attempt [throw 1 2] 2]] "succeeded"
[1 == loop 1 [attempt [break/return 1 2] 2]] "succeeded"
[1 = attempt [attempt [1]]] "succeeded"
[none? attempt [attempt [1 / 0]]] "succeeded"
[
	blk: [attempt blk]
	none? attempt blk
] "succeeded"
[unset? while [true] [break]] "succeeded"
[none? while [true] [break/return none]] "succeeded"
[false = while [true] [break/return false]] "succeeded"
[true = while [true] [break/return true]] "succeeded"
[unset? while [true] [break/return ()]] "succeeded"
[error? while [true] [break/return try [1 / 0]]] "succeeded"
[
	success: false
	case [true [success: true]]
	success
] "succeeded"
[
	success: true
	case [false [success: false]]
	success
] "succeeded"
[not case []] "succeeded"
[logic! = type? case [true []]] "succeeded"
[case [true [true]]] "succeeded"
[not case [true [false]]] "succeeded"
[
	f1: does [case [return 1 2]]
	1 = f1
] "succeeded"
[
	1 = catch [
		case [throw 1 2]
		2
	]
] "succeeded"
[
	1 = loop 1 [
		case [break/return 1 2]
		2
	]
] "succeeded"
[
	s1: false
	s2: false
	case/all [
		true [s1: true]
		true [s2: true]
	]
	s1 and s2
] "succeeded"
[1 = case [true [case [true [1]]]]] "succeeded"
[
	blk: [case blk]
	error? try blk
] "succeeded"
[
	catch [
		throw success: true
		sucess: false
	]
	success
] "succeeded"
[unset? catch []] "succeeded"
[unset? catch [()]] "succeeded"
[error? catch [try [1 / 0]]] "succeeded"
[1 = catch [1]] "succeeded"
[unset? catch [throw ()]] "succeeded"
[error? catch [throw try [1 / 0]]] "succeeded"
[1 = catch [throw 1]] "succeeded"
[1 = catch [type? throw 1]] "failed"
[unset? catch/name [] 'catch] "succeeded"
[unset? catch/name [()] 'catch] "succeeded"
[error? catch/name [try [1 / 0]] 'catch] "succeeded"
[1 = catch/name [1] 'catch] "succeeded"
[unset? catch/name [throw/name () 'catch] 'catch] "succeeded"
[error? catch/name [throw/name try [1 / 0] 'catch] 'catch] "succeeded"
[1 = catch/name [throw/name 1 'catch] 'catch] "succeeded"
[
	num: 1
	catch [
		catch [throw 1]
		num: 2
	]
	2 = num
] "succeeded"
[
	num: 1
	catch [
		catch/name [
			throw 1
		] 'catch
		num: 2
	]
	1 = num
] "succeeded"
[
	num: 1
	catch/name [
		catch [throw 1]
		num: 2
	] 'catch
	2 = num
] "succeeded"
[
	num: 1
	catch/name [
		catch/name [
			throw/name 1 'name
		] 'name
		num: 2
	] 'name
	2 = num
] "succeeded"
[
	f: does [catch [return 1] 2]
	1 = f
] "succeeded"
[
	1 = loop 1 [
		catch [break/return 1 2]
		2
	]
] "succeeded"
[
	catch/quit [quit]
	true
] "succeeded"
[error? try [catch/quit [] do make error! ""]] "crashed"
[
	num: 1
	[1 num] = compose [(num) num]
] "succeeded"
[[] = compose []] "succeeded"
[
	blk: []
	append blk [try [1 / 0]]
	blk = compose blk
] "succeeded"
[
	blk: reduce [()]
	blk = compose blk
] "succeeded"
[
	f1: does [compose [(return 1)] 2]
	1 = f1
] "succeeded"
[1 = catch [compose [(throw 1 2)] 2]] "succeeded"
[1 = loop 1 [compose [(break/return 1 2)] 2]] "succeeded"
[block? compose [(try [1 / 0])]] "succeeded"
[
	blk: []
	not same? blk compose blk
] "succeeded"
[
	blk: [[]]
	same? first blk first compose blk
] "succeeded"
[
	blk: []
	same? blk first compose [(reduce [blk])]
] "succeeded"
[
	blk: []
	same? blk first compose/only [(blk)]
] "succeeded"
[
	num: 1
	[num 1] = compose [num (compose [(num)])]
] "succeeded"
[
	blk: [(compose blk)]
	error? try blk
] "succeeded"
[
	b: copy [] insert/dup b 1 32768 compose b
] "crashed"
[
	success: true
	loop 1 [continue success: false]
	success
] "succeeded"
[
	success: true
	repeat i 1 [continue success: false]
	success
] "succeeded"
[
	success: true
	cycle?: true
	while [cycle?] [cycle?: false continue success: false]
	success
] "succeeded"
[
	success: true
	foreach i [1] [continue success: false]
	success
] "succeeded"
[
	success: false
	do [success: true]
	success
] "succeeded"
[1 == do :abs -1] "succeeded"
[
	a-value: #{}
	same? a-value do a-value
] "succeeded"
[
	a-value: charset ""
	same? a-value do a-value
] "succeeded"
[unset? do []] "succeeded"
[:abs = do [:abs]] "succeeded"
[
	a-value: #{}
	same? a-value do reduce [a-value]
] "succeeded"
[
	a-value: charset ""
	same? a-value do reduce [a-value]
] "succeeded"
[
	a-value: []
	same? a-value do reduce [a-value]
] "succeeded"
[same? none! do reduce [none!]] "succeeded"
[1/Jan/0000 = do [1/Jan/0000]] "succeeded"
[0.0 == do [0.0]] "succeeded"
[1.0 == do [1.0]] "succeeded"
[
	a-value: me@here.com
	same? a-value do reduce [a-value]
] "succeeded"
[error? do [try [1 / 0]]] "succeeded"
[
	a-value: %""
	same? a-value do reduce [a-value]
] "succeeded"
[
	a-value: does []
	same? :a-value do [:a-value]
] "succeeded"
[
	a-value: first [:a-value]
	:a-value == do reduce [:a-value]
] "succeeded"
[#"^@" == do [#"^@"]] "succeeded"
[
	a-value: make image! 0x0
	same? a-value do reduce [a-value]
] "succeeded"
[0 == do [0]] "succeeded"
[1 == do [1]] "succeeded"
[#a == do [#a]] "succeeded"
[
	a-value: first ['a/b]
	:a-value == do [:a-value]
] "succeeded"
[
	a-value: first ['a]
	:a-value == do [:a-value]
] "succeeded"
[#[true] == do [#[true]]] "succeeded"
[#[false] == do [#[false]]] "succeeded"
[$1 == do [$1]] "succeeded"
[same? :type? do [:type?]] "succeeded"
[none? do [#[none]]] "succeeded"
[
	a-value: make object! []
	same? :a-value do reduce [:a-value]
] "succeeded"
[
	a-value: first [()]
	same? :a-value do [:a-value]
] "succeeded"
[same? get '+ do [get '+]] "succeeded"
[0x0 == do [0x0]] "succeeded"
[
	a-value: 'a/b
	:a-value == do [:a-value]
] "succeeded"
[
	a-value: make port! http://
	port? do reduce [:a-value]
] "succeeded"
[/a == do [/a]] "succeeded"
[
	a-value: first [a/b:]
	:a-value == do [:a-value]
] "succeeded"
[
	a-value: first [a:]
	:a-value == do [:a-value]
] "succeeded"
[
	a-value: ""
	same? :a-value do reduce [:a-value]
] "succeeded"
[
	a-value: make tag! ""
	same? :a-value do reduce [:a-value]
] "succeeded"
[0:00 == do [0:00]] "succeeded"
[0.0.0 == do [0.0.0]] "succeeded"
[unset? do [()]] "succeeded"
['a == do ['a]] "succeeded"
[
	a-value: none!
	same? a-value do a-value
] "succeeded"
[1/Jan/0000 == do 1/Jan/0000] "succeeded"
[0.0 == do 0.0] "succeeded"
[1.0 == do 1.0] "succeeded"
[
	a-value: me@here.com
	same? a-value do a-value
] "succeeded"
[error? try [do try [1 / 0] 1]] "succeeded"
[
	a-value: does [5]
	5 == do :a-value
] "succeeded"
[
	a: 12
	a-value: first [:a]
	:a == do :a-value
] "succeeded"
[#"^@" == do #"^@"] "succeeded"
[
	a-value: make image! 0x0
	same? a-value do a-value
] "succeeded"
[0 == do 0] "succeeded"
[1 == do 1] "succeeded"
[#a == do #a] "succeeded"
[
	a-value: first ['a/b]
	:a-value == do :a-value
] "succeeded"
[
	a-value: first ['a]
	a-value == do :a-value
] "succeeded"
[true = do true] "succeeded"
[false = do false] "succeeded"
[$1 == do $1] "succeeded"
[unset! = do :type? ()] "succeeded"
[none? do #[none]] "succeeded"
[
	a-value: make object! []
	same? :a-value do :a-value
] "succeeded"
[same? get '+ all [get '+]] "succeeded"
[0x0 == all [0x0]] "succeeded"
[
	a-value: first [(2)]
	2 == do :a-value
] "succeeded"
[
	a-value: 'a/b
	a: make object! [b: 1]
	a-value == do :a-value
] "succeeded"
[
	a-value: make port! http://
	port? do :a-value
] "succeeded"
[/a == all [/a]] "succeeded"
[
	a-value: first [a/b:]
	:a-value == do :a-value
] "succeeded"
[
	a-value: "1"
	1 == do :a-value
] "succeeded"
[unset? do ""] "succeeded"
[
	a-value: make tag! ""
	same? :a-value do :a-value
] "succeeded"
[0:00 == do 0:00] "succeeded"
[0.0.0 == do 0.0.0] "succeeded"
[
	a-value: 'b-value
	b-value: 1
	1 == do :a-value
] "succeeded"
[
	f1: does [do [return 1 2] 2]
	1 = f1
] "succeeded"
[
	f1: does [do "return 1 2" 2]
	1 = f1	
] "failed"
[
	1 = catch [
		do [
			throw 1
			2
		]
		2
	]
] "succeeded"
[
	1 = loop 1 [
		do [
			break/return 1
			2
		]
		2
	]
] "succeeded"
[
	success: false
	do/next [success: true success: false] 'b
	success
] "succeeded"
[
	all [
		1 = do/next [1 2] 'b
		[2] = b
	]
] "succeeded"
[unset? do/next [] 'b] "succeeded"
[error? do/next [try [1 / 0]] 'b] "succeeded"
[
	f1: does [do/next [return 1 2] 'b 2]
	1 = f1
] "succeeded"
[1 = do [do [1]]] "succeeded"
[1 = do "do [1]"] "succeeded"
[1 == 1] "succeeded"
[3 = do :do :add 1 2] "succeeded"
[
	blk: [do blk]
	error? try blk
] "succeeded"
[
	str: "do str"
	error? try [do str]
] "crashed"
[
	blk: [do/next blk 'b]
	error? try blk
] "succeeded"
[
	val1: try [do [1 / 0]]
	val2: try [do/next [1 / 0] 'b]
	val1/near = val2/near
] "succeeded"
[
	either true [success: true] [success: false]
	success
] "succeeded"
[
	either false [success: false] [success: true]
	success
] "succeeded"
[1 = either true [1] [2]] "succeeded"
[2 = either false [1] [2]] "succeeded"
[unset? either true [] [1]] "succeeded"
[unset? either false [1] []] "succeeded"
[error? either true [try [1 / 0]] []] "succeeded"
[error? either false [] [try [1 / 0]]] "succeeded"
[
	f1: does [
		either true [return 1 2] [2]
		2
	]
	1 = f1
] "succeeded"
[
	f1: does [
		either false [2] [return 1 2]
		2
	]
	1 = f1
] "succeeded"
[
	1 == catch [
		either true [throw 1 2] [2]
		2
	]
] "succeeded"
[
	1 == catch [
		either false [2] [throw 1 2]
		2
	]
] "succeeded"
[
	1 == loop 1 [
		either true [break/return 1 2] [2]
		2
	]
] "succeeded"
[
	1 == loop 1 [
		either false [2] [break/return 1 2]
		2
	]
] "succeeded"
[2 = either true [either false [1] [2]] []] "succeeded"
[1 = either false [] [either true [1] [2]]] "succeeded"
[
	blk: [either true blk []]
	error? try blk
] "succeeded"
[
	blk: [either false [] blk]
	error? try blk
] "succeeded"
[error? err: try [else] c: err c/id = 'no-value] "succeeded"
[
	success: true
	f1: does [exit success: false]
	f1
	success
] "succeeded"
[
	f1: does [exit]
	unset? f1
] "succeeded"
[error? try [exit]] "succeeded"
[
	success: true
	num: 0
	for i 1 10 1 [
		num: num + 1
		success: i = num and success
	]
	10 = num and success
] "succeeded"
[false = for i 1 1 1 [false]] "succeeded"
[
	num: 0
	for i 1 10 1 [num: i break]
	num = 1
] "succeeded"
[unset? for i 1 10 1 [break]] "succeeded"
[2 = for i 1 10 1 [break/return 2]] "succeeded"
[
	out: copy ""
	for i s: "abc" back tail s 1 [append out i]
	out = "abcbcc"
] "succeeded"
[
	out: copy []
	for i b: [1 2 3] back tail b 1 [append out i]
	out = [1 2 3 2 3 3]
] "succeeded"
[
	success: true
	for i 1 0 1 [success: false]
	success
] "succeeded"
[
	success: true
	for i b: [1] tail :b -1 [success: false]
	success
] "succeeded"
[
	f1: does [for i 1 1 1 [return 1 2] 2]
	1 = f1
] "succeeded"
[
	num: 0
	e: for i 1 2 1 [num: i try [1 / 0]]
	all [error? e num = 2]
] "succeeded"
[
	num: 0
	for i b: [1] tail b 1 [
		num: num + 1
		if num > 2 [break]
	]
	num <= 2
] "succeeded"
[
	num: 0
	for i 2147483647 2147483647 1 [
		num: num + 1
		either num > 1 [break/return false] [true]
	]
] "succeeded"
[
	num: 0
	for i 9223372036854775807 9223372036854775807 1 [
		num: num + 1
		either num > 1 [break/return false] [true]
	]
] "failed"
[
	num: 0
	for i -2147483648 -2147483648 -1 [
		num: num + 1
		either num > 1 [break/return false] [true]
	]
] "succeeded"
[
	num: 0
	for i -9223372036854775808 -9223372036854775808 -1 [
		num: num + 1
		either num > 1 [break/return false] [true]
	]
] "failed"
[[] = for i b: tail [1] head b -2 [i]] "succeeded"
[for i 1 1 1 b: [not same? 'i b/3]] "succeeded"
[
	num: 0
	for i 1 5 1 [
		for i 1 2 1 [num: num + 1]
	]
	num = 10
] "succeeded"
[
	blk: [for i 1 1 1 blk]
	error? try blk
] "succeeded"
[
	test: false
	for i 1 3 1 [
		if i = 2 [
			if test [break/return true]
			test: true
			i: 1
		]
	]
] "succeeded"
[
	test: false
	error? try [
		for i 1 2 [
			either test [i == 2] [
				test: true
				i: false
			]
		]
	]
] "succeeded"
[same? 'self for i 1 1 1 ['self]] "succeeded"
[
	str: "abcdef"
	out: copy ""
	forall str [append out first str]
	all [
		head? str
		out = head str
	]
] "succeeded"
[
	blk: [1 2 3 4]
	sum: 0
	forall blk [sum: sum + first blk]
	sum = 10
] "succeeded"
[
	blk: [1 2 3 4]
	true = forall blk [true]
] "succeeded"
[
	blk: [1 2 3 4]
	false = forall blk [false]
] "succeeded"
[
	str: "abcdef"
	forall str [if #"c" = char: str/1 [break]]
	char = #"c"
] "succeeded"
[
	blk: [1 2 3 4]
	unset? forall blk [break]
] "succeeded"
[
	blk: [1 2 3 4]
	1 = forall blk [break/return 1]
] "succeeded"
[
	success: true
	blk: []
	forall blk [success: false]
	success
] "succeeded"
[
	blk: [1]
	f1: does [forall blk [return 1 2]]
	1 = f1
] "succeeded"
[
	num: 0
	blk: [1 2]
	e: forall blk [num: first blk try [1 / 0]]
	all [error? e num = 2]
] "succeeded"
[
	num: 0
	blk1: [1 2 3 4 5]
	blk2: [6 7]
	forall blk1 [
		num: num + first blk1
		forall blk2 [num: num + first blk2]
	]
	num = 80
] "succeeded"
[
	out: copy ""
	str: "abcdef"
	foreach i str [append out i]
	out = str
] "succeeded"
[
	blk: [1 2 3 4]
	sum: 0
	foreach i blk [sum: sum + i]
	sum = 10
] "succeeded"
[
	blk: [1 2 3 4]
	true = foreach i blk [true]
] "succeeded"
[
	blk: [1 2 3 4]
	false = foreach i blk [false]
] "succeeded"
[
	str: "abcdef"
	foreach i str [
		num: i
		if i = #"c" [break]
	]
	num = #"c"
] "succeeded"
[
	blk: [1 2 3 4]
	unset? foreach i blk [break]
] "succeeded"
[
	blk: [1 2 3 4]
	1 = foreach i blk [break/return 1]
] "succeeded"
[
	success: true
	blk: []
	foreach i blk [success: false]
	success
] "succeeded"
[
	blk: [1]
	f1: does [foreach i blk [return 1 2]]
	1 = f1
] "succeeded"
[
	num: 0
	blk: [1 2]
	e: foreach i blk [num: i try [1 / 0]]
	all [error? e num = 2]
] "succeeded"
[foreach i [1] b: [not same? 'i b/3]] "succeeded"
[
	num: 0
	foreach i [1 2 3 4 5] [
		foreach i [1 2] [num: num + 1]
	]
	num = 10
] "succeeded"
[
	num: 0
	forever [
		num: num + 1
		if num = 10 [break]
	]
	num = 10
] "succeeded"
[unset? forever [break]] "succeeded"
[1 = forever [break/return 1]] "succeeded"
[
	f1: does [forever [return 1]]
	1 = f1
] "succeeded"
[
	num: 0
	e: forever [
		num: num + 1
		if num = 10 [break/return try [1 / 0]]
		try [1 / 0]
	]
	all [error? e num = 10]
] "succeeded"
[
	num1: 0
	num3: 0
	forever [
		if num1 = 5 [break]
		num2: 0
		forever [
			if num2 = 2 [break]
			num3: num3 + 1
			num2: num2 + 1
		]
		num1: num1 + 1
	]
	10 = num3
] "succeeded"
[
	blk: copy out: copy []
	for i 1 25 1 [append blk i]
	forskip blk 3 [append out blk/1]
	out = [1 4 7 10 13 16 19 22 25]
] "succeeded"
[
	blk: [1 2 3 4]
	true = forskip blk 1 [true]
] "succeeded"
[
	blk: [1 2 3 4]
	false = forskip blk 1 [false]
] "succeeded"
[
	str: "abcdef"
	forskip str 2 [if #"c" = char: str/1 [break]
	]
	char = #"c"
] "succeeded"
[
	blk: [1 2 3 4]
	unset? forskip blk 2 [break]
] "succeeded"
[
	blk: [1 2 3 4]
	1 = forskip blk 2 [break/return 1]
] "succeeded"
[
	success: true
	blk: []
	forskip blk 1 [success: false]
	success
] "succeeded"
[
	blk: [1]
	f1: does [forskip blk 2 [return 1 2]]
	1 = f1
] "succeeded"
[
	num: 0
	blk: [1 2]
	e: forskip blk 1 [num: first blk try [1 / 0]]
	all [error? e num = 2]
] "succeeded"
[
	num: 0
	blk1: [1 2 3 4 5]
	blk2: [6 7]
	forskip blk1 1 [
		num: num + first blk1
		forskip blk2 1 [num: num + first blk2]
	]
	num = 80
] "succeeded"
[halt] "crashed"
[
	success: false
	if true [success: true]
	success
] "succeeded"
[
	success: true
	if false [success: false]
	success
] "succeeded"
[1 = if true [1]] "succeeded"
[unset? if true []] "succeeded"
[error? if true [try [1 / 0]]] "succeeded"
[
	f1: does [
		if true [return 1 2]
		2
	]
	1 = f1
] "succeeded"
[if get 'abs [true]] "succeeded"
[if #{00} [true]] "succeeded"
[if make bitset! "" [true]] "succeeded"
[if [] [true]] "succeeded"
[if none! [true]] "succeeded"
[if number! [true]] "succeeded"
[if 1/1/0000 [true]] "succeeded"
[if 0.0 [true]] "succeeded"
[if 1.0 [true]] "succeeded"
[if -1.0 [true]] "succeeded"
[if me@rt.com [true]] "succeeded"
[if %"" [true]] "succeeded"
[if does [] [true]] "succeeded"
[if first [:first] [true]] "succeeded"
[if #"^@" [true]] "succeeded"
[if make image! 0x0 [true]] "succeeded"
[if 0 [true]] "succeeded"
[if 1 [true]] "succeeded"
[if -1 [true]] "succeeded"
[if #a [true]] "succeeded"
[if first ['a/b] [true]] "succeeded"
[if first ['a] [true]] "succeeded"
[if true [true]] "succeeded"
[none? if false [true]] "succeeded"
[if $1 [true]] "succeeded"
[if :type? [true]] "succeeded"
[none? if none [true]] "succeeded"
[if make object! [] [true]] "succeeded"
[if get '+ [true]] "succeeded"
[if 0x0 [true]] "succeeded"
[if first [()] [true]] "succeeded"
[if 'a/b [true]] "succeeded"
[if make port! http:// [true]] "succeeded"
[if /a [true]] "succeeded"
[if first [a/b:] [true]] "succeeded"
[if first [a:] [true]] "succeeded"
[if "" [true]] "succeeded"
[if to tag! "" [true]] "succeeded"
[if 0:00 [true]] "succeeded"
[if 0.0.0 [true]] "succeeded"
[if  http:// [true]] "succeeded"
[if 'a [true]] "succeeded"
[none? if true [if false [1]]] "succeeded"
[1 = if true [if true [1]]] "succeeded"
[
	blk: [if true blk]
	error? try blk
] "succeeded"
[
	num: 0
	loop 10 [num: num + 1] 
	10 = num
] "succeeded"
[false = loop 1 [false]] "succeeded"
[
	num: 0
	loop 10 [num: num + 1 break]
	num = 1
] "succeeded"
[loop 1 [error? break/return true false]] "failed"
[loop 1 [type? a: break/return true false]] "failed"
[unset? loop 10 [break]] "succeeded"
[2 = loop 10 [break/return 2]] "succeeded"
[
	success: true
	loop 0 [success: false]
	success
] "succeeded"
[
	success: true	
	loop -1 [success: false]
	success
] "succeeded"
[
	f1: does [loop 1 [return 1 2]]
	1 = f1
] "succeeded"
[
	num: 0
	e: loop 2 [num: num + 1 try [1 / 0]]
	all [error? e num = 2]
] "succeeded"
[
	num: 0
	loop 5 [
		loop 2 [num: num + 1]
	]
	num = 10
] "succeeded"
[
	f: func [x] [
		loop 1 [
			if x = 1 [
				use [break] [
					break: 1
					f 2
					1 = get/any 'break						
				] 
			]
		]
	]
	f 1
] "succeeded"
[
	integer? do does [map-each v [][] 1]
] "succeeded"
[[1 2] = reduce [1 1 + 1]] "succeeded"
[
	success: false
	reduce [success: true]
	success
] "succeeded"
[[] = reduce []] "succeeded"
[unset? first reduce [()]] "succeeded"
["1 + 1" = reduce "1 + 1"] "succeeded"
[error? first reduce [try [1 / 0]]] "succeeded"
[
	f1: does [reduce [return 1 2] 2]
	1 = f1
] "failed"
[1 = first reduce [first reduce [1]]] "succeeded"
[
	blk: [reduce blk]
	error? try blk
] "succeeded"
[
	remove-each i s: [1 2] [true]
	empty? s
] "succeeded"
[
	remove-each i s: [1 2] [false]
	[1 2] = s
] "succeeded"
[
	success: true
	num: 0
	repeat i 10 [
		num: num + 1
		success: i = num and success
	]
	10 = num and success
] "succeeded"
[false = repeat i 1 [false]] "succeeded"
[
	num: 0
	repeat i 10 [num: i break]
	num = 1
] "succeeded"
[unset? repeat i 10 [break]] "succeeded"
[2 = repeat i 10 [break/return 2]] "succeeded"
[
	out: copy ""
	repeat i "abc" [append out i]
	out = "abcbcc"
] "succeeded"
[
	out: copy []
	repeat i [1 2 3] [append out i]
	out = [1 2 3 2 3 3]
] "succeeded"
[
	success: true
	repeat i 0 [success: false]
	success
] "succeeded"
[
	success: true
	repeat i -1 [success: false]
	success
] "succeeded"
[
	f1: does [repeat i 1 [return 1 2]]
	1 = f1
] "succeeded"
[
	num: 0
	e: repeat i 2 [num: i try [1 / 0]]
	all [error? e num = 2]
] "succeeded"
[repeat i 1 b: [not same? 'i b/3]] "succeeded"
[
	num: 0
	repeat i 5 [
		repeat i 2 [num: num + 1]
	]
	num = 10
] "succeeded"
[
	test: false
	error? try [
		repeat i 2 [
			either test [i == 2] [
				test: true
				i: false
			]
		]
	]
] "succeeded"
[
	f1: does [return 1 2]
	1 = f1
] "succeeded"
[
	success: true
	f1: does [return 1 success: false]
	f1
	success
] "succeeded"
[
	f1: does [return ()]
	unset? f1
] "succeeded"
[
	f1: does [return try [1 / 0]]
	error? f1
] "succeeded"
[error? try [return 1]] "succeeded"
[
	11 = switch 1 [
		1 [11]
		2 [12]
	]
] "succeeded"
[
	12 = switch 2 [
		1 [11]
		2 [12]
	]
] "succeeded"
[unset? switch 1 [1 []]] "succeeded"
[
	cases: reduce [1 head insert copy [] try [1 / 0]]
	error? switch 1 cases
] "succeeded"
[
	catch [
		throw success: true
		sucess: false
	]
	success
] "succeeded"
[
	e: try [1 / 0]
	e/id = 'zero-divide
] "succeeded"
[
	success: true
	error? try [
		1 / 0
		success: false
	]
	success
] "succeeded"
[
	success: true
	f1: does [
		1 / 0
		success: false
	]
	error? try [f1]
	success
] "succeeded"
[error? try [throw none]] "succeeded"
[error? try [throw/name none 'none]] "succeeded"
[error? try [return none]] "succeeded"
[error? try [exit]] "succeeded"
[error? try/except [make error! ""][0]] "succeeded"
[try/except [do make error! ""][true]] "succeeded"
[
	success: false
	unless false [success: true]
	success
] "succeeded"
[
	success: true
	unless true [success: false]
	success
] "succeeded"
[1 = unless false [1]] "succeeded"
[none? unless true [1]] "succeeded"
[unset? unless false []] "succeeded"
[error? unless false [try [1 / 0]]] "succeeded"
[
	f1: does [
		unless false [return 1 2]
		2
	]
	1 = f1
] "succeeded"
[
	num: 0
	until [num: num + 1 num > 9]
	num = 10
] "succeeded"
[1 = until [1]] "succeeded"
[unset? until [break true]] "succeeded"
[1 = until [break/return 1]] "succeeded"
[
	f1: does [until [return 1]]
	1 = f1
] "succeeded"
[1 = until [try [1 / 0] 1]] "succeeded"
[
	num1: 0
	num3: 0
	until [
		num2: 0
		until [
			num3: num3 + 1
			1 < num2: num2 + 1
		]
		4 < num1: num1 + 1
	]
	10 = num3
] "succeeded"
[wait 0:0:0.3 true] "succeeded"
[
	num: 0
	while [num < 10] [num: num + 1]
	num = 10
] "succeeded"
[
	num: 0 
	1 = while [num < 1] [num: num + 1]
] "succeeded"
[none? while [false] []] "succeeded"
[
	success: true
	while [false] [success: false]
	success
] "succeeded"
[unset? while [true] [break]] "succeeded"
[unset? while [break] []] "succeeded"
[1 = while [true] [break/return 1]] "succeeded"
[1 = while [break/return 1] [2]] "succeeded"
[
	num: 0
	while [true] [num: 1 break num: 2]
	num = 1
] "succeeded"
[
	f1: does [while [true] [return 1]]
	1 = f1
] "succeeded"
[do does [while [return true] [return false]]] "failed"
[
	num: 0
	e: while [num < 10] [num: num + 1 try [1 / 0]]
	all [error? e num = 10]
] "succeeded"
[
	num1: 0
	num3: 0
	while [num1 < 5] [
		num2: 0
		while [num2 < 2] [
			num3: num3 + 1
			num2: num2 + 1
		]
		num1: num1 + 1
	]
	10 = num3
] "succeeded"
[
	f: func [] [
		func [x] [
			if x = 1 [
				do f 2
				x = 1
			]
		]
	]
	do f 1
] "succeeded"
[
	a: none
	unset 'a
	not value? 'a
] "succeeded"
[
	a: none
	unset 'a
	unset 'a
	not value? 'a
] "succeeded"
[
	a: 1
	use [a] [a: 2]
	a = 1
] "succeeded"
[
	a: 1
	error? try [use 'a [a: 2]]
	a = 1
] "succeeded"
[
	1 = loop 1 [
		use [a] [break/return 1]
		2
	]
] "succeeded"
[
	1 = catch [
		use [a] [throw 1]
		2
	]
] "succeeded"
[
	error? try [
		use [a] [1 / 0]
		2
	]
] "succeeded"
[
	f: func [] [
		use [a] [return 1]
		2
	]
	1 = f
] "failed"
[
	f: func [] [
		use [] [exit]
		42
	]
	unset? f
] "failed"
[false == value? 'nonsense] "succeeded"
[true == value? 'value?] "succeeded"
[a: copy [] until [error? try [a: append/only copy [] a]]] "crashed"
[
	port: open/new %pokus.txt
	append port newline
] "crashed"
[block? append copy [] ()] "succeeded"
[
	blk: []
	same? blk at blk 1
] "succeeded"
[
	blk: []
	same? blk at blk 2147483647
] "succeeded"
[
	blk: []
	same? blk at blk 0
] "succeeded"
[
	blk: []
	same? blk at blk -1
] "succeeded"
[
	blk: []
	same? blk at blk -2147483648
] "succeeded"
[
	blk: tail [1 2 3]
	same? blk at blk 1
] "succeeded"
[
	blk: tail [1 2 3]
	same? blk at blk 0
] "succeeded"
[
	blk: tail [1 2 3]
	equal? [3] at blk -1
] "succeeded"
[
	blk: tail [1 2]
	same? blk at blk 2147483647
] "succeeded"
[
	blk: [1 2]
	same? blk at blk -2147483647
] "succeeded"
[
	blk: [1 2]
	same? blk at blk -2147483648
] "succeeded"
[
	str: ""
	same? str at str 1
] "succeeded"
[
	str: ""
	same? str at str 2147483647
] "succeeded"
[
	str: ""
	same? str at str 0
] "succeeded"
[
	str: ""
	same? str at str -1
] "succeeded"
[
	str: ""
	same? str at str -2147483648
] "succeeded"
[
	str: tail "123"
	same? str at str 1
] "succeeded"
[
	str: tail "123"
	same? str at str 0
] "succeeded"
[
	str: tail "123"
	equal? "3" at str -1
] "succeeded"
[
	str: tail "12"
	same? str at str 2147483647
] "succeeded"
[
	str: "12"
	same? str at str -2147483647
] "succeeded"
[
	str: "12"
	same? str at str -2147483648
] "succeeded"
[
	a: [1]
	same? a back a
] "succeeded"
[
	a: tail [1]
	same? head a back a
] "succeeded"
[
	a: 'b/c
	same? a back a
] "succeeded"
[
	a: tail 'b/c
	same? head a back back a
] "succeeded"
[
	a: tail "1"
	same? head a back a
] "succeeded"
[
	a: "1"
	same? a back a
] "succeeded"
[
	blk1: at copy [1 2 3 4 5] 3
	blk2: at copy [1 2 3 4 5] 3
	change/part blk1 6 -2147483647
	change/part blk2 6 -2147483648
	equal? head blk1 head blk2
] "succeeded"
[equal? "tr" change/part "str" "" 1] "succeeded"
[[] = clear []] "succeeded"
[[] = clear copy [1]] "succeeded"
[
	block: at copy [1 2 3 4] 3
	clear block
	[1 2] == head clear block
] "succeeded"
[none == clear none] "succeeded"
[
	blk: []
	all [
		blk = copy blk
		not same? blk copy blk
	]
] "succeeded"
[
	blk: [1]
	all [
		blk = copy blk
		not same? blk copy blk
	]
] "succeeded"
[[1] = copy/part tail [1] -1] "succeeded"
[[1] = copy/part tail [1] -2147483647] "succeeded"
[[1] = copy/part tail [1] -2147483648] "succeeded"
[error? try [copy/part tail [1] -9223372036854775808]] "succeeded"
[[] = copy/part [] 0] "succeeded"
[[] = copy/part [] 1] "succeeded"
[[] = copy/part [] 2147483647] "succeeded"
[error? try [copy/part [] 9223372036854775807]] "succeeded"
[error? try [copy none]] "succeeded"
[
	a: copy []
	insert/only a a
	error? try [copy/deep a]
	true
] "succeeded"
[equal? make typeset! [decimal!] difference make typeset! [decimal! integer!] make typeset! [integer!]] "succeeded"
[empty? []] "succeeded"
[
	blk: tail [1]
	clear head blk
	empty? blk
] "succeeded"
[empty? none] "succeeded"
[empty? exclude [1 2] [2 1]] "succeeded"
[equal? make typeset! [decimal!] exclude make typeset! [decimal! integer!] make typeset! [integer!]] "succeeded"
[none? find none 1] "succeeded"
[none? find [] 1] "succeeded"
[
	blk: [1]
	same? blk find blk 1
] "succeeded"
[1 == index? []] "succeeded"
[2 == index? next [a]] "succeeded"
[none? index? none] "succeeded"
[
	a: make block! 0
	insert a 0
	a == [0]
] "succeeded"
[
	a: [0]
	b: make block! 0
	insert b first a
	a == b
] "succeeded"
[
	a: [0]
	b: make block! 0
	insert b a
	a == b
] "succeeded"
[
	a: make paren! 0
	insert a 0
	a == first [(0)]
] "succeeded"
[
	a: first [(0)]
	b: make paren! 0
	insert b first a
	a == b
] "succeeded"
[
	a: first [(0)]
	b: make paren! 0
	insert b a
	a == b
] "succeeded"
[
	a: make path! 0
	insert a 0
	a == to path! [0]
] "succeeded"
[
	a: to path! [0]
	b: make path! 0
	insert b first a
	a == b
] "succeeded"
[
	a: to path! [0]
	b: make path! 0
	insert :b a
	a == b
] "succeeded"
[
	a: make lit-path! 0
	insert :a 0
	:a == to lit-path! [0]
] "succeeded"
[
	a: to lit-path! [0]
	b: make lit-path! 0
	insert :b first :a
	:a == :b
] "succeeded"
[
	a: to lit-path! [0]
	b: make lit-path! 0
	insert :b :a
	:a == :b
] "succeeded"
[
	a: make set-path! 0
	insert :a 0
	:a == to set-path! [0]
] "succeeded"
[
	a: to set-path! [0]
	b: make set-path! 0
	insert :b first :a
	:a == :b
] "succeeded"
[
	a: to set-path! [0]
	b: make set-path! 0
	insert :b :a
	:a == :b
] "succeeded"
[
	a: make string! 0
	insert a #"0"
	a == "0"
] "succeeded"
[
	a: "0"
	b: make string! 0
	insert b first a
	a == b
] "succeeded"
[
	a: "0"
	b: make string! 0
	insert b a
	a == b
] "succeeded"
[
	a: make file! 0
	insert a #"0"
	a == %"0"
] "succeeded"
[
	a: %"0"
	b: make file! 0
	insert b first a
	a == b
] "succeeded"
[
	a: %"0"
	b: make file! 0
	insert b a
	a == b
] "succeeded"
[
	a: make email! 0
	insert a #"0"
	a == #[email! "0"]
] "succeeded"
[
	a: #[email! "0"]
	b: make email! 0
	insert b first a
	a == b
] "succeeded"
[
	a: #[email! "0"]
	b: make email! 0
	insert b a
	a == b
] "succeeded"
[
	a: make url! 0
	insert a #"0"
	a == #[url! "0"]
] "succeeded"
[
	a: #[url! "0"]
	b: make url! 0
	insert b first a
	a == b
] "succeeded"
[
	a: #[url! "0"]
	b: make url! 0
	insert b a
	a == b
] "succeeded"
[
	a: make tag! 0
	insert a #"0"
	a == <0>
] "succeeded"
[
	a: <0>
	b: make tag! 0
	insert b first a
	a == b
] "succeeded"
[
	a: <0>
	b: make tag! 0
	insert b a
	a == b
] "failed"
[
	a: #{00}
	b: make binary! 0
	insert b first a
	a == b
] "succeeded"
[
	a: #{00}
	b: make binary! 0
	insert b a
	a == b
] "succeeded"
[
	a: make block! 0
	b: at [1 2 3 4 5 6 7 8 9] 5
	insert/part a b 1
	a == [5]
] "succeeded"
[
	a: make block! 0
	b: at [1 2 3 4 5 6 7 8 9] 5
	insert/part a b 5
	a == [5 6 7 8 9]
] "succeeded"
[
	a: make block! 0
	b: at [1 2 3 4 5 6 7 8 9] 5
	insert/part a b 6
	a == [5 6 7 8 9]
] "succeeded"
[
	a: make block! 0
	b: at [1 2 3 4 5 6 7 8 9] 5
	insert/part a b 2147483647
	a == [5 6 7 8 9]
] "succeeded"
[
	a: make block! 0
	b: at [1 2 3 4 5 6 7 8 9] 5
	insert/part a b 0
	empty? a
] "succeeded"
[
	a: make block! 0
	b: at [1 2 3 4 5 6 7 8 9] 5
	insert/part a b -1
	a == [4]
] "succeeded"
[
	a: make block! 0
	b: at [1 2 3 4 5 6 7 8 9] 5
	insert/part a b -1
	a == [4]
] "succeeded"
[
	a: make block! 0
	b: at [1 2 3 4 5 6 7 8 9] 5
	insert/part a b -1
	a == [4]
] "succeeded"
[
	a: make block! 0
	b: at [1 2 3 4 5 6 7 8 9] 5
	insert/part a b -4
	a == [1 2 3 4]
] "succeeded"
[
	a: make block! 0
	b: at [1 2 3 4 5 6 7 8 9] 5
	insert/part a b -5
	a == [1 2 3 4]
] "succeeded"
[
	a: make block! 0
	b: at [1 2 3 4 5 6 7 8 9] 5
	insert/part a b -2147483648
	a == [1 2 3 4]
] "succeeded"
[
	a: make block! 0
	b: []
	insert/only a b
	same? b first a
] "succeeded"
[
	a: make block! 0
	insert/dup a 0 2
	a == [0 0]
] "succeeded"
[
	a: make block! 0
	insert/dup a 0 0
	a == []
] "succeeded"
[
	a: make block! 0
	insert/dup a 0 -1
	a == []
] "succeeded"
[
	a: make block! 0
	insert/dup a 0 -2147483648
	empty? a
] "succeeded"
[equal? make typeset! [integer!] intersect make typeset! [decimal! integer!] make typeset! [integer!]] "succeeded"
[value? try [last #"c"]] "succeeded"
[value? try [last 7]] "succeeded"
[none? length? none] "succeeded"
[
	blk: [1]
	same? tail blk next blk
] "succeeded"
[
	blk: tail [1]
	same? blk next blk
] "succeeded"
[none? first []] "succeeded"
[none? second []] "succeeded"
[none? third []] "succeeded"
[none? fourth []] "succeeded"
[none? fifth []] "succeeded"
[none? sixth []] "succeeded"
[none? seventh []] "succeeded"
[none? eighth []] "succeeded"
[none? ninth []] "succeeded"
[none? tenth []] "succeeded"
[1 = first [1 2 3 4 5 6 7 8 9 10 11]] "succeeded"
[2 = second [1 2 3 4 5 6 7 8 9 10 11]] "succeeded"
[3 = third [1 2 3 4 5 6 7 8 9 10 11]] "succeeded"
[4 = fourth [1 2 3 4 5 6 7 8 9 10 11]] "succeeded"
[5 = fifth [1 2 3 4 5 6 7 8 9 10 11]] "succeeded"
[6 = sixth [1 2 3 4 5 6 7 8 9 10 11]] "succeeded"
[7 = seventh [1 2 3 4 5 6 7 8 9 10 11]] "succeeded"
[8 = eighth [1 2 3 4 5 6 7 8 9 10 11]] "succeeded"
[9 = ninth [1 2 3 4 5 6 7 8 9 10 11]] "succeeded"
[10 = tenth [1 2 3 4 5 6 7 8 9 10 11]] "succeeded"
[
	t: none
	parse "<tag>text</tag>" [thru <tag> copy t to </tag>]
	t == "text"
] "succeeded"
[
	i: 0
	parse "a." [any [thru "a" (i: i + 1 j: if i > 1 [[end skip]]) j]]
	i == 1
] "succeeded"
[
	parse "" [(i: 0) 3 [["a" |] (i: i + 1)]]
	i == 3
] "succeeded"
[
	a: [a]
	error? try [parse [] a]
] "succeeded"
[
	i: 0
	parse "a" [any [(i: i + 1)]]
	i == 1
] "succeeded"
[
	i: 0
	parse "a" [while [(i: i + 1 j: if i = 2 [[fail]]) j]]
	i == 2
] "succeeded"
[
	b: "abc"
	c: ["a" | "b"]
	a2: [any [b e: (d: [:e]) then fail | [c | (d: [fail]) fail]] d]
	a4: [any [b then e: (d: [:e]) fail | [c | (d: [fail]) fail]] d]
	equal? parse "aaaaabc" a2 parse "aaaaabc" a4
] "succeeded"
[parse "1" [not not "1" "1"]] "succeeded"
[parse "1" [not [not "1"] "1"]] "succeeded"
[false == parse "" [not 0 "a"]] "succeeded"
[false == parse "" [not [0 "a"]]] "succeeded"
[parse "" [not "a"]] "succeeded"
[parse "" [not skip]] "succeeded"
[parse "" [not fail]] "succeeded"
[parse "12" ["" to end]] "failed"
[error? try [pick at [1 2 3 4 5] 3 -9223372036854775808]] "succeeded"
[none? pick at [1 2 3 4 5] 3 -2147483648] "succeeded"
[none? pick at [1 2 3 4 5] 3 -2147483647] "succeeded"
[none? pick at [1 2 3 4 5] 3 -3] "succeeded"
[none? pick at [1 2 3 4 5] 3 -2] "succeeded"
[1 = pick at [1 2 3 4 5] 3 -1] "succeeded"
[2 = pick at [1 2 3 4 5] 3 0] "succeeded"
[3 = pick at [1 2 3 4 5] 3 1] "succeeded"
[4 = pick at [1 2 3 4 5] 3 2] "succeeded"
[5 = pick at [1 2 3 4 5] 3 3] "succeeded"
[none? pick at [1 2 3 4 5] 3 4] "succeeded"
[none? pick at [1 2 3 4 5] 3 2147483647] "succeeded"
[error? try [pick at [1 2 3 4 5] 3 9223372036854775807]] "succeeded"
[error? try [pick at "12345" 3 -9223372036854775808]] "succeeded"
[none? pick at "12345" 3 -2147483648] "succeeded"
[none? pick at "12345" 3 -2147483647] "succeeded"
[none? pick at "12345" 3 -3] "succeeded"
[none? pick at "12345" 3 -2] "succeeded"
[#"1" = pick at "12345" 3 -1] "succeeded"
[#"2" = pick at "12345" 3 0] "succeeded"
[#"3" = pick at "12345" 3 1] "succeeded"
[#"4" = pick at "12345" 3 2] "succeeded"
[#"5" = pick at "12345" 3 3] "succeeded"
[none? pick at "12345" 3 4] "succeeded"
[none? pick at "12345" 3 2147483647] "succeeded"
[error? try [pick at "12345" 3 9223372036854775807]] "succeeded"
[
	poke a: #{00} 1 pick b: #{11} 1
	a == b
] "succeeded"
[[] = remove []] "succeeded"
[[] = head remove [1]] "succeeded"
[none = remove none] "succeeded"
[
	a-bitset: charset "a"
	remove/part a-bitset "a"
	none? find a-bitset #"a"
] "succeeded"
[
	a-bitset: charset "a"
	remove/part a-bitset to integer! #"a"
	none? find a-bitset #"a"
] "succeeded"
[4 == select [1 2 3 4 5 6] [1 2 3]] "failed"
[
	blk: []
	same? blk skip blk 0
] "succeeded"
[
	blk: []
	same? blk skip blk 2147483647
] "succeeded"
[
	blk: []
	same? blk skip blk -1
] "succeeded"
[
	blk: []
	same? blk skip blk -2147483648
] "succeeded"
[
	blk: next [1 2 3]
	same? blk skip blk 0
] "succeeded"
[
	blk: next [1 2 3]
	equal? [3] skip blk 1
] "succeeded"
[
	blk: next [1 2 3]
	same? tail blk skip blk 2
] "succeeded"
[
	blk: next [1 2 3]
	same? tail blk skip blk 2147483647
] "succeeded"
[
	blk: at [1 2 3] 3
	same? tail blk skip blk 2147483646
] "succeeded"
[
	blk: at [1 2 3] 4
	same? tail blk skip blk 2147483645
] "succeeded"
[
	blk: [1 2 3]
	same? head blk skip blk -1
] "succeeded"
[
	blk: [1 2 3]
	same? head blk skip blk -2147483647
] "succeeded"
[
	blk: next [1 2 3]
	same? head blk skip blk -2147483648
] "succeeded"
[tail? []] "succeeded"
[
	blk: tail [1]
	clear head blk
	tail? blk
] "succeeded"
[strict-equal? ["A" "a"] sort ["A" "a"]] "succeeded"
[strict-equal? ["a" "A"] sort ["a" "A"]] "succeeded"
[strict-equal? ["A" "a"] sort/case ["a" "A"]] "succeeded"
[strict-equal? ["A" "a"] sort/case ["A" "a"]] "succeeded"
[
	set [c d] sort reduce [a: "a" b: "a"]
	all [
		same? c a
		same? d b
		not same? c b
		not same? d a
	]
] "succeeded"
[equal? [1 9 1 5 1 7] sort/skip/compare [1 9 1 5 1 7] 2 1] "succeeded"
[equal? make typeset! [decimal! integer!] union make typeset! [decimal!] make typeset! [integer!]] "succeeded"
[
	a: compress "a"
	b: encloak a "a"
	equal? a decloak b "a"
] "succeeded"
[value? try [decompress #{AAAAAAAAAAAAAAAAAAAA}]] "succeeded"
[block? load/all "1"] "succeeded"
[error? try [load "':a"]] "succeeded"
[error? try [load "':a:"]] "succeeded"
[
	a: [ < ]
	a = load mold a
] "succeeded"
[error? try [load "1xyz#"]] "succeeded"
[error? try [load/next "1"]] "succeeded"
[
	any [
		error? try [load "9999999999999999999"]
		greater? load "9999999999999999999" load "9223372036854775807"
	]
] "failed, not a logic value"
[
	a: copy []
	insert/only a a
	string? mold a
] "succeeded"
[
	a: first [()]
	insert/only a a
	string? mold a
] "succeeded"
[
	a: make object! [a: self]
	string? mold a
] "succeeded"
[
	c: closure [a] [print a]
	equal? "make closure! [[a][print a]]" mold :c
] "succeeded"
[
	n: 1
	forever [
		a: copy []
		if error? try [
			loop n [a: append/only copy [] a]
			mold a
		][break/return true]
		n: n * 2
	]
] "succeeded"
["()" = mold quote ()] "succeeded"
[
	success: library? a-library: load/library case [
		; this needs to be system-specific
		system/version/4 = 2 [%libc.dylib]					; OSX
		system/version/4 = 3 [%kernel32.dll]					; Windows
		all [system/version/4 = 4 system/version/5 = 2] [%/lib/libc.so.6]	; Linux libc6
		system/version/4 = 4 [%libc.so]						; Linux
		system/version/4 = 7 [%libc.so]						; FreeBSD
		system/version/4 = 8 [%libc.so]						; NetBSD
		system/version/4 = 9 [%libc.so]						; OpenBSD
		system/version/4 = 10 [%libc.so]					; Solaris
	]
	free a-library
	success
] "failed, error was caused in the test code"
[
	success: routine? case [
		; this needs to be system-specific
		system/version/4 = 2 [							; OSX
			a-library: load/library %libc.dylib
			make routine! [
				tv [struct! []]
				tz [struct! []]
				return: [integer!]
			] a-library "settimeofday"
		]
		system/version/4 = 3 [							; Windows
			a-library: load/library %kernel32.dll
			make routine! [
				systemtime [struct! []]
				return: [int]
			] a-library "SetSystemTime"
		]
		all [system/version/4 = 4 system/version/5 = 2] [			; Linux libc6
			a-library: %/lib/libc.so.6
			make routine! [
				tv [struct! []]
				tz [struct! []]
				return: [integer!]
			] a-library "settimeofday"
		]
		system/version/4 = 4 [							; Linux
			a-library: load/library %libc.so
			make routine! [
				tv [struct! []]
				tz [struct! []]
				return: [integer!]
			] a-library "settimeofday"
		]
		system/version/4 = 7 [							; FreeBSD
			a-library: load/library %libc.so
			make routine! [
				tv [struct! []]
				tz [struct! []]
				return: [integer!]
			] a-library "settimeofday"
		]
		system/version/4 = 8 [							; NetBSD
			a-library: load/library %libc.so
			make routine! [
				tv [struct! []]
				tz [struct! []]
				return: [integer!]
			] a-library "settimeofday"
		]
		system/version/4 = 9 [							; OpenBSD
			a-library: load/library %libc.so
			make routine! [
				tv [struct! []]
				tz [struct! []]
				return: [integer!]
			] a-library "settimeofday"
		]
		system/version/4 = 10 [							; Solaris
			a-library: load/library %libc.so
			make routine! [
				tv [struct! []]
				tz [struct! []]
				return: [integer!]
			] a-library "settimeofday"
		]
	]
	free a-library
	success
] "failed, error was caused in the test code"
[struct? make struct! [i [integer!]] none] "failed, error was caused in the test code"
[not struct? 1] "succeeded"
[struct! = type? make struct! [] none] "failed, error was caused in the test code"
[struct? make struct! [] none] "failed, error was caused in the test code"
[struct? #[struct! [] []]] "failed, cannot load test source"
[
	s: make string! 15
	addr: func [s] [copy third make struct! [s [string!]] reduce [s]]
	(addr s) = (addr insert/dup s #"0" 15)
] "failed, error was caused in the test code"
[false = not make struct! [] none] "failed, error was caused in the test code"
[
	a-value: make struct! [] none
	f: does [:a-value]
	same? third :a-value third f
] "failed, error was caused in the test code"
[
	a-value: make struct! [i [integer!]] [1]
	1 == a-value/i
] "failed, error was caused in the test code"
[
	a-value: make struct! [] none
	same? third :a-value third all [:a-value]
] "failed, error was caused in the test code"
[
	a-value: make struct! [] none
	same? third :a-value third all [true :a-value]
] "failed, error was caused in the test code"
[
	a-value: make struct! [] none
	true = all [:a-value true]
] "failed, error was caused in the test code"
[
	a-value: make struct! [] none
	same? third :a-value third do reduce [:a-value]
] "failed, error was caused in the test code"
[
	a-value: make struct! [] none
	same? third :a-value third do :a-value
] "failed, error was caused in the test code"
[if make struct! [] none [true]] "failed, error was caused in the test code"
[
	a-value: make struct! [] none
	same? third :a-value third any [:a-value]
] "failed, error was caused in the test code"
[
	a-value: make struct! [] none
	same? third :a-value third any [false :a-value]
] "failed, error was caused in the test code"
[
	a-value: make struct! [] none
	same? third :a-value third any [:a-value false]
] "failed, error was caused in the test code"
[percent? 0%] "succeeded"
[not percent? 1] "succeeded"
[percent! = type? 0%] "succeeded"
[percent? 0.0%] "succeeded"
[percent? 1%] "succeeded"
[percent? -1.0%] "succeeded"
[percent? 2.2%] "succeeded"
[0% = make percent! 0] "succeeded"
[0% = make percent! "0"] "succeeded"
[0% = to percent! 0] "succeeded"
[0% = to percent! "0"] "succeeded"
[100% = to percent! 1] "succeeded"
[10% = to percent! 0.1] "succeeded"
[error? try [to percent! "t"]] "succeeded"
[0 = to decimal! 0%] "succeeded"
[0.1 = to decimal! 10%] "succeeded"
[1.0 = to decimal! 100%] "succeeded"
[percent! = type? 0%] "succeeded"
[0% = load mold 0.0%] "succeeded"
[1% = load mold 1.0%] "succeeded"
[1.1% = load mold 1.1%] "succeeded"
[-1% = load mold -1.0%] "succeeded"
[same? 1.7976931348623157e310% load mold/all 1.7976931348623157e310%] "failed, cannot load test source"
[same? -1.7976931348623157E310% load mold/all -1.7976931348623157e310%] "failed, cannot load test source"
[same? 2.2250738585072014E-310% load mold/all 2.2250738585072014E-310%] "succeeded"
[same? 2.2250738585072009E-310% load mold/all 2.2250738585072009E-310%] "succeeded"
[same? 4.9406564584124654E-322% load mold/all 4.9406564584124654E-322%] "succeeded"
[same? -2.2250738585072014E-306% load mold/all -2.2250738585072014E-306%] "succeeded"
[same? -2.2250738585072009E-306% load mold/all -2.2250738585072009E-306%] "succeeded"
[same? -4.9406564584124654E-322% load mold/all -4.9406564584124654E-322%] "succeeded"
[same? 10.000000000000001% load mold/all 10.000000000000001%] "succeeded"
[same? 29.999999999999999% load mold/all 29.999999999999999%] "succeeded"
[same? 30.000000000000004% load mold/all 30.000000000000004%] "succeeded"
[same? 9.9999999999999926e154% load mold/all 9.9999999999999926e154%] "succeeded"
[1.1% == 1,1%] "succeeded"
[110% = make percent! 110%] "succeeded"
[110% = make percent! "110%"] "succeeded"
[1.1% = to percent! 1.1%] "succeeded"
[1.1% = to percent! "1.1%"] "succeeded"
[error? try [to percent! "t"]] "succeeded"
[error? try [repeat n 200 [try [close open open join tcp://localhost: n]]] true] "crashed"
[none? file-type? %foo.0123456789bar0123456789] "succeeded"
[(checksum/method to-binary "foo" 'CRC32) = -1938594527] "succeeded"
[(checksum/method to-binary "" 'CRC32) = 0] "succeeded"
["foo" = decompress/gzip compress/gzip "foo"] "failed, error was caused in the test code"
[#{1F8B0800EF46BE4C00034BCBCF07002165738C03000000} = compress/gzip "foo"] "failed"
["foo" = decompress/gzip #{1F8B0800EF46BE4C00034BCBCF07002165738C03000000}] "failed, error was caused in the test code"
[image? to image! make gob! []] "failed, error was caused in the test code"
['logic! = to word! logic!] "succeeded"
['percent! = to word! percent!] "succeeded"
['money! = to word! money!] "succeeded"
[
	b1: [self]
	ob: make object! [
	    b2: [self]
	    set 'a same? first b2 first bind/copy b1 'b2
	]
	a
] "succeeded"
[
	b1: [self]
	f: func [/local b2] [
	    b2: [self]
	    same? first b2 first bind/copy b1 'b2
	]
	f
] "succeeded"
[
	b1: [self]
	f: closure [/local b2] [
	    b2: [self]
	    same? first b2 first bind/copy b1 'b2
	]
	f
] "succeeded"
[
	b1: [self]
	repeat i 1 [
	    b2: [self]
	    same? first b2 first bind/copy b1 'i
	]
] "succeeded"
[not head? bind next [1] 'rebol] "succeeded"
[y: 'x do has [x] [x: true get bind y 'x]] "succeeded"
[equal? error? try [set /a 1] error? try [set [/a] 1]] "failed"
[equal? error? try [set #a 1] error? try [set [#a] 1]] "failed"
[any-function? :clean-path] "succeeded"
[exists? http://www.rebol.com/index.html] "failed, not a logic value"
[
	any [
		not error? e: try [make-dir %/folder-to-save-test-files]
		e/type = 'access
	]
] "succeeded"
[
	f: does [#]
	# == f
] "succeeded"
[3.2.1.4.5 = reverse/part 1.2.3.4.5 3] "succeeded"
[
	b: [user 1 _user 2]
	1 = b/user
] "succeeded"
[12:00 = difference 13/1/2011/12:00 13/1/2011] "succeeded"
[
	f: func [] []
	not same? body-of :f body-of :f
] "succeeded"

system/version: 2.101.0.6.1
interpreter-checksum: none
test-checksum: #{6DCA0E6C5BADB32C66CBBECF6C75D505027D012D}
Total: 4472
Succeeded: 4081
Test-failures: 70
Crashes: 10
Dialect-failures: 0
Skipped: 311